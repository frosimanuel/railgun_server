{"version":3,"file":"error.js","sourceRoot":"","sources":["../../src/utils/error.ts"],"names":[],"mappings":"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","sourcesContent":["import { isDefined } from './util';\n\nconst STRING_PREFIX_AFTER_UNICODE_REPLACEMENT = 'y %';\n\nconst validAscii = (str: string) => {\n  return str.replace(\n    // eslint-disable-next-line no-useless-escape\n    /[^A-Za-z 0-9 \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~]*/g,\n    '',\n  );\n};\n\nexport const sanitizeError = (cause: Error): Error => {\n  if (isDefined(cause) && cause.message) {\n    const lowercaseMsg = cause.message.toLowerCase();\n    if (\n      lowercaseMsg.includes('quorum') ||\n      lowercaseMsg.includes('could not connect to')\n    ) {\n      return new Error('Could not connect.', { cause });\n    }\n    if (lowercaseMsg.includes('call revert exception')) {\n      return new Error('Failed to connect to RPC.', { cause });\n    }\n    if (lowercaseMsg.includes('already known')) {\n      return new Error(\n        'Transaction successful but ethers request for TXID failed.',\n        { cause },\n      );\n    }\n    if (lowercaseMsg.includes('missing revert data')) {\n      return new Error('RPC connection error.', { cause });\n    }\n    if (\n      lowercaseMsg.includes(\n        'transaction may fail or may require manual gas limit',\n      )\n    ) {\n      return new Error('Unknown error. Transaction failed.', { cause });\n    }\n    if (lowercaseMsg.includes('replacement fee too low')) {\n      return new Error(\n        'Nonce is used in a pending transaction, and replacement fee is too low. Please increase your network fee to replace the pending transaction.',\n        { cause },\n      );\n    }\n    if (lowercaseMsg.includes('intrinsic gas too low')) {\n      return new Error(\n        'Gas price rejected. Please select a higher gas price or resubmit.',\n        { cause },\n      );\n    }\n    if (lowercaseMsg.includes('transaction underpriced')) {\n      return new Error(\n        'Gas fee too low. Please select a higher gas price and resubmit.',\n        { cause },\n      );\n    }\n    if (lowercaseMsg.includes('insufficient funds for intrinsic')) {\n      return new Error('Insufficient gas to process transaction.', { cause });\n    }\n    if (lowercaseMsg.includes('nonce has already been used')) {\n      return new Error(\n        // Do not change 'Nonce already used' string of Error message.\n        'Nonce already used: the transaction was already completed.',\n        { cause },\n      );\n    }\n    if (lowercaseMsg.includes('error while dialing dial tcp')) {\n      return new Error(\n        'Error while connecting to RPC provider. Please try again.',\n        { cause },\n      );\n    }\n    if (\n      lowercaseMsg.includes('spendable private balance too low') &&\n      lowercaseMsg.includes('broadcaster fee')\n    ) {\n      return new Error('Private balance too low to pay broadcaster fee.', {\n        cause,\n      });\n    }\n\n    // Custom RAILGUN contract error messages\n    if (lowercaseMsg.includes('railgunsmartwallet')) {\n      if (lowercaseMsg.includes('invalid nft note value')) {\n        return new Error('RailgunSmartWallet: Invalid NFT Note Value.', {\n          cause,\n        });\n      }\n      if (lowercaseMsg.includes('unsupported token')) {\n        return new Error(\n          'RailgunSmartWallet: Unsupported Token. This token cannot interact with the RAILGUN contract.',\n          { cause },\n        );\n      }\n      if (lowercaseMsg.includes('invalid note value')) {\n        return new Error(\n          'RailgunSmartWallet: Invalid Note Value. Please submit transaction with a corrected amount.',\n          { cause },\n        );\n      }\n      if (lowercaseMsg.includes('invalid adapt contract as sender')) {\n        return new Error(\n          'RailgunSmartWallet: Invalid Adapt Contract as Sender. Please update your frontend to current Adapt module versions.',\n          { cause },\n        );\n      }\n      if (lowercaseMsg.includes('invalid merkle root')) {\n        return new Error(\n          'RailgunSmartWallet: Invalid Merkle Root. Please sync your balances and try again.',\n          { cause },\n        );\n      }\n      if (lowercaseMsg.includes('note already spent')) {\n        return new Error(\n          'RailgunSmartWallet: Note Already Spent. Please sync your balances and try again.',\n          { cause },\n        );\n      }\n      if (lowercaseMsg.includes('invalid note ciphertext array length')) {\n        return new Error(\n          'RailgunSmartWallet: Invalid Note Ciphertext Array Length. Please sync balances and re-prove your transaction.',\n          { cause },\n        );\n      }\n      if (lowercaseMsg.includes('invalid withdraw note')) {\n        return new Error(\n          'RailgunSmartWallet: Invalid Unshield Note. Please sync balances and re-prove your transaction.',\n          { cause },\n        );\n      }\n      if (lowercaseMsg.includes('invalid snark proof')) {\n        return new Error(\n          'RailgunSmartWallet: Invalid Snark Proof. Please re-prove your transaction.',\n          { cause },\n        );\n      }\n    }\n\n    return new Error(\n      validAscii(cause.message).replace(\n        `:${STRING_PREFIX_AFTER_UNICODE_REPLACEMENT}`,\n        ': ',\n      ),\n    );\n  }\n\n  return new Error('Unknown error. Please try again.', { cause });\n};\n"]}