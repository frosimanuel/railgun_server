{"version":3,"file":"fallback-provider.js","sourceRoot":"","sources":["../../src/utils/fallback-provider.ts"],"names":[],"mappings":";;;AAAA,mCAAsE;AACtE,iFAA2E;AAgBpE,MAAM,oCAAoC,GAAG,CAClD,MAAkC,EAChB,EAAE;IACpB,IAAI;QACF,MAAM,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,CACzC,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,GAAG,GAAG,MAAM,EACjC,CAAC,CACF,CAAC;QACF,IAAI,WAAW,GAAG,CAAC,EAAE;YACnB,MAAM,IAAI,KAAK,CACb,iEAAiE,CAClE,CAAC;SACH;QAED,MAAM,OAAO,GAAG,gBAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QAErD,MAAM,SAAS,GAA6B,MAAM,CAAC,SAAS,CAAC,GAAG,CAC9D,CAAC,EACC,QAAQ,EAAE,WAAW,EACrB,QAAQ,EACR,MAAM,EACN,YAAY,EACZ,eAAe,GAChB,EAAE,EAAE;YACH,MAAM,WAAW,GAAG,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAClD,MAAM,QAAQ,GAAG,WAAW;gBAC1B,CAAC,CAAC,IAAI,0BAAiB,CAAC,WAAW,EAAE,OAAO,CAAC;gBAC7C,CAAC,CAAC,IAAI,wDAAyB,CAC3B,WAAW,EACX,OAAO,EACP,eAAe,CAChB,CAAC;YAEN,MAAM,sBAAsB,GAA2B;gBACrD,QAAQ;gBACR,QAAQ;gBACR,MAAM;gBACN,YAAY;aACb,CAAC;YACF,OAAO,sBAAsB,CAAC;QAChC,CAAC,CACF,CAAC;QAEF,OAAO,IAAI,yBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;KACjD;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,EAAE;YAC7B,MAAM,IAAI,KAAK,CACb,4DAA4D,EAC5D,EAAE,KAAK,EAAE,CACV,CAAC;SACH;QACD,MAAM,IAAI,KAAK,CACb,8CAA8C,MAAM,CAAC,OAAO,EAAE,EAC9D,EAAE,KAAK,EAAE,CACV,CAAC;KACH;AACH,CAAC,CAAC;AAxDW,QAAA,oCAAoC,wCAwD/C","sourcesContent":["import { FallbackProvider, Network, WebSocketProvider } from 'ethers';\nimport { ConfiguredJsonRpcProvider } from './configured-json-rpc-provider';\nimport { FallbackProviderConfig } from 'ethers/lib.commonjs/providers/provider-fallback';\n\nexport type FallbackProviderJsonConfig = {\n  chainId: number;\n  providers: ProviderJson[];\n};\n\nexport type ProviderJson = {\n  priority: number;\n  weight: number;\n  provider: string;\n  stallTimeout?: number;\n  maxLogsPerBatch?: number;\n};\n\nexport const createFallbackProviderFromJsonConfig = (\n  config: FallbackProviderJsonConfig,\n): FallbackProvider => {\n  try {\n    const totalWeight = config.providers.reduce(\n      (acc, { weight }) => acc + weight,\n      0,\n    );\n    if (totalWeight < 2) {\n      throw new Error(\n        'Total weight across providers must be >= 2 for fallback quorum.',\n      );\n    }\n\n    const network = Network.from(Number(config.chainId));\n\n    const providers: FallbackProviderConfig[] = config.providers.map(\n      ({\n        provider: providerURL,\n        priority,\n        weight,\n        stallTimeout,\n        maxLogsPerBatch,\n      }) => {\n        const isWebsocket = providerURL.startsWith('wss');\n        const provider = isWebsocket\n          ? new WebSocketProvider(providerURL, network)\n          : new ConfiguredJsonRpcProvider(\n              providerURL,\n              network,\n              maxLogsPerBatch,\n            );\n\n        const fallbackProviderConfig: FallbackProviderConfig = {\n          provider,\n          priority,\n          weight,\n          stallTimeout,\n        };\n        return fallbackProviderConfig;\n      },\n    );\n\n    return new FallbackProvider(providers, network);\n  } catch (cause) {\n    if (!(cause instanceof Error)) {\n      throw new Error(\n        'Non-error thrown from createFallbackProviderFromJsonConfig',\n        { cause },\n      );\n    }\n    throw new Error(\n      `Invalid fallback provider config for chain ${config.chainId}`,\n      { cause },\n    );\n  }\n};\n"]}