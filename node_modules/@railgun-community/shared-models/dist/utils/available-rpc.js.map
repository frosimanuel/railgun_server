{"version":3,"file":"available-rpc.js","sourceRoot":"","sources":["../../src/utils/available-rpc.ts"],"names":[],"mappings":";;;AAAA,yCAAyC;AACzC,mCAAkD;AAElD,qCAA+C;AAC/C,yCAA4C;AAI5C,MAAM,uBAAuB,GAAG,IAAI,CAAC;AAErC;;;GAGG;AACI,MAAM,yBAAyB,GAAG,KAAK,EAC5C,OAAe,EACf,aAA6B,EAC7B,QAAkB,EACO,EAAE;IAC3B,MAAM,YAAY,GAAuB,MAAM,OAAO,CAAC,GAAG,CACxD,aAAa,CAAC,GAAG,CACf,KAAK,EAAC,YAAY,EAAC,EAAE,CACnB,MAAM,cAAc,CAAC,OAAO,EAAE,YAAY,CAAC,QAAQ,EAAE,QAAQ,CAAC,CACjE,CACF,CAAC;IAEF,MAAM,mBAAmB,GAAG,YAAY,CAAC,MAAM,CAC7C,WAAW,CAAC,EAAE,CAAC,WAAW,IAAI,IAAI,IAAI,WAAW,GAAG,CAAC,CAC1C,CAAC;IACd,MAAM,iBAAiB,GAAG,IAAA,4BAAmB,EAAC,mBAAmB,CAAC,CAAC;IACnE,MAAM,eAAe,GAAG,iBAAiB,GAAG,GAAG,CAAC;IAChD,MAAM,eAAe,GAAG,iBAAiB,GAAG,GAAG,CAAC;IAEhD,OAAO,aAAa,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,KAAK,EAAE,EAAE;QAClD,MAAM,WAAW,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;QACxC,IAAI,WAAW,IAAI,IAAI,EAAE;YACvB,QAAQ,CACN,+BAA+B,YAAY,CAAC,QAAQ,mBAAmB,CACxE,CAAC;YACF,OAAO,KAAK,CAAC;SACd;QACD,IAAI,WAAW,GAAG,eAAe,EAAE;YACjC,QAAQ,CACN,+BAA+B,YAAY,CAAC,QAAQ,mBAClD,iBAAiB,GAAG,WACtB,cAAc,CACf,CAAC;YACF,OAAO,KAAK,CAAC;SACd;QACD,IAAI,WAAW,GAAG,eAAe,EAAE;YACjC,QAAQ,CACN,+BAA+B,YAAY,CAAC,QAAQ,mBAClD,WAAW,GAAG,iBAChB,cAAc,CACf,CAAC;YACF,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AA7CW,QAAA,yBAAyB,6BA6CpC;AAEF,MAAM,cAAc,GAAG,KAAK,EAC1B,OAAe,EACf,QAAgB,EAChB,QAAkB,EACS,EAAE;IAC7B,MAAM,OAAO,GAAG,gBAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtC,MAAM,WAAW,GAAG,IAAI,wBAAe,CAAC,QAAQ,EAAE,OAAO,EAAE;QACzD,aAAa,EAAE,OAAO;KACvB,CAAC,CAAC;IACH,IAAI;QACF,MAAM,KAAK,GAAG,MAAM,IAAA,yBAAc,EAChC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAC9B,uBAAuB,CACxB,CAAC;QACF,IAAI,KAAK,IAAI,IAAI,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;SAClC;QACD,OAAO,KAAK,CAAC,MAAM,CAAC;KACrB;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,sCAAsC,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;SACpE;QACD,WAAW,CAAC,OAAO,EAAE,CAAC;QACtB,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACxB,OAAO,SAAS,CAAC;KAClB;AACH,CAAC,CAAC","sourcesContent":["/// <reference types=\"../types/global\" />\nimport { JsonRpcProvider, Network } from 'ethers';\nimport { ProviderJson } from './fallback-provider';\nimport { getUpperBoundMedian } from './median';\nimport { promiseTimeout } from './promises';\n\ntype LogError = (err: string) => void;\n\nconst BLOCK_NUMBER_TIMEOUT_MS = 5000;\n\n/**\n * Health checks ProviderJson inputs, and returns an array of available RPC providers.\n * Available means that they respond to getBlockNumber(), and they are +/- 100 blocks from the median.\n */\nexport const getAvailableProviderJSONs = async (\n  chainId: number,\n  providerJsons: ProviderJson[],\n  logError: LogError,\n): Promise<ProviderJson[]> => {\n  const blockNumbers: Optional<number>[] = await Promise.all(\n    providerJsons.map(\n      async providerJson =>\n        await getBlockNumber(chainId, providerJson.provider, logError),\n    ),\n  );\n\n  const nonZeroBlockNumbers = blockNumbers.filter(\n    blockNumber => blockNumber != null && blockNumber > 0,\n  ) as number[];\n  const medianBlockNumber = getUpperBoundMedian(nonZeroBlockNumbers);\n  const lowerBoundRange = medianBlockNumber - 100;\n  const upperBoundRange = medianBlockNumber + 100;\n\n  return providerJsons.filter((providerJson, index) => {\n    const blockNumber = blockNumbers[index];\n    if (blockNumber == null) {\n      logError(\n        `RPC Health Check failed for ${providerJson.provider}: No Block Number`,\n      );\n      return false;\n    }\n    if (blockNumber < lowerBoundRange) {\n      logError(\n        `RPC Health Check failed for ${providerJson.provider}: Block Number -${\n          medianBlockNumber - blockNumber\n        } from median`,\n      );\n      return false;\n    }\n    if (blockNumber > upperBoundRange) {\n      logError(\n        `RPC Health Check failed for ${providerJson.provider}: Block Number +${\n          blockNumber - medianBlockNumber\n        } from median`,\n      );\n      return false;\n    }\n    return true;\n  });\n};\n\nconst getBlockNumber = async (\n  chainId: number,\n  provider: string,\n  logError: LogError,\n): Promise<Optional<number>> => {\n  const network = Network.from(chainId);\n  const rpcProvider = new JsonRpcProvider(provider, network, {\n    staticNetwork: network,\n  });\n  try {\n    const block = await promiseTimeout(\n      rpcProvider.getBlock('latest'),\n      BLOCK_NUMBER_TIMEOUT_MS,\n    );\n    if (block == null) {\n      throw new Error('Block is null');\n    }\n    return block.number;\n  } catch (cause) {\n    if (!(cause instanceof Error)) {\n      throw new Error('Non-error thrown from getBlockNumber', { cause });\n    }\n    rpcProvider.destroy();\n    logError(cause.message);\n    return undefined;\n  }\n};\n"]}