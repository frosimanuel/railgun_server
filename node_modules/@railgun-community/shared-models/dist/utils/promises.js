"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.poll = exports.promiseTimeout = exports.delay = void 0;
const delay = (delayInMS) => {
    return new Promise(resolve => setTimeout(resolve, delayInMS));
};
exports.delay = delay;
function promiseTimeout(promise, ms, customTimeoutError) {
    // Create a promise that rejects in <ms> milliseconds
    const timeout = new Promise((_resolve, reject) => {
        const id = setTimeout(() => {
            clearTimeout(id);
            reject(new Error(`Timed out in ${ms} ms.`));
        }, ms);
    });
    // Returns a race between our timeout and the passed in promise
    return Promise.race([promise, timeout])
        .then(result => result)
        .catch(err => {
        if (!(err instanceof Error)) {
            throw err;
        }
        if (err.message.startsWith('Timed out')) {
            throw customTimeoutError ?? err;
        }
        throw err;
    });
}
exports.promiseTimeout = promiseTimeout;
async function poll(fn, passCondition, delayInMS, allowedAttempts = 1) {
    let result = await fn();
    let attempts = 1;
    while (attempts <= allowedAttempts) {
        if (passCondition(result)) {
            return result;
        }
        await (0, exports.delay)(delayInMS);
        result = await fn();
        attempts++;
    }
    return undefined;
}
exports.poll = poll;
//# sourceMappingURL=promises.js.map