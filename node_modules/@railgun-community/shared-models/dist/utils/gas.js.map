{"version":3,"file":"gas.js","sourceRoot":"","sources":["../../src/utils/gas.ts"],"names":[],"mappings":";;;AAAA,6DAAuE;AACvE,6DAA6E;AAEtE,MAAM,2BAA2B,GAAG,CACzC,WAAwB,EACxB,oBAA6B,EACjB,EAAE;IACd,MAAM,EAAE,iBAAiB,EAAE,GAAG,+BAAc,CAAC,WAAW,CAAC,CAAC;IAE1D,IAAI,iBAAiB,KAAK,2BAAU,CAAC,KAAK,IAAI,CAAC,oBAAoB,EAAE;QACnE,4DAA4D;QAC5D,iDAAiD;QACjD,OAAO,2BAAU,CAAC,KAAK,CAAC;KACzB;IAED,OAAO,iBAAiB,CAAC;AAC3B,CAAC,CAAC;AAbW,QAAA,2BAA2B,+BAatC;AAEK,MAAM,iBAAiB,GAAG,CAAC,WAAmB,EAAU,EAAE;IAC/D,sCAAsC;IACtC,OAAO,CAAC,WAAW,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;AACzC,CAAC,CAAC;AAHW,QAAA,iBAAiB,qBAG5B;AAEK,MAAM,iBAAiB,GAAG,CAAC,UAAiC,EAAE,EAAE;IACrE,QAAQ,UAAU,CAAC,UAAU,EAAE;QAC7B,KAAK,2BAAU,CAAC,KAAK,CAAC;QACtB,KAAK,2BAAU,CAAC,KAAK,CAAC,CAAC;YACrB,OAAO,UAAU,CAAC,QAAQ,CAAC;SAC5B;QACD,KAAK,2BAAU,CAAC,KAAK,CAAC,CAAC;YACrB,OAAO,UAAU,CAAC,YAAY,CAAC;SAChC;KACF;AACH,CAAC,CAAC;AAVW,QAAA,iBAAiB,qBAU5B;AAEK,MAAM,iBAAiB,GAAG,CAC/B,qBAA4C,EAC5C,EAAE;IACF,MAAM,QAAQ,GAAG,IAAA,yBAAiB,EAAC,qBAAqB,CAAC,CAAC;IAC1D,MAAM,EAAE,WAAW,EAAE,GAAG,qBAAqB,CAAC;IAC9C,OAAO,WAAW,GAAG,QAAQ,CAAC;AAChC,CAAC,CAAC;AANW,QAAA,iBAAiB,qBAM5B;AAEK,MAAM,mBAAmB,GAAG,CACjC,qBAA4C,EACpC,EAAE;IACV,MAAM,QAAQ,GAAG,IAAA,yBAAiB,EAAC,qBAAqB,CAAC,CAAC;IAC1D,MAAM,EAAE,WAAW,EAAE,GAAG,qBAAqB,CAAC;IAC9C,OAAO,IAAA,yBAAiB,EAAC,WAAW,CAAC,GAAG,QAAQ,CAAC;AACnD,CAAC,CAAC;AANW,QAAA,mBAAmB,uBAM9B","sourcesContent":["import { NetworkName, NETWORK_CONFIG } from '../models/network-config';\nimport { EVMGasType, TransactionGasDetails } from '../models/response-types';\n\nexport const getEVMGasTypeForTransaction = (\n  networkName: NetworkName,\n  sendWithPublicWallet: boolean,\n): EVMGasType => {\n  const { defaultEVMGasType } = NETWORK_CONFIG[networkName];\n\n  if (defaultEVMGasType === EVMGasType.Type2 && !sendWithPublicWallet) {\n    // Broadcaster transactions require overallBatchMinGasPrice.\n    // This is only supported by type 1 transactions.\n    return EVMGasType.Type1;\n  }\n\n  return defaultEVMGasType;\n};\n\nexport const calculateGasLimit = (gasEstimate: bigint): bigint => {\n  // Gas Limit: Add 20% to gas estimate.\n  return (gasEstimate * 12000n) / 10000n;\n};\n\nexport const calculateGasPrice = (gasDetails: TransactionGasDetails) => {\n  switch (gasDetails.evmGasType) {\n    case EVMGasType.Type0:\n    case EVMGasType.Type1: {\n      return gasDetails.gasPrice;\n    }\n    case EVMGasType.Type2: {\n      return gasDetails.maxFeePerGas;\n    }\n  }\n};\n\nexport const calculateTotalGas = (\n  transactionGasDetails: TransactionGasDetails,\n) => {\n  const gasPrice = calculateGasPrice(transactionGasDetails);\n  const { gasEstimate } = transactionGasDetails;\n  return gasEstimate * gasPrice;\n};\n\nexport const calculateMaximumGas = (\n  transactionGasDetails: TransactionGasDetails,\n): bigint => {\n  const gasPrice = calculateGasPrice(transactionGasDetails);\n  const { gasEstimate } = transactionGasDetails;\n  return calculateGasLimit(gasEstimate) * gasPrice;\n};\n"]}