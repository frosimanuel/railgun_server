{"version":3,"file":"promises.js","sourceRoot":"","sources":["../../src/utils/promises.ts"],"names":[],"mappings":";;;AAAO,MAAM,KAAK,GAAG,CAAC,SAAiB,EAAiB,EAAE;IACxD,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC;AAFW,QAAA,KAAK,SAEhB;AAEF,SAAgB,cAAc,CAC5B,OAAmB,EACnB,EAAU,EACV,kBAA0B;IAE1B,qDAAqD;IACrD,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE;QAC/C,MAAM,EAAE,GAAG,UAAU,CAAC,GAAG,EAAE;YACzB,YAAY,CAAC,EAAE,CAAC,CAAC;YACjB,MAAM,CAAC,IAAI,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,CAAC;QAC9C,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,+DAA+D;IAC/D,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SACpC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAW,CAAC;SAC3B,KAAK,CAAC,GAAG,CAAC,EAAE;QACX,IAAI,CAAC,CAAC,GAAG,YAAY,KAAK,CAAC,EAAE;YAC3B,MAAM,GAAG,CAAC;SACX;QACD,IAAI,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;YACvC,MAAM,kBAAkB,IAAI,GAAG,CAAC;SACjC;QACD,MAAM,GAAG,CAAC;IACZ,CAAC,CAAC,CAAC;AACP,CAAC;AAzBD,wCAyBC;AAEM,KAAK,UAAU,IAAI,CACxB,EAAoB,EACpB,aAAqC,EACrC,SAAiB,EACjB,eAAe,GAAG,CAAC;IAEnB,IAAI,MAAM,GAAG,MAAM,EAAE,EAAE,CAAC;IACxB,IAAI,QAAQ,GAAG,CAAC,CAAC;IACjB,OAAO,QAAQ,IAAI,eAAe,EAAE;QAClC,IAAI,aAAa,CAAC,MAAM,CAAC,EAAE;YACzB,OAAO,MAAM,CAAC;SACf;QACD,MAAM,IAAA,aAAK,EAAC,SAAS,CAAC,CAAC;QACvB,MAAM,GAAG,MAAM,EAAE,EAAE,CAAC;QACpB,QAAQ,EAAE,CAAC;KACZ;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAjBD,oBAiBC","sourcesContent":["export const delay = (delayInMS: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, delayInMS));\n};\n\nexport function promiseTimeout<T>(\n  promise: Promise<T>,\n  ms: number,\n  customTimeoutError?: Error,\n): Promise<T> {\n  // Create a promise that rejects in <ms> milliseconds\n  const timeout = new Promise((_resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(`Timed out in ${ms} ms.`));\n    }, ms);\n  });\n\n  // Returns a race between our timeout and the passed in promise\n  return Promise.race([promise, timeout])\n    .then(result => result as T)\n    .catch(err => {\n      if (!(err instanceof Error)) {\n        throw err;\n      }\n      if (err.message.startsWith('Timed out')) {\n        throw customTimeoutError ?? err;\n      }\n      throw err;\n    });\n}\n\nexport async function poll<T>(\n  fn: () => Promise<T>,\n  passCondition: (result: T) => boolean,\n  delayInMS: number,\n  allowedAttempts = 1,\n): Promise<Optional<T>> {\n  let result = await fn();\n  let attempts = 1;\n  while (attempts <= allowedAttempts) {\n    if (passCondition(result)) {\n      return result;\n    }\n    await delay(delayInMS);\n    result = await fn();\n    attempts++;\n  }\n  return undefined;\n}\n"]}