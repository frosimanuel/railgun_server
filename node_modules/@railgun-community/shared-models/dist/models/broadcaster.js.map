{"version":3,"file":"broadcaster.js","sourceRoot":"","sources":["../../src/models/broadcaster.ts"],"names":[],"mappings":";;;AAQa,QAAA,iCAAiC,GAAG,IAAI,CAAC;AA6EtD,IAAY,2BAMX;AAND,WAAY,2BAA2B;IACrC,8CAAe,CAAA;IACf,sDAAuB,CAAA;IACvB,sDAAuB,CAAA;IACvB,4DAA6B,CAAA;IAC7B,gEAAiC,CAAA;AACnC,CAAC,EANW,2BAA2B,2CAA3B,2BAA2B,QAMtC","sourcesContent":["import { TXIDVersion } from './engine';\nimport {\n  ChainType,\n  CommitmentCiphertextV2,\n  CommitmentCiphertextV3,\n  PreTransactionPOIsPerTxidLeafPerList,\n} from './response-types';\n\nexport const MIN_BROADCASTER_RELIABILITY_SCORE = 0.75;\n\nexport type BroadcasterFeeMessageData = {\n  fees: MapType<string>;\n  feeExpiration: number;\n  feesID: string;\n  railgunAddress: string;\n  identifier: Optional<string>;\n  availableWallets: number;\n  version: string;\n  relayAdapt: string;\n  requiredPOIListKeys: string[];\n  reliability: number;\n};\n\nexport type BroadcasterFeeMessage = {\n  data: string; // hex-encoded FeeMessageData\n  signature: string; // hex-encoded signature\n};\n\ntype EncryptedData = [string, string];\n\nexport type BroadcasterEncryptedMethodParams = {\n  pubkey: string;\n  encryptedData: EncryptedData;\n};\n\ntype BroadcasterRawParamsShared = {\n  txidVersion: TXIDVersion;\n  chainID: number;\n  chainType: ChainType;\n  feesID: string;\n  broadcasterViewingKey: string;\n  devLog: boolean;\n  minVersion: string;\n  maxVersion: string;\n};\n\nexport type BroadcasterRawParamsTransact = BroadcasterRawParamsShared & {\n  to: string;\n  data: string;\n  minGasPrice: string;\n  useRelayAdapt: boolean;\n  preTransactionPOIsPerTxidLeafPerList: PreTransactionPOIsPerTxidLeafPerList;\n};\n\nexport type BroadcasterRawParamsPreAuthorize = BroadcasterRawParamsShared & {\n  gasLimit: string;\n  commitmentCiphertext: CommitmentCiphertextV2 | CommitmentCiphertextV3;\n  commitmentHash: string;\n};\n\nexport type BroadcasterPreAuthorization = {\n  gasLimit: string;\n  commitmentHash: string;\n  expiration: number;\n};\n\nexport type BroadcasterSignedPreAuthorization = BroadcasterPreAuthorization & {\n  signature: string;\n};\n\nexport type CachedTokenFee = {\n  feePerUnitGas: string;\n  expiration: number;\n  feesID: string;\n  availableWallets: number;\n  relayAdapt: string;\n  reliability: number;\n};\n\nexport type SelectedBroadcaster = {\n  railgunAddress: string;\n  tokenAddress: string;\n  tokenFee: CachedTokenFee;\n};\n\nexport enum BroadcasterConnectionStatus {\n  Error = 'Error',\n  Searching = 'Searching',\n  Connected = 'Connected',\n  Disconnected = 'Disconnected',\n  AllUnavailable = 'AllUnavailable',\n}\n"]}