"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XChaChaEncryptionAlgorithm = exports.TransactionHistoryItemCategory = exports.NFTTokenType = exports.POIProofEventStatus = exports.ChainType = exports.EVMGasType = void 0;
/**
 * Type0 / Type1 = non-EIP-1559 (gasPrice).
 * Type2 = EIP-1559 (maxFeePerGas and maxPriorityFeePerGas).
 */
var EVMGasType;
(function (EVMGasType) {
    EVMGasType[EVMGasType["Type0"] = 0] = "Type0";
    EVMGasType[EVMGasType["Type1"] = 1] = "Type1";
    EVMGasType[EVMGasType["Type2"] = 2] = "Type2";
})(EVMGasType || (exports.EVMGasType = EVMGasType = {}));
var ChainType;
(function (ChainType) {
    ChainType[ChainType["EVM"] = 0] = "EVM";
})(ChainType || (exports.ChainType = ChainType = {}));
var POIProofEventStatus;
(function (POIProofEventStatus) {
    POIProofEventStatus["LoadingNextBatch"] = "LoadingNextBatch";
    POIProofEventStatus["InProgress"] = "InProgress";
    POIProofEventStatus["Error"] = "Error";
    POIProofEventStatus["AllProofsCompleted"] = "AllProofsCompleted";
})(POIProofEventStatus || (exports.POIProofEventStatus = POIProofEventStatus = {}));
/**
 * Synced NFT types from TokenType (@railgun-community/engine).
 */
var NFTTokenType;
(function (NFTTokenType) {
    NFTTokenType[NFTTokenType["ERC721"] = 1] = "ERC721";
    NFTTokenType[NFTTokenType["ERC1155"] = 2] = "ERC1155";
})(NFTTokenType || (exports.NFTTokenType = NFTTokenType = {}));
var TransactionHistoryItemCategory;
(function (TransactionHistoryItemCategory) {
    TransactionHistoryItemCategory["ShieldERC20s"] = "ShieldERC20s";
    TransactionHistoryItemCategory["UnshieldERC20s"] = "UnshieldERC20s";
    TransactionHistoryItemCategory["TransferSendERC20s"] = "TransferSendERC20s";
    TransactionHistoryItemCategory["TransferReceiveERC20s"] = "TransferReceiveERC20s";
    TransactionHistoryItemCategory["Unknown"] = "Unknown";
})(TransactionHistoryItemCategory || (exports.TransactionHistoryItemCategory = TransactionHistoryItemCategory = {}));
var XChaChaEncryptionAlgorithm;
(function (XChaChaEncryptionAlgorithm) {
    XChaChaEncryptionAlgorithm["XChaCha"] = "XChaCha";
    XChaChaEncryptionAlgorithm["XChaChaPoly1305"] = "XChaChaPoly1305";
})(XChaChaEncryptionAlgorithm || (exports.XChaChaEncryptionAlgorithm = XChaChaEncryptionAlgorithm = {}));
//# sourceMappingURL=response-types.js.map