{"version":3,"file":"proof-of-innocence.js","sourceRoot":"","sources":["../../src/models/proof-of-innocence.ts"],"names":[],"mappings":";;;AAmCA,IAAY,YAKX;AALD,WAAY,YAAY;IACtB,iCAAiB,CAAA;IACjB,qCAAqB,CAAA;IACrB,qCAAqB,CAAA;IACrB,iDAAiC,CAAA;AACnC,CAAC,EALW,YAAY,4BAAZ,YAAY,QAKvB;AAkED,IAAY,qBAIX;AAJD,WAAY,qBAAqB;IAC/B,0CAAiB,CAAA;IACjB,8CAAqB,CAAA;IACrB,8CAAqB,CAAA;AACvB,CAAC,EAJW,qBAAqB,qCAArB,qBAAqB,QAIhC;AA8CD,IAAY,SASX;AATD,WAAY,SAAS;IACnB,6BAA6B;IAC7B,4BAAe,CAAA;IACf,iBAAiB;IACjB,4CAA+B,CAAA;IAC/B,2DAA2D;IAC3D,8CAAiC,CAAA;IACjC,sEAAsE;IACtE,gCAAmB,CAAA;AACrB,CAAC,EATW,SAAS,yBAAT,SAAS,QASpB;AAyCY,QAAA,sBAAsB,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,SAAS;AAC3C,QAAA,2BAA2B,GAAG,UAAU,CAAC;AACzC,QAAA,+BAA+B,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,WAAW;AACrD,QAAA,oCAAoC,GAAG,YAAY,CAAC;AAEjE,IAAY,WAGX;AAHD,WAAY,WAAW;IACrB,gCAAiB,CAAA;IACjB,gCAAiB,CAAA;AACnB,CAAC,EAHW,WAAW,2BAAX,WAAW,QAGtB;AASY,QAAA,kBAAkB,GAAc;IAC3C;QACE,GAAG,EAAE,kEAAkE;QACvE,IAAI,EAAE,WAAW,CAAC,MAAM;QACxB,IAAI,EAAE,gCAAgC;QACtC,WAAW,EACT,2KAA2K;KAC9K;CACF,CAAC;AAEF,IAAY,gBAmBX;AAnBD,WAAY,gBAAgB;IAC1B,mDAA+B,CAAA;IAC/B,iDAA6B,CAAA;IAC7B,sEAAkD,CAAA;IAClD,2DAAuC,CAAA;IACvC,wEAAoD,CAAA;IACpD,2DAAuC,CAAA;IACvC,8DAA0C,CAAA;IAC1C,sEAAkD,CAAA;IAClD,sEAAkD,CAAA;IAClD,sEAAkD,CAAA;IAClD,qFAAiE,CAAA;IACjE,yFAAqE,CAAA;IACrE,sDAAkC,CAAA;IAClC,iFAA6D,CAAA;IAC7D,uDAAmC,CAAA;IACnC,yDAAqC,CAAA;IACrC,4EAAwD,CAAA;IACxD,4EAAwD,CAAA;AAC1D,CAAC,EAnBW,gBAAgB,gCAAhB,gBAAgB,QAmB3B","sourcesContent":["import { TXIDVersion } from './engine';\nimport { NetworkName } from './network-config';\nimport { PreTransactionPOIsPerTxidLeafPerList } from './response-types';\n\nexport type TransactProofData = {\n  snarkProof: SnarkProof;\n  poiMerkleroots: string[];\n  txidMerkleroot: string;\n  txidMerklerootIndex: number;\n  blindedCommitmentsOut: string[];\n  railgunTxidIfHasUnshield: string;\n};\n\nexport type SnarkProof = {\n  pi_a: [string, string];\n  pi_b: [[string, string], [string, string]];\n  pi_c: [string, string];\n};\n\nexport type MerkleProof = {\n  leaf: string; // hash of commitment\n  elements: string[];\n  indices: string;\n  root: string;\n};\n\nexport type ShieldQueueStatus = {\n  unknown: number;\n  pending: number;\n  allowed: number;\n  blocked: number;\n  addedPOI: number;\n  latestShield: Optional<string>;\n};\n\nexport enum POIEventType {\n  Shield = 'Shield',\n  Transact = 'Transact',\n  Unshield = 'Unshield',\n  LegacyTransact = 'LegacyTransact',\n}\n\nexport type POIEventLengths = Record<POIEventType, number>;\n\nexport type POIListStatus = {\n  poiEventLengths: POIEventLengths;\n  listProviderPOIEventQueueLength: Optional<number>;\n  pendingTransactProofs: number;\n  blockedShields: number;\n  historicalMerklerootsLength: number;\n  latestHistoricalMerkleroot: string;\n};\n\nexport type GetTransactProofsParams = {\n  txidVersion: TXIDVersion;\n  bloomFilterSerialized: string;\n  listKey: string;\n};\n\nexport type GetBlockedShieldsParams = {\n  txidVersion: TXIDVersion;\n  bloomFilterSerialized: string;\n  listKey: string;\n};\n\nexport type LegacyTransactProofData = {\n  txidIndex: string;\n  npk: string;\n  value: string;\n  tokenHash: string;\n  blindedCommitment: string;\n};\n\nexport type SingleCommitmentProofsData = {\n  commitment: string;\n  npk: string;\n  utxoTreeIn: number;\n  utxoTreeOut: number;\n  utxoPositionOut: number;\n  railgunTxid: string;\n  pois: PreTransactionPOIsPerTxidLeafPerList;\n};\n\nexport type SubmitTransactProofParams = {\n  chainType: string;\n  chainID: string;\n  txidVersion: TXIDVersion;\n  listKey: string;\n  transactProofData: TransactProofData;\n};\n\nexport type SubmitLegacyTransactProofParams = {\n  chainType: string;\n  chainID: string;\n  txidVersion: TXIDVersion;\n  listKeys: string[];\n  legacyTransactProofDatas: LegacyTransactProofData[];\n};\n\nexport type SubmitSingleCommitmentProofsParams = {\n  chainType: string;\n  chainID: string;\n  txidVersion: TXIDVersion;\n  singleCommitmentProofsData: SingleCommitmentProofsData;\n};\n\nexport enum BlindedCommitmentType {\n  Shield = 'Shield',\n  Transact = 'Transact',\n  Unshield = 'Unshield',\n}\n\nexport type ValidatePOIMerklerootsParams = {\n  chainType: string;\n  chainID: string;\n  txidVersion: TXIDVersion;\n  listKey: string;\n  poiMerkleroots: string[];\n};\n\nexport type BlindedCommitmentData = {\n  blindedCommitment: string;\n  type: BlindedCommitmentType;\n};\n\nexport type GetPOIsPerListParams = {\n  chainType: string;\n  chainID: string;\n  txidVersion: TXIDVersion;\n  listKeys: string[];\n  blindedCommitmentDatas: BlindedCommitmentData[];\n};\n\nexport type GetMerkleProofsParams = {\n  chainType: string;\n  chainID: string;\n  txidVersion: TXIDVersion;\n  listKey: string;\n  blindedCommitments: string[];\n};\n\nexport type ValidateTxidMerklerootParams = {\n  chainType: string;\n  chainID: string;\n  txidVersion: TXIDVersion;\n  tree: number;\n  index: number;\n  merkleroot: string;\n};\n\nexport type GetLatestValidatedRailgunTxidParams = {\n  chainType: string;\n  chainID: string;\n  txidVersion: TXIDVersion;\n};\n\nexport enum POIStatus {\n  // POI valdated in event list\n  Valid = 'Valid',\n  // Shield blocked\n  ShieldBlocked = 'ShieldBlocked',\n  // Transact/Unshield proof submitted, but not validated yet\n  ProofSubmitted = 'ProofSubmitted',\n  // Missing internal/external transact/unshield proof, or ShieldPending\n  Missing = 'Missing',\n}\n\nexport type POIsPerList = {\n  [listKey: string]: POIStatus;\n};\n\nexport type POIsPerListMap = {\n  [blindedCommitment: string]: POIsPerList;\n};\n\nexport type TxidMerkletreeSyncStatus = {\n  currentTxidIndex: number;\n  currentMerkleroot: string;\n  validatedTxidIndex: number;\n  validatedMerkleroot: string;\n};\n\nexport type RailgunTxidStatus = {\n  currentTxidIndex: Optional<number>;\n  currentMerkleroot: Optional<string>;\n  validatedTxidIndex: Optional<number>;\n  validatedMerkleroot: Optional<string>;\n};\n\nexport type ValidatedRailgunTxidStatus = {\n  validatedTxidIndex: Optional<number>;\n  validatedMerkleroot: Optional<string>;\n};\n\nexport type NodeStatusAllNetworks = {\n  listKeys: string[];\n  forNetwork: Partial<Record<NetworkName, NodeStatusForNetwork>>;\n};\n\nexport type NodeStatusForNetwork = {\n  txidStatus: RailgunTxidStatus;\n  shieldQueueStatus: ShieldQueueStatus;\n  listStatuses: Record<string, POIListStatus>;\n  legacyTransactProofs: number;\n};\n\nexport const POI_SHIELD_PENDING_SEC = 60 * 60; // 1 hour\nexport const POI_SHIELD_PENDING_SEC_TEXT = 'One hour';\nexport const POI_SHIELD_PENDING_SEC_TEST_NET = 1 * 60; // 1 minute\nexport const POI_SHIELD_PENDING_SEC_TEST_NET_TEXT = 'One minute';\n\nexport enum POIListType {\n  Active = 'Active',\n  Gather = 'Gather',\n}\n\nexport type POIList = {\n  key: string;\n  type: POIListType;\n  name: string;\n  description: string;\n};\n\nexport const POI_REQUIRED_LISTS: POIList[] = [\n  {\n    key: 'efc6ddb59c098a13fb2b618fdae94c1c3a807abc8fb1837c93620c9143ee9e88',\n    type: POIListType.Active,\n    name: 'Chainalysis OFAC Sanctions API',\n    description:\n      'API which is used to restrict bad actors designated by the US Department of the Treasury. See: https://www.chainalysis.com/free-cryptocurrency-sanctions-screening-tools.',\n  },\n];\n\nexport enum POIJSONRPCMethod {\n  NodeStatus = 'ppoi_node_status',\n  POIEvents = 'ppoi_poi_events',\n  POIMerkletreeLeaves = 'ppoi_poi_merkletree_leaves',\n  TransactProofs = 'ppoi_transact_proofs',\n  LegacyTransactProofs = 'ppoi_legacy_transact_proofs',\n  BlockedShields = 'ppoi_blocked_shields',\n  SubmitPOIEvents = 'ppoi_submit_poi_events',\n  SubmitValidatedTXID = 'ppoi_submit_validated_txid',\n  RemoveTransactProof = 'ppoi_remove_transact_proof',\n  SubmitTransactProof = 'ppoi_submit_transact_proof',\n  SubmitLegacyTransactProofs = 'ppoi_submit_legacy_transact_proofs',\n  SubmitSingleCommitmentProofs = 'ppoi_submit_single_commitment_proofs',\n  POIsPerList = 'ppoi_pois_per_list',\n  POIsPerBlindedCommitment = 'ppoi_pois_per_blinded_commitment',\n  MerkleProofs = 'ppoi_merkle_proofs',\n  ValidatedTXID = 'ppoi_validated_txid',\n  ValidateTXIDMerkleroot = 'ppoi_validate_txid_merkleroot',\n  ValidatePOIMerkleroots = 'ppoi_validate_poi_merkleroots',\n}\n"]}