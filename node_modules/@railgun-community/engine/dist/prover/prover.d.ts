/// <reference types="node" />
import { ArtifactGetter, FormattedCircuitInputsRailgun, UnprovedTransactionInputs, Proof, PublicInputsRailgun, SnarkProof, NativeProverFormattedJsonInputsRailgun, FormattedCircuitInputsPOI, NativeProverFormattedJsonInputsPOI, PublicInputsPOI } from '../models/prover-types';
import { POIEngineProofInputs, TXIDVersion } from '../models';
type NativeProveRailgun = (circuitId: number, datBuffer: Buffer, zkeyBuffer: Buffer, inputJson: NativeProverFormattedJsonInputsRailgun, progressCallback: ProverProgressCallback) => Proof;
type NativeProvePOI = (circuitId: number, datBuffer: Buffer, zkeyBuffer: Buffer, inputJson: NativeProverFormattedJsonInputsPOI, progressCallback: ProverProgressCallback) => Proof;
type Groth16FullProveRailgun = (formattedInputs: FormattedCircuitInputsRailgun, wasm: Optional<ArrayLike<number>>, zkey: ArrayLike<number>, logger: {
    debug: (log: string) => void;
}, dat: Optional<ArrayLike<number>>, progressCallback: ProverProgressCallback) => Promise<{
    proof: Proof;
    publicSignals?: string[];
}>;
type Groth16FullProvePOI = (formattedInputs: FormattedCircuitInputsPOI, wasm: Optional<ArrayLike<number>>, zkey: ArrayLike<number>, logger: {
    debug: (log: string) => void;
}, dat: Optional<ArrayLike<number>>, progressCallback: ProverProgressCallback) => Promise<{
    proof: Proof;
    publicSignals?: string[];
}>;
type Groth16Verify = Optional<(vkey: object, publicSignals: bigint[], proof: Proof) => Promise<boolean>>;
export type SnarkJSGroth16 = {
    fullProve: (formattedInputs: Partial<Record<string, bigint | bigint[] | bigint[][]>>, wasm: Optional<ArrayLike<number>>, zkey: ArrayLike<number>, logger: {
        debug: (log: string) => void;
    }) => Promise<{
        proof: Proof;
        publicSignals: string[];
    }>;
    verify: Groth16Verify;
};
export type Groth16Implementation = {
    fullProveRailgun: Groth16FullProveRailgun;
    fullProvePOI: Groth16FullProvePOI;
    verify: Groth16Verify;
};
export type ProverProgressCallback = (progress: number) => void;
export declare class Prover {
    private artifactGetter;
    groth16: Optional<Groth16Implementation>;
    constructor(artifactGetter: ArtifactGetter);
    /**
     * Used to set Groth16 implementation from snarkjs.min.js or snarkjs.
     */
    setSnarkJSGroth16(snarkJSGroth16: SnarkJSGroth16): void;
    /**
     * Used to set Groth16 implementation from RAILGUN Native Prover.
     */
    setNativeProverGroth16(nativeProveRailgun: NativeProveRailgun, nativeProvePOI: NativeProvePOI, circuits: {
        [name: string]: number;
    }): void;
    verifyRailgunProof(publicInputs: PublicInputsRailgun, proof: Proof, artifacts: Artifact): Promise<boolean>;
    verifyPOIProof(publicInputs: PublicInputsPOI, proof: Proof, maxInputs: number, maxOutputs: number): Promise<boolean>;
    private static get zeroProof();
    dummyProveRailgun(publicInputs: PublicInputsRailgun): Proof;
    proveRailgun(txidVersion: TXIDVersion, unprovedTransactionInputs: UnprovedTransactionInputs, progressCallback: ProverProgressCallback): Promise<{
        proof: Proof;
        publicInputs: PublicInputsRailgun;
    }>;
    getPublicInputsPOI(anyRailgunTxidMerklerootAfterTransaction: string, blindedCommitmentsOut: string[], poiMerkleroots: string[], railgunTxidIfHasUnshield: string, maxInputs: number, maxOutputs: number): PublicInputsPOI;
    private static getMaxInputsOutputsForPOI;
    provePOI(inputs: POIEngineProofInputs, listKey: string, blindedCommitmentsIn: string[], blindedCommitmentsOut: string[], progressCallback: ProverProgressCallback): Promise<{
        proof: Proof;
        publicInputs: PublicInputsPOI;
    }>;
    provePOIForInputsOutputs(inputs: POIEngineProofInputs, listKey: string, blindedCommitmentsIn: string[], blindedCommitmentsOut: string[], maxInputs: number, maxOutputs: number, progressCallback: ProverProgressCallback): Promise<{
        proof: Proof;
        publicInputs: PublicInputsPOI;
    }>;
    static formatProof(proof: Proof): SnarkProof;
    private static formatRailgunInputs;
    private static padWithZerosToMax;
    private static padWithArraysOfZerosToMaxAndLength;
    private static formatPOIInputs;
}
export {};
