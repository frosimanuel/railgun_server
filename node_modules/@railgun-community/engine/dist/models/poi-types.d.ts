import { Proof } from './prover-types';
export declare enum TXOPOIListStatus {
    Valid = "Valid",
    ShieldBlocked = "ShieldBlocked",
    ProofSubmitted = "ProofSubmitted",
    Missing = "Missing"
}
export type POIsPerList = {
    [key: string]: TXOPOIListStatus;
};
export declare enum BlindedCommitmentType {
    Shield = "Shield",
    Transact = "Transact",
    Unshield = "Unshield"
}
export type BlindedCommitmentData = {
    blindedCommitment: string;
    type: BlindedCommitmentType;
};
export type LegacyTransactProofData = {
    txidIndex: string;
    npk: string;
    value: string;
    tokenHash: string;
    blindedCommitment: string;
};
export type PreTransactionPOI = {
    snarkProof: Proof;
    txidMerkleroot: string;
    poiMerkleroots: string[];
    blindedCommitmentsOut: string[];
    railgunTxidIfHasUnshield: string;
};
export type PreTransactionPOIsPerTxidLeafPerList = Record<string, // listKey
Record<string, // txidLeafHash
PreTransactionPOI>>;
export type POIEngineProofInputs = {
    anyRailgunTxidMerklerootAfterTransaction: string;
    poiMerkleroots: string[];
    boundParamsHash: string;
    nullifiers: string[];
    commitmentsOut: string[];
    spendingPublicKey: [bigint, bigint];
    nullifyingKey: bigint;
    token: string;
    randomsIn: string[];
    valuesIn: bigint[];
    utxoPositionsIn: number[];
    utxoTreeIn: number;
    npksOut: bigint[];
    valuesOut: bigint[];
    utxoBatchGlobalStartPositionOut: bigint;
    railgunTxidIfHasUnshield: string;
    railgunTxidMerkleProofIndices: string;
    railgunTxidMerkleProofPathElements: string[];
    poiInMerkleProofIndices: string[];
    poiInMerkleProofPathElements: string[][];
};
export declare enum TXIDVersion {
    V2_PoseidonMerkle = "V2_PoseidonMerkle",
    V3_PoseidonMerkle = "V3_PoseidonMerkle"
}
export declare const ACTIVE_UTXO_MERKLETREE_TXID_VERSIONS: TXIDVersion[];
export declare const ACTIVE_TXID_VERSIONS: TXIDVersion[];
