import { Proof } from '../models/prover-types';
import { Chain } from '../models/engine-types';
import { BlindedCommitmentData, LegacyTransactProofData, POIsPerList, TXIDVersion } from '../models/poi-types';
import { SentCommitment, TXO, WalletBalanceBucket } from '../models/txo-types';
import { POINodeInterface } from './poi-node-interface';
import { UnshieldStoredEvent } from '../models/event-types';
import { Registry } from '../utils/registry';
export type POIList = {
    key: string;
    type: POIListType;
    name: string;
    description: string;
};
export declare enum POIListType {
    Active = "Active",
    Gather = "Gather"
}
export declare class POI {
    private static lists;
    private static nodeInterface;
    static launchBlocks: Registry<number>;
    static init(lists: POIList[], nodeInterface: POINodeInterface): void;
    static getAllListKeys(): string[];
    static getActiveListKeys(): string[];
    static getBalanceBucket(txo: TXO): WalletBalanceBucket;
    private static validatePOIStatusForAllLists;
    private static hasValidPOIsAllLists;
    static hasValidPOIsActiveLists(pois: Optional<POIsPerList>): boolean;
    private static getAllListKeysWithValidInputPOIs;
    private static findListsForNewPOIs;
    private static hasAllKeys;
    static getListKeysCanGenerateSpentPOIs(spentTXOs: TXO[], sentCommitments: SentCommitment[], unshieldEvents: UnshieldStoredEvent[], isLegacyPOIProof: boolean): string[];
    static getListKeysCanSubmitLegacyTransactEvents(TXOs: TXO[]): string[];
    static isLegacyTXO(chain: Chain, txo: TXO): boolean;
    static shouldSubmitLegacyTransactEventsTXOs(chain: Chain, txo: TXO): boolean;
    static shouldRetrieveTXOPOIs(txo: TXO): boolean;
    static shouldRetrieveSentCommitmentPOIs(sentCommitment: SentCommitment): boolean;
    static shouldRetrieveUnshieldEventPOIs(unshieldEvent: UnshieldStoredEvent): boolean;
    static shouldGenerateSpentPOIsSentCommitment(sentCommitment: SentCommitment): boolean;
    static shouldGenerateSpentPOIsUnshieldEvent(unshieldEvent: UnshieldStoredEvent): boolean;
    static isActiveForChain(chain: Chain): boolean;
    static isRequiredForChain(chain: Chain): Promise<boolean>;
    static getSpendableBalanceBuckets(chain: Chain): Promise<WalletBalanceBucket[]>;
    static retrievePOIsForBlindedCommitments(txidVersion: TXIDVersion, chain: Chain, blindedCommitmentDatas: BlindedCommitmentData[]): Promise<{
        [blindedCommitment: string]: POIsPerList;
    }>;
    static getPOIMerkleProofs(txidVersion: TXIDVersion, chain: Chain, listKey: string, blindedCommitmentsIn: string[]): Promise<import("../models").MerkleProof[]>;
    static validatePOIMerkleroots(txidVersion: TXIDVersion, chain: Chain, listKey: string, poiMerkleroots: string[]): Promise<boolean>;
    static submitPOI(txidVersion: TXIDVersion, chain: Chain, listKey: string, snarkProof: Proof, poiMerkleroots: string[], txidMerkleroot: string, txidMerklerootIndex: number, blindedCommitmentsOut: string[], railgunTxidIfHasUnshield: string): Promise<void>;
    static submitLegacyTransactProofs(txidVersion: TXIDVersion, chain: Chain, listKeys: string[], legacyTransactProofDatas: LegacyTransactProofData[]): Promise<void>;
}
