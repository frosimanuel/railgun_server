import { ContractTransaction } from 'ethers';
import { Chain } from '../models/engine-types';
import { PreTransactionPOIsPerTxidLeafPerList, TXIDVersion } from '../models/poi-types';
import { ExtractedRailgunTransactionData } from '../models/transaction-types';
import { Prover } from '../prover/prover';
import { AddressData } from '../key-derivation';
import { TokenDataGetter } from '../token';
export type POIMerklerootsValidator = (txidVersion: TXIDVersion, chain: Chain, listKey: string, poiMerkleroots: string[]) => Promise<boolean>;
export declare class POIValidation {
    static validatePOIMerkleroots: Optional<POIMerklerootsValidator>;
    static initForPOINode(validatePOIMerkleroots: POIMerklerootsValidator): void;
    static isValidSpendableTransaction(txidVersion: TXIDVersion, chain: Chain, prover: Prover, transactionRequest: ContractTransaction, useRelayAdapt: boolean, contractAddress: string, preTransactionPOIs: PreTransactionPOIsPerTxidLeafPerList, receivingViewingPrivateKey: Uint8Array, receivingRailgunAddressData: AddressData, tokenDataGetter: TokenDataGetter): Promise<{
        isValid: boolean;
        error?: string;
        extractedRailgunTransactionData?: ExtractedRailgunTransactionData;
    }>;
    static assertIsValidSpendableTXID(txidVersion: TXIDVersion, listKey: string, chain: Chain, prover: Prover, preTransactionPOIs: PreTransactionPOIsPerTxidLeafPerList, railgunTxids: string[], utxoTreesIn: bigint[]): Promise<boolean>;
}
