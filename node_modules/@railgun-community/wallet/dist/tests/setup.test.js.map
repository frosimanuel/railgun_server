{"version":3,"file":"setup.test.js","sourceRoot":"","sources":["../../src/tests/setup.test.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference types=\"../types/global\" />\n/* eslint-disable import/no-extraneous-dependencies */\n/* eslint-disable no-console */\nimport LevelDOWN from 'leveldown';\nimport fs from 'fs';\nimport {\n  MerkletreeScanStatus,\n  MerkletreeScanUpdateEvent,\n  NETWORK_CONFIG,\n  NetworkName,\n  poll,\n} from '@railgun-community/shared-models';\nimport {\n  MOCK_BALANCES_UPDATE_CALLBACK,\n  MOCK_FALLBACK_PROVIDER_JSON_CONFIG_SEPOLIA,\n  MOCK_POI_PROOF_PROGRESS_CALLBACK_CALLBACK,\n  TEST_WALLET_SOURCE,\n} from './mocks.test';\nimport { ArtifactStore } from '../services/artifacts/artifact-store';\nimport {\n  setOnBalanceUpdateCallback,\n  setOnWalletPOIProofProgressCallback,\n} from '../services/railgun/wallets/balance-update';\nimport { WalletPOI } from '../services/poi/wallet-poi';\nimport { TestWalletPOIRequester } from './poi/test-wallet-poi-requester.test';\nimport { TestWalletPOINodeInterface } from './poi/test-wallet-poi-node-interface.test';\nimport {\n  GetLatestValidatedRailgunTxid,\n  MerklerootValidator,\n  SnarkJSGroth16,\n  TXOPOIListStatus,\n} from '@railgun-community/engine';\nimport {\n  getEngine,\n  loadProvider,\n  setOnTXIDMerkletreeScanCallback,\n  setOnUTXOMerkletreeScanCallback,\n  startRailgunEngine,\n  stopRailgunEngine,\n} from '../services/railgun/core';\nimport { groth16 } from 'snarkjs';\nimport { setLoggers } from '../utils';\n\nconst ENGINE_TEST_DB = 'test.db';\nconst db = new LevelDOWN(ENGINE_TEST_DB);\n\nconst setupTests = () => {\n  // Uncomment to enable logger during tests (Do not commit).\n  // setLoggers(console.log, console.error);\n};\n\nconst rmDirSafe = async (dir: string) => {\n  if (await fileExists(dir)) {\n    await fs.promises.rm(dir, { recursive: true });\n  }\n};\n\nbefore(async () => {\n  await rmDirSafe(ENGINE_TEST_DB);\n  await rmDirSafe('artifacts-v2.1');\n  setupTests();\n});\n\nbeforeEach(() => {\n  TestWalletPOINodeInterface.overridePOIsListStatus = TXOPOIListStatus.Missing;\n});\n\nconst fileExists = (path: string): Promise<boolean> => {\n  return new Promise(resolve => {\n    fs.promises\n      .access(path)\n      .then(() => resolve(true))\n      .catch(() => resolve(false));\n  });\n};\n\nconst testArtifactStore = new ArtifactStore(\n  fs.promises.readFile,\n  async (dir, path, data) => {\n    await fs.promises.mkdir(dir, { recursive: true });\n    await fs.promises.writeFile(path, data);\n  },\n  fileExists,\n);\n\nlet currentUTXOMerkletreeScanStatus: Optional<MerkletreeScanStatus>;\nlet currentTXIDMerkletreeScanStatus: Optional<MerkletreeScanStatus>;\n\nexport const utxoMerkletreeHistoryScanCallback = (\n  scanData: MerkletreeScanUpdateEvent,\n): void => {\n  currentUTXOMerkletreeScanStatus = scanData.scanStatus;\n};\n\nexport const txidMerkletreeHistoryScanCallback = (\n  scanData: MerkletreeScanUpdateEvent,\n): void => {\n  currentTXIDMerkletreeScanStatus = scanData.scanStatus;\n};\n\nexport const clearAllMerkletreeScanStatus = () => {\n  currentUTXOMerkletreeScanStatus = undefined;\n  currentTXIDMerkletreeScanStatus = undefined;\n};\n\nexport const initTestEngine = async (useNativeArtifacts = false) => {\n  // SETUP TEST WALLET POI REQUESTER\n  const testPOIRequester = new TestWalletPOIRequester();\n  const txidMerklerootValidator: MerklerootValidator = (\n    txidVersion,\n    chain,\n    tree,\n    index,\n    merkleroot,\n  ) =>\n    testPOIRequester.validateRailgunTxidMerkleroot(\n      txidVersion,\n      chain,\n      tree,\n      index,\n      merkleroot,\n    );\n  WalletPOI.getPOITxidMerklerootValidator = () => txidMerklerootValidator;\n  const getLatestValidatedRailgunTxid: GetLatestValidatedRailgunTxid = (\n    txidVersion,\n    chain,\n  ) => testPOIRequester.getLatestValidatedRailgunTxid(txidVersion, chain);\n  WalletPOI.getPOILatestValidatedRailgunTxid = () =>\n    getLatestValidatedRailgunTxid;\n\n  // Set the environment variable \"VERBOSE\" to enable debug logs\n  const shouldDebug = typeof process.env.VERBOSE !== 'undefined';\n\n  if (shouldDebug) {\n    setLoggers(console.log, console.error);\n  }\n\n  await startRailgunEngine(\n    TEST_WALLET_SOURCE,\n    db,\n    shouldDebug,\n    testArtifactStore,\n    useNativeArtifacts,\n    false, // skipMerkletreeScans\n    undefined, // poiNodeURL\n    undefined, // customPOILists[]\n    false // verboseLogging\n  );\n\n  const testPOINodeInterface = new TestWalletPOINodeInterface();\n  WalletPOI.init(testPOINodeInterface, []);\n\n  getEngine().prover.setSnarkJSGroth16(groth16 as SnarkJSGroth16);\n\n  setOnBalanceUpdateCallback(MOCK_BALANCES_UPDATE_CALLBACK);\n  setOnWalletPOIProofProgressCallback(\n    MOCK_POI_PROOF_PROGRESS_CALLBACK_CALLBACK,\n  );\n\n  setOnUTXOMerkletreeScanCallback(utxoMerkletreeHistoryScanCallback);\n  setOnTXIDMerkletreeScanCallback(txidMerkletreeHistoryScanCallback);\n};\n\nexport const initTestEngineNetworks = async (\n  networkName = NetworkName.EthereumSepolia,\n  mockConfig = MOCK_FALLBACK_PROVIDER_JSON_CONFIG_SEPOLIA,\n) => {\n  // Don't wait for async. It will try to load historical events, which takes a while.\n  await loadProvider(\n    mockConfig,\n    networkName,\n    10_000, // pollingInterval\n  );\n  const { chain } = NETWORK_CONFIG[networkName];\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  getEngine().scanContractHistory(\n    chain,\n    undefined, // walletIdFilter\n  );\n};\n\nexport const closeTestEngine = async () => {\n  await stopRailgunEngine();\n\n  clearAllMerkletreeScanStatus();\n};\n\nexport const pollUntilUTXOMerkletreeScanned = async () => {\n  const status = await poll(\n    async () => currentUTXOMerkletreeScanStatus,\n    status => status === MerkletreeScanStatus.Complete,\n    50,\n    360_000 / 50, // 360 sec.\n  );\n  if (status !== MerkletreeScanStatus.Complete) {\n    throw new Error(`UTXO merkletree scan should be completed - timed out`);\n  }\n};\n\nexport const pollUntilTXIDMerkletreeScanned = async () => {\n  const status = await poll(\n    async () => currentTXIDMerkletreeScanStatus,\n    status => status === MerkletreeScanStatus.Complete,\n    50,\n    360_000 / 50, // 360 sec.\n  );\n  if (status !== MerkletreeScanStatus.Complete) {\n    throw new Error(`TXID merkletree scan should be completed - timed out`);\n  }\n};\n"]}