"use strict";
/* eslint-disable @typescript-eslint/no-unused-vars */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestWalletPOINodeInterface = exports.MOCK_LIST_KEY = void 0;
const engine_1 = require("@railgun-community/engine");
const shared_models_1 = require("@railgun-community/shared-models");
exports.MOCK_LIST_KEY = 'test_list';
class TestWalletPOINodeInterface extends engine_1.POINodeInterface {
    static overridePOIsListStatus = engine_1.TXOPOIListStatus.Missing;
    static getPOISettings(chain) {
        const network = (0, shared_models_1.networkForChain)(chain);
        if (!network) {
            throw new Error(`No network found`);
        }
        const networkPOISettings = network.poi;
        if (!networkPOISettings) {
            throw new Error(`No POI settings found`);
        }
        return networkPOISettings;
    }
    // eslint-disable-next-line class-methods-use-this
    isActive(chain) {
        return TestWalletPOINodeInterface.getPOISettings(chain) != null;
    }
    // eslint-disable-next-line class-methods-use-this
    async isRequired(chain) {
        return true;
    }
    // eslint-disable-next-line class-methods-use-this
    async getPOIsPerList(txidVersion, _chain, listKeys, blindedCommitmentDatas) {
        const allMissing = {};
        blindedCommitmentDatas.forEach(blindedCommitmentData => {
            allMissing[blindedCommitmentData.blindedCommitment] ??= {};
            listKeys.forEach(listKey => {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                allMissing[blindedCommitmentData.blindedCommitment][listKey] =
                    TestWalletPOINodeInterface.overridePOIsListStatus;
            });
        });
        return allMissing;
    }
    // eslint-disable-next-line class-methods-use-this
    async getPOIMerkleProofs(txidVersion, chain, listKey, blindedCommitments) {
        throw new Error('Could not get merkle proofs - no POI node');
    }
    // eslint-disable-next-line class-methods-use-this
    async validatePOIMerkleroots(txidVersion, chain, listKey, poiMerkleroots) {
        throw new Error('Could not validate POI merkleroots - no POI node');
    }
    // eslint-disable-next-line class-methods-use-this
    async submitPOI(txidVersion, chain, listKey, snarkProof, poiMerkleroots, txidMerkleroot, txidMerklerootIndex, blindedCommitmentsOut, railgunTxidIfHasUnshield) {
        throw new Error('Could not submit POI - no POI node');
    }
    // eslint-disable-next-line class-methods-use-this
    async submitLegacyTransactProofs(txidVersion, chain, listKeys, legacyTransactProofDatas) {
        return Promise.resolve();
    }
}
exports.TestWalletPOINodeInterface = TestWalletPOINodeInterface;
//# sourceMappingURL=test-wallet-poi-node-interface.test.js.map