"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pollUntilTXIDMerkletreeScanned = exports.pollUntilUTXOMerkletreeScanned = exports.closeTestEngine = exports.initTestEngineNetworks = exports.initTestEngine = exports.clearAllMerkletreeScanStatus = exports.txidMerkletreeHistoryScanCallback = exports.utxoMerkletreeHistoryScanCallback = void 0;
/// <reference types="../types/global" />
/* eslint-disable import/no-extraneous-dependencies */
/* eslint-disable no-console */
const leveldown_1 = __importDefault(require("leveldown"));
const fs_1 = __importDefault(require("fs"));
const shared_models_1 = require("@railgun-community/shared-models");
const mocks_test_1 = require("./mocks.test");
const artifact_store_1 = require("../services/artifacts/artifact-store");
const balance_update_1 = require("../services/railgun/wallets/balance-update");
const wallet_poi_1 = require("../services/poi/wallet-poi");
const test_wallet_poi_requester_test_1 = require("./poi/test-wallet-poi-requester.test");
const test_wallet_poi_node_interface_test_1 = require("./poi/test-wallet-poi-node-interface.test");
const engine_1 = require("@railgun-community/engine");
const core_1 = require("../services/railgun/core");
const snarkjs_1 = require("snarkjs");
const utils_1 = require("../utils");
const ENGINE_TEST_DB = 'test.db';
const db = new leveldown_1.default(ENGINE_TEST_DB);
const setupTests = () => {
    // Uncomment to enable logger during tests (Do not commit).
    // setLoggers(console.log, console.error);
};
const rmDirSafe = async (dir) => {
    if (await fileExists(dir)) {
        await fs_1.default.promises.rm(dir, { recursive: true });
    }
};
before(async () => {
    await rmDirSafe(ENGINE_TEST_DB);
    await rmDirSafe('artifacts-v2.1');
    setupTests();
});
beforeEach(() => {
    test_wallet_poi_node_interface_test_1.TestWalletPOINodeInterface.overridePOIsListStatus = engine_1.TXOPOIListStatus.Missing;
});
const fileExists = (path) => {
    return new Promise(resolve => {
        fs_1.default.promises
            .access(path)
            .then(() => resolve(true))
            .catch(() => resolve(false));
    });
};
const testArtifactStore = new artifact_store_1.ArtifactStore(fs_1.default.promises.readFile, async (dir, path, data) => {
    await fs_1.default.promises.mkdir(dir, { recursive: true });
    await fs_1.default.promises.writeFile(path, data);
}, fileExists);
let currentUTXOMerkletreeScanStatus;
let currentTXIDMerkletreeScanStatus;
const utxoMerkletreeHistoryScanCallback = (scanData) => {
    currentUTXOMerkletreeScanStatus = scanData.scanStatus;
};
exports.utxoMerkletreeHistoryScanCallback = utxoMerkletreeHistoryScanCallback;
const txidMerkletreeHistoryScanCallback = (scanData) => {
    currentTXIDMerkletreeScanStatus = scanData.scanStatus;
};
exports.txidMerkletreeHistoryScanCallback = txidMerkletreeHistoryScanCallback;
const clearAllMerkletreeScanStatus = () => {
    currentUTXOMerkletreeScanStatus = undefined;
    currentTXIDMerkletreeScanStatus = undefined;
};
exports.clearAllMerkletreeScanStatus = clearAllMerkletreeScanStatus;
const initTestEngine = async (useNativeArtifacts = false) => {
    // SETUP TEST WALLET POI REQUESTER
    const testPOIRequester = new test_wallet_poi_requester_test_1.TestWalletPOIRequester();
    const txidMerklerootValidator = (txidVersion, chain, tree, index, merkleroot) => testPOIRequester.validateRailgunTxidMerkleroot(txidVersion, chain, tree, index, merkleroot);
    wallet_poi_1.WalletPOI.getPOITxidMerklerootValidator = () => txidMerklerootValidator;
    const getLatestValidatedRailgunTxid = (txidVersion, chain) => testPOIRequester.getLatestValidatedRailgunTxid(txidVersion, chain);
    wallet_poi_1.WalletPOI.getPOILatestValidatedRailgunTxid = () => getLatestValidatedRailgunTxid;
    // Set the environment variable "VERBOSE" to enable debug logs
    const shouldDebug = typeof process.env.VERBOSE !== 'undefined';
    if (shouldDebug) {
        (0, utils_1.setLoggers)(console.log, console.error);
    }
    await (0, core_1.startRailgunEngine)(mocks_test_1.TEST_WALLET_SOURCE, db, shouldDebug, testArtifactStore, useNativeArtifacts, false, // skipMerkletreeScans
    undefined, // poiNodeURL
    undefined, // customPOILists[]
    false // verboseLogging
    );
    const testPOINodeInterface = new test_wallet_poi_node_interface_test_1.TestWalletPOINodeInterface();
    wallet_poi_1.WalletPOI.init(testPOINodeInterface, []);
    (0, core_1.getEngine)().prover.setSnarkJSGroth16(snarkjs_1.groth16);
    (0, balance_update_1.setOnBalanceUpdateCallback)(mocks_test_1.MOCK_BALANCES_UPDATE_CALLBACK);
    (0, balance_update_1.setOnWalletPOIProofProgressCallback)(mocks_test_1.MOCK_POI_PROOF_PROGRESS_CALLBACK_CALLBACK);
    (0, core_1.setOnUTXOMerkletreeScanCallback)(exports.utxoMerkletreeHistoryScanCallback);
    (0, core_1.setOnTXIDMerkletreeScanCallback)(exports.txidMerkletreeHistoryScanCallback);
};
exports.initTestEngine = initTestEngine;
const initTestEngineNetworks = async (networkName = shared_models_1.NetworkName.EthereumSepolia, mockConfig = mocks_test_1.MOCK_FALLBACK_PROVIDER_JSON_CONFIG_SEPOLIA) => {
    // Don't wait for async. It will try to load historical events, which takes a while.
    await (0, core_1.loadProvider)(mockConfig, networkName, 10000);
    const { chain } = shared_models_1.NETWORK_CONFIG[networkName];
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    (0, core_1.getEngine)().scanContractHistory(chain, undefined);
};
exports.initTestEngineNetworks = initTestEngineNetworks;
const closeTestEngine = async () => {
    await (0, core_1.stopRailgunEngine)();
    (0, exports.clearAllMerkletreeScanStatus)();
};
exports.closeTestEngine = closeTestEngine;
const pollUntilUTXOMerkletreeScanned = async () => {
    const status = await (0, shared_models_1.poll)(async () => currentUTXOMerkletreeScanStatus, status => status === shared_models_1.MerkletreeScanStatus.Complete, 50, 360000 / 50);
    if (status !== shared_models_1.MerkletreeScanStatus.Complete) {
        throw new Error(`UTXO merkletree scan should be completed - timed out`);
    }
};
exports.pollUntilUTXOMerkletreeScanned = pollUntilUTXOMerkletreeScanned;
const pollUntilTXIDMerkletreeScanned = async () => {
    const status = await (0, shared_models_1.poll)(async () => currentTXIDMerkletreeScanStatus, status => status === shared_models_1.MerkletreeScanStatus.Complete, 50, 360000 / 50);
    if (status !== shared_models_1.MerkletreeScanStatus.Complete) {
        throw new Error(`TXID merkletree scan should be completed - timed out`);
    }
};
exports.pollUntilTXIDMerkletreeScanned = pollUntilTXIDMerkletreeScanned;
//# sourceMappingURL=setup.test.js.map