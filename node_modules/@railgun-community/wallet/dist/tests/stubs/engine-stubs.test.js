"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.restoreEngineStubs = exports.createEngineVerifyProofStub = exports.createEngineWalletTreeBalancesStub = exports.createEngineWalletBalancesStub = exports.MOCK_TOKEN_BALANCE = exports.MOCK_SHIELD_TXID_FOR_BALANCES = void 0;
const engine_1 = require("@railgun-community/engine");
// eslint-disable-next-line import/no-extraneous-dependencies
const sinon_1 = __importDefault(require("sinon"));
let balancesStub;
let treeBalancesStub;
let verifyProofStub;
exports.MOCK_SHIELD_TXID_FOR_BALANCES = '123';
exports.MOCK_TOKEN_BALANCE = BigInt('1000000000000000000000');
const ZERO_32_BYTE_VALUE = '0x0000000000000000000000000000000000000000000000000000000000000000';
const getMockBalanceData = async (addressData, tokenAddress, tree) => {
    const tokenData = (0, engine_1.getTokenDataERC20)(tokenAddress);
    return {
        balance: exports.MOCK_TOKEN_BALANCE,
        tokenData,
        utxos: [
            {
                tree,
                position: 0,
                blockNumber: 100,
                txid: exports.MOCK_SHIELD_TXID_FOR_BALANCES,
                timestamp: undefined,
                spendtxid: false,
                note: engine_1.TransactNote.createTransfer(addressData, // receiver
                addressData, // sender
                // '12345678901234561234567890123456', // random
                BigInt('1000000000000000000000'), // value
                tokenData, // tokenData
                false, // shouldShowSender
                engine_1.OutputType.Transfer, undefined),
                commitmentType: engine_1.CommitmentType.ShieldCommitment,
                nullifier: ZERO_32_BYTE_VALUE,
                poisPerList: undefined,
                blindedCommitment: undefined,
                transactCreationRailgunTxid: undefined,
            },
        ],
    };
};
const createEngineWalletBalancesStub = async (addressData, tokenAddress, tree) => {
    balancesStub = sinon_1.default
        .stub(engine_1.AbstractWallet, 'getTokenBalancesByTxidVersion')
        .resolves({
        [tokenAddress]: await getMockBalanceData(addressData, tokenAddress, tree),
    });
};
exports.createEngineWalletBalancesStub = createEngineWalletBalancesStub;
const createEngineWalletTreeBalancesStub = async (addressData, tokenAddress, tree) => {
    const formattedTokenAddress = engine_1.ByteUtils.formatToByteLength(tokenAddress.replace('0x', ''), engine_1.ByteLength.UINT_256);
    treeBalancesStub = sinon_1.default
        .stub(engine_1.RailgunWallet.prototype, 'getTotalBalancesByTreeNumber')
        .resolves({
        [formattedTokenAddress]: [
            await getMockBalanceData(addressData, tokenAddress, tree),
        ],
    });
};
exports.createEngineWalletTreeBalancesStub = createEngineWalletTreeBalancesStub;
const createEngineVerifyProofStub = () => {
    verifyProofStub = sinon_1.default
        .stub(engine_1.Prover.prototype, 'verifyRailgunProof')
        .resolves(true);
};
exports.createEngineVerifyProofStub = createEngineVerifyProofStub;
const restoreEngineStubs = () => {
    balancesStub?.restore();
    treeBalancesStub?.restore();
    verifyProofStub?.restore();
};
exports.restoreEngineStubs = restoreEngineStubs;
//# sourceMappingURL=engine-stubs.test.js.map