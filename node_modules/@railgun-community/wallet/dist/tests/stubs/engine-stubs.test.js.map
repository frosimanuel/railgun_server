{"version":3,"file":"engine-stubs.test.js","sourceRoot":"","sources":["../../../src/tests/stubs/engine-stubs.test.ts"],"names":[],"mappings":";;;;;;AAAA,sDAYmC;AACnC,6DAA6D;AAC7D,kDAAyC;AAEzC,IAAI,YAAuB,CAAC;AAC5B,IAAI,gBAA2B,CAAC;AAChC,IAAI,eAA0B,CAAC;AAElB,QAAA,6BAA6B,GAAG,KAAK,CAAC;AACtC,QAAA,kBAAkB,GAAG,MAAM,CAAC,wBAAwB,CAAC,CAAC;AACnE,MAAM,kBAAkB,GACtB,oEAAoE,CAAC;AAEvE,MAAM,kBAAkB,GAAG,KAAK,EAC9B,WAAwB,EACxB,YAAoB,EACpB,IAAY,EACU,EAAE;IACxB,MAAM,SAAS,GAAG,IAAA,0BAAiB,EAAC,YAAY,CAAC,CAAC;IAElD,OAAO;QACL,OAAO,EAAE,0BAAkB;QAC3B,SAAS;QACT,KAAK,EAAE;YACL;gBACE,IAAI;gBACJ,QAAQ,EAAE,CAAC;gBACX,WAAW,EAAE,GAAG;gBAChB,IAAI,EAAE,qCAA6B;gBACnC,SAAS,EAAE,SAAS;gBACpB,SAAS,EAAE,KAAK;gBAChB,IAAI,EAAE,qBAAY,CAAC,cAAc,CAC/B,WAAW,EAAE,WAAW;gBACxB,WAAW,EAAE,SAAS;gBACtB,gDAAgD;gBAChD,MAAM,CAAC,wBAAwB,CAAC,EAAE,QAAQ;gBAC1C,SAAS,EAAE,YAAY;gBACvB,KAAK,EAAE,mBAAmB;gBAC1B,mBAAU,CAAC,QAAQ,EACnB,SAAS,CACV;gBACD,cAAc,EAAE,uBAAc,CAAC,gBAAgB;gBAC/C,SAAS,EAAE,kBAAkB;gBAC7B,WAAW,EAAE,SAAS;gBACtB,iBAAiB,EAAE,SAAS;gBAC5B,2BAA2B,EAAE,SAAS;aACvC;SACF;KACF,CAAC;AACJ,CAAC,CAAC;AAEK,MAAM,8BAA8B,GAAG,KAAK,EACjD,WAAwB,EACxB,YAAoB,EACpB,IAAY,EACZ,EAAE;IACF,YAAY,GAAG,eAAK;SACjB,IAAI,CAAC,uBAAc,EAAE,+BAA+B,CAAC;SACrD,QAAQ,CAAC;QACR,CAAC,YAAY,CAAC,EAAE,MAAM,kBAAkB,CAAC,WAAW,EAAE,YAAY,EAAE,IAAI,CAAC;KAC1E,CAAC,CAAC;AACP,CAAC,CAAC;AAVW,QAAA,8BAA8B,kCAUzC;AAEK,MAAM,kCAAkC,GAAG,KAAK,EACrD,WAAwB,EACxB,YAAoB,EACpB,IAAY,EACZ,EAAE;IACF,MAAM,qBAAqB,GAAG,kBAAS,CAAC,kBAAkB,CACxD,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAC9B,mBAAU,CAAC,QAAQ,CACpB,CAAC;IACF,gBAAgB,GAAG,eAAK;SACrB,IAAI,CAAC,sBAAa,CAAC,SAAS,EAAE,8BAA8B,CAAC;SAC7D,QAAQ,CAAC;QACR,CAAC,qBAAqB,CAAC,EAAE;YACvB,MAAM,kBAAkB,CAAC,WAAW,EAAE,YAAY,EAAE,IAAI,CAAC;SAC1D;KACF,CAAC,CAAC;AACP,CAAC,CAAC;AAhBW,QAAA,kCAAkC,sCAgB7C;AAEK,MAAM,2BAA2B,GAAG,GAAG,EAAE;IAC9C,eAAe,GAAG,eAAK;SACpB,IAAI,CAAC,eAAM,CAAC,SAAS,EAAE,oBAAoB,CAAC;SAC5C,QAAQ,CAAC,IAAI,CAAC,CAAC;AACpB,CAAC,CAAC;AAJW,QAAA,2BAA2B,+BAItC;AAEK,MAAM,kBAAkB,GAAG,GAAG,EAAE;IACrC,YAAY,EAAE,OAAO,EAAE,CAAC;IACxB,gBAAgB,EAAE,OAAO,EAAE,CAAC;IAC5B,eAAe,EAAE,OAAO,EAAE,CAAC;AAC7B,CAAC,CAAC;AAJW,QAAA,kBAAkB,sBAI7B","sourcesContent":["import {\n  OutputType,\n  TransactNote,\n  Prover,\n  AbstractWallet,\n  RailgunWallet,\n  ByteLength,\n  getTokenDataERC20,\n  TreeBalance,\n  AddressData,\n  CommitmentType,\n  ByteUtils,\n} from '@railgun-community/engine';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport sinon, { SinonStub } from 'sinon';\n\nlet balancesStub: SinonStub;\nlet treeBalancesStub: SinonStub;\nlet verifyProofStub: SinonStub;\n\nexport const MOCK_SHIELD_TXID_FOR_BALANCES = '123';\nexport const MOCK_TOKEN_BALANCE = BigInt('1000000000000000000000');\nconst ZERO_32_BYTE_VALUE =\n  '0x0000000000000000000000000000000000000000000000000000000000000000';\n\nconst getMockBalanceData = async (\n  addressData: AddressData,\n  tokenAddress: string,\n  tree: number,\n): Promise<TreeBalance> => {\n  const tokenData = getTokenDataERC20(tokenAddress);\n\n  return {\n    balance: MOCK_TOKEN_BALANCE,\n    tokenData,\n    utxos: [\n      {\n        tree,\n        position: 0,\n        blockNumber: 100,\n        txid: MOCK_SHIELD_TXID_FOR_BALANCES,\n        timestamp: undefined,\n        spendtxid: false,\n        note: TransactNote.createTransfer(\n          addressData, // receiver\n          addressData, // sender\n          // '12345678901234561234567890123456', // random\n          BigInt('1000000000000000000000'), // value\n          tokenData, // tokenData\n          false, // shouldShowSender\n          OutputType.Transfer,\n          undefined, // memoText\n        ),\n        commitmentType: CommitmentType.ShieldCommitment,\n        nullifier: ZERO_32_BYTE_VALUE,\n        poisPerList: undefined,\n        blindedCommitment: undefined,\n        transactCreationRailgunTxid: undefined,\n      },\n    ],\n  };\n};\n\nexport const createEngineWalletBalancesStub = async (\n  addressData: AddressData,\n  tokenAddress: string,\n  tree: number,\n) => {\n  balancesStub = sinon\n    .stub(AbstractWallet, 'getTokenBalancesByTxidVersion')\n    .resolves({\n      [tokenAddress]: await getMockBalanceData(addressData, tokenAddress, tree),\n    });\n};\n\nexport const createEngineWalletTreeBalancesStub = async (\n  addressData: AddressData,\n  tokenAddress: string,\n  tree: number,\n) => {\n  const formattedTokenAddress = ByteUtils.formatToByteLength(\n    tokenAddress.replace('0x', ''),\n    ByteLength.UINT_256,\n  );\n  treeBalancesStub = sinon\n    .stub(RailgunWallet.prototype, 'getTotalBalancesByTreeNumber')\n    .resolves({\n      [formattedTokenAddress]: [\n        await getMockBalanceData(addressData, tokenAddress, tree),\n      ],\n    });\n};\n\nexport const createEngineVerifyProofStub = () => {\n  verifyProofStub = sinon\n    .stub(Prover.prototype, 'verifyRailgunProof')\n    .resolves(true);\n};\n\nexport const restoreEngineStubs = () => {\n  balancesStub?.restore();\n  treeBalancesStub?.restore();\n  verifyProofStub?.restore();\n};\n"]}