{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":";;;AACA,qCAA4C;AAErC,MAAM,mBAAmB,GAAG,CACjC,CAAqB,EACrB,CAAqB,EACZ,EAAE;IACX,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;IACD,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;QACrC,OAAO,KAAK,CAAC;KACd;IACD,KAAK,MAAM,EAAE,IAAI,CAAC,EAAE;QAClB,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;YACnB,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAhBW,QAAA,mBAAmB,uBAgB9B;AAEK,MAAM,gCAAgC,GAAG,CAC9C,CAAkC,EAClC,CAAkC,EACzB,EAAE;IACX,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;IACD,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;QACrC,OAAO,KAAK,CAAC;KACd;IACD,IAAI;QACF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACpC,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBACnC,sEAAsE;gBACtE,IAAK,CAAC,CAAC,CAAC,CAAS,CAAC,GAAG,CAAC,KAAM,CAAC,CAAC,CAAC,CAAS,CAAC,GAAG,CAAC,EAAE;oBAC7C,OAAO,KAAK,CAAC;iBACd;aACF;SACF;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,IAAI,CAAC,CAAC,GAAG,YAAY,KAAK,CAAC,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,sDAAsD,EAAE;gBACtE,KAAK,EAAE,GAAG;aACX,CAAC,CAAC;SACJ;QACD,IAAA,yBAAgB,EACd,kDAAkD,GAAG,CAAC,OAAO,EAAE,CAChE,CAAC;QACF,OAAO,KAAK,CAAC;KACd;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAhCW,QAAA,gCAAgC,oCAgC3C;AAEK,MAAM,YAAY,GAAG,CAAC,GAAW,EAAW,EAAE;IACnD,MAAM,cAAc,GAAG,4BAA4B,CAAC;IACpD,OAAO,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAClC,CAAC,CAAA;AAHY,QAAA,YAAY,gBAGxB","sourcesContent":["import { ContractTransaction } from 'ethers';\nimport { sendErrorMessage } from './logger';\n\nexport const compareStringArrays = (\n  a: Optional<string[]>,\n  b: Optional<string[]>,\n): boolean => {\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b || a.length !== b.length) {\n    return false;\n  }\n  for (const el of a) {\n    if (!b.includes(el)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const compareContractTransactionArrays = (\n  a: Optional<ContractTransaction[]>,\n  b: Optional<ContractTransaction[]>,\n): boolean => {\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b || a.length !== b.length) {\n    return false;\n  }\n  try {\n    for (let i = 0; i < a.length; i += 1) {\n      for (const key of Object.keys(a[i])) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if ((a[i] as any)[key] !== (b[i] as any)[key]) {\n          return false;\n        }\n      }\n    }\n  } catch (err) {\n    if (!(err instanceof Error)) {\n      throw new Error('Non-error thrown in compareContractTransactionArrays', {\n        cause: err,\n      });\n    }\n    sendErrorMessage(\n      `Could not compare contract transaction arrays: ${err.message}`,\n    );\n    return false;\n  }\n\n  return true;\n};\n\nexport const isDecimalStr = (str: string): boolean => {\n  const decimalPattern = /^[-+]?(\\d+(\\.\\d*)?|\\.\\d+)$/;\n  return decimalPattern.test(str);\n}\n"]}