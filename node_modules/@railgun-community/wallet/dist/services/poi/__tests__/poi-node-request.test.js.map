{"version":3,"file":"poi-node-request.test.js","sourceRoot":"","sources":["../../../../src/services/poi/__tests__/poi-node-request.test.ts"],"names":[],"mappings":";;;;;AAAA,gDAAwB;AACxB,wEAA8C;AAC9C,kDAAyC;AACzC,0DAAqD;AACrD,oEAI0C;AAE1C,cAAI,CAAC,GAAG,CAAC,0BAAc,CAAC,CAAC;AACzB,MAAM,EAAE,MAAM,EAAE,GAAG,cAAI,CAAC;AAExB,IAAI,eAAsD,CAAC;AAE3D,MAAM,EAAE,KAAK,EAAE,GAAG,8BAAc,CAAC,2BAAW,CAAC,OAAO,CAAC,CAAC;AAEtD,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,MAAM,CAAC,GAAG,EAAE;QACV,eAAe,GAAG,eAAK,CAAC,IAAI,CAC1B,iCAAc,EACd,gBAAuB,CACxB,CAAC,SAAS,CAAC,KAAK,EAAE,GAAQ,EAAE,EAAE;YAC7B,IAAK,GAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACnC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;aACxB;iBAAM;gBACL,OAAO,IAAI,CAAC;aACb;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,SAAS,CAAC,GAAG,EAAE;QACb,eAAe,CAAC,YAAY,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IACH,KAAK,CAAC,GAAG,EAAE;QACT,eAAe,CAAC,OAAO,EAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,WAAW,GAAG,IAAI,iCAAc,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QAEvD,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,6BAA6B,CAC7D,2BAAW,CAAC,iBAAiB,EAC7B,KAAK,EACL,CAAC,EACD,CAAC,EACD,YAAY,CACb,CAAC;QAEF,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QAC3B,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC,OAAO,CAAC,KAAM,CAAC,CAAC;IAEnB,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,WAAW,GAAG,IAAI,iCAAc,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QAEvD,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,IAAI;YACF,MAAM,WAAW,CAAC,6BAA6B,CAC7C,2BAAW,CAAC,iBAAiB,EAC7B,KAAK,EACL,CAAC,EACD,CAAC,EACD,YAAY,CACb,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,SAAS,GAAG,IAAI,CAAC;SAClB;QAED,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QAC7B,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC,OAAO,CAAC,KAAM,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC","sourcesContent":["import chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport Sinon, { SinonStub } from 'sinon';\nimport { POINodeRequest } from '../poi-node-request';\nimport {\n  NETWORK_CONFIG,\n  NetworkName,\n  TXIDVersion,\n} from '@railgun-community/shared-models';\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\nlet postRequestStub: SinonStub<string[], Promise<boolean>>;\n\nconst { chain } = NETWORK_CONFIG[NetworkName.Polygon];\n\ndescribe('poi-node-request', () => {\n  before(() => {\n    postRequestStub = Sinon.stub(\n      POINodeRequest,\n      'jsonRpcRequest' as any,\n    ).callsFake(async (url: any) => {\n      if ((url as string).includes('400')) {\n        throw new Error('400');\n      } else {\n        return true;\n      }\n    });\n  });\n  afterEach(() => {\n    postRequestStub.resetHistory();\n  });\n  after(() => {\n    postRequestStub.restore();\n  });\n\n  it('Should fall back to next nodeUrl on failure', async () => {\n    const nodeRequest = new POINodeRequest(['400', '200']);\n\n    const isValid = await nodeRequest.validateRailgunTxidMerkleroot(\n      TXIDVersion.V2_PoseidonMerkle,\n      chain,\n      0,\n      0,\n      'merkleroot',\n    );\n\n    expect(isValid).to.be.true;\n    expect(postRequestStub.callCount).to.be.equal(2);\n  }).timeout(20_000);\n\n  it('Should return error if all nodeUrls fail', async () => {\n    const nodeRequest = new POINodeRequest(['400', '400']);\n\n    let rejection = false;\n    try {\n      await nodeRequest.validateRailgunTxidMerkleroot(\n        TXIDVersion.V2_PoseidonMerkle,\n        chain,\n        0,\n        0,\n        'merkleroot',\n      );\n    } catch (error) {\n      rejection = true;\n    }\n\n    expect(rejection).to.be.true;\n    expect(postRequestStub.callCount).to.be.equal(3);\n  }).timeout(20_000);\n});\n"]}