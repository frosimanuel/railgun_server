"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = __importDefault(require("chai"));
const chai_as_promised_1 = __importDefault(require("chai-as-promised"));
const sinon_1 = __importDefault(require("sinon"));
const poi_node_request_1 = require("../poi-node-request");
const shared_models_1 = require("@railgun-community/shared-models");
chai_1.default.use(chai_as_promised_1.default);
const { expect } = chai_1.default;
let postRequestStub;
const { chain } = shared_models_1.NETWORK_CONFIG[shared_models_1.NetworkName.Polygon];
describe('poi-node-request', () => {
    before(() => {
        postRequestStub = sinon_1.default.stub(poi_node_request_1.POINodeRequest, 'jsonRpcRequest').callsFake(async (url) => {
            if (url.includes('400')) {
                throw new Error('400');
            }
            else {
                return true;
            }
        });
    });
    afterEach(() => {
        postRequestStub.resetHistory();
    });
    after(() => {
        postRequestStub.restore();
    });
    it('Should fall back to next nodeUrl on failure', async () => {
        const nodeRequest = new poi_node_request_1.POINodeRequest(['400', '200']);
        const isValid = await nodeRequest.validateRailgunTxidMerkleroot(shared_models_1.TXIDVersion.V2_PoseidonMerkle, chain, 0, 0, 'merkleroot');
        expect(isValid).to.be.true;
        expect(postRequestStub.callCount).to.be.equal(2);
    }).timeout(20000);
    it('Should return error if all nodeUrls fail', async () => {
        const nodeRequest = new poi_node_request_1.POINodeRequest(['400', '400']);
        let rejection = false;
        try {
            await nodeRequest.validateRailgunTxidMerkleroot(shared_models_1.TXIDVersion.V2_PoseidonMerkle, chain, 0, 0, 'merkleroot');
        }
        catch (error) {
            rejection = true;
        }
        expect(rejection).to.be.true;
        expect(postRequestStub.callCount).to.be.equal(3);
    }).timeout(20000);
});
//# sourceMappingURL=poi-node-request.test.js.map