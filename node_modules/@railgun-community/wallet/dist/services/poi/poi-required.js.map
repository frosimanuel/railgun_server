{"version":3,"file":"poi-required.js","sourceRoot":"","sources":["../../../src/services/poi/poi-required.ts"],"names":[],"mappings":";;;AAAA,oEAI0C;AAC1C,yDAA0E;AAC1E,sDAAgD;AAEhD,MAAa,WAAW;IACd,MAAM,CAAC,kBAAkB,GAA0C,EAAE,CAAC;IAE9E,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAC/B,WAAwB;QAExB,IAAI,IAAA,yBAAS,EAAC,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,EAAE;YACnD,OAAO,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAY,CAAC;SACxD;QAED,MAAM,EAAE,GAAG,EAAE,GAAG,8BAAc,CAAC,WAAW,CAAC,CAAC;QAC5C,IAAI,CAAC,IAAA,yBAAS,EAAC,GAAG,CAAC,EAAE;YACnB,OAAO,KAAK,CAAC;SACd;QAED,MAAM,QAAQ,GAAG,IAAA,yCAA6B,EAAC,WAAW,CAAC,CAAC;QAC5D,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,cAAc,EAAE,CAAC;QAEpD,MAAM,UAAU,GAAG,GAAG,CAAC,WAAW,GAAG,WAAW,CAAC;QACjD,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;SAC7C;QACD,IAAI,WAAW,GAAG,KAAK,GAAG,GAAG,CAAC,WAAW,EAAE;YACzC,mCAAmC;YACnC,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC;SAC9C;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,WAAwB;QACvD,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,EAAE;YACnD,OAAO,EAAE,CAAC;SACX;QACD,OAAO,YAAG,CAAC,iBAAiB,EAAE,CAAC;IACjC,CAAC;;AAlCH,kCAmCC","sourcesContent":["import {\n  NETWORK_CONFIG,\n  NetworkName,\n  isDefined,\n} from '@railgun-community/shared-models';\nimport { getFallbackProviderForNetwork } from '../railgun/core/providers';\nimport { POI } from '@railgun-community/engine';\n\nexport class POIRequired {\n  private static requiredForNetwork: Partial<Record<NetworkName, boolean>> = {};\n\n  static async isRequiredForNetwork(\n    networkName: NetworkName,\n  ): Promise<boolean> {\n    if (isDefined(this.requiredForNetwork[networkName])) {\n      return this.requiredForNetwork[networkName] as boolean;\n    }\n\n    const { poi } = NETWORK_CONFIG[networkName];\n    if (!isDefined(poi)) {\n      return false;\n    }\n\n    const provider = getFallbackProviderForNetwork(networkName);\n    const blockNumber = await provider.getBlockNumber();\n\n    const isRequired = poi.launchBlock < blockNumber;\n    if (isRequired) {\n      this.requiredForNetwork[networkName] = true;\n    }\n    if (blockNumber + 10000 < poi.launchBlock) {\n      // Launches in at least 10k blocks.\n      this.requiredForNetwork[networkName] = false;\n    }\n    return isRequired;\n  }\n\n  static async getRequiredListKeys(networkName: NetworkName) {\n    if (!(await this.isRequiredForNetwork(networkName))) {\n      return [];\n    }\n    return POI.getActiveListKeys();\n  }\n}\n"]}