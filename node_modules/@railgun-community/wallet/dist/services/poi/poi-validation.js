"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.POIValidator = void 0;
const engine_1 = require("@railgun-community/engine");
const shared_models_1 = require("@railgun-community/shared-models");
const wallets_1 = require("../railgun/wallets/wallets");
const prover_1 = require("../railgun/core/prover");
class POIValidator {
    static initForPOINode(validatePOIMerkleroots) {
        engine_1.POIValidation.initForPOINode(validatePOIMerkleroots);
    }
    static async isValidSpendableTransaction(railgunWalletID, txidVersion, chain, transactionRequest, useRelayAdapt, pois) {
        const network = (0, shared_models_1.networkForChain)(chain);
        if (!network) {
            throw new Error(`No network found for POI validator.`);
        }
        let contractAddress;
        if (useRelayAdapt) {
            contractAddress = engine_1.RailgunVersionedSmartContracts.getRelayAdaptContract(txidVersion, chain).address;
        }
        else {
            contractAddress = engine_1.RailgunVersionedSmartContracts.getVerifier(txidVersion, chain).address;
        }
        const wallet = (0, wallets_1.walletForID)(railgunWalletID);
        return wallet.isValidSpendableTransaction(txidVersion, chain, contractAddress, transactionRequest, useRelayAdapt, pois);
    }
    static async assertIsValidSpendableTXID(listKey, txidVersion, chain, pois, railgunTxids, utxoTreesIn) {
        const prover = (0, prover_1.getProver)();
        return engine_1.POIValidation.assertIsValidSpendableTXID(txidVersion, listKey, chain, prover, pois, railgunTxids, utxoTreesIn);
    }
}
exports.POIValidator = POIValidator;
//# sourceMappingURL=poi-validation.js.map