import { Chain, BlindedCommitmentData, POIsPerList, POINodeInterface, LegacyTransactProofData } from '@railgun-community/engine';
import { MerkleProof, SnarkProof, TXIDVersion } from '@railgun-community/shared-models';
export type BatchListUpdateEvent = {
    current: number;
    total: number;
    percent: number;
    status: string;
};
export declare class WalletPOINodeInterface extends POINodeInterface {
    private poiNodeRequest;
    private batchSize;
    private static isPaused;
    private static isPausedMap;
    static isPausedForChain(chain: Chain): boolean;
    static listBatchCallback: ((batchData: BatchListUpdateEvent) => void) | undefined;
    constructor(poiNodeURLs: string[]);
    private static poiStatusToTXOPOIStatus;
    private static getPOISettings;
    isActive(chain: Chain): boolean;
    static pause(chain: Chain): void;
    static unpause(chain: Chain): void;
    isRequired(chain: Chain): Promise<boolean>;
    static setListBatchCallback: (callback: (batchData: BatchListUpdateEvent) => void) => void;
    static clearListBatchStatus: () => void;
    static emitListBatchCallback: (current: number, total: number, message: string) => void;
    getPOIsPerList(txidVersion: TXIDVersion, chain: Chain, listKeys: string[], blindedCommitmentDatas: BlindedCommitmentData[]): Promise<{
        [blindedCommitment: string]: POIsPerList;
    }>;
    getPOIMerkleProofs(txidVersion: TXIDVersion, chain: Chain, listKey: string, blindedCommitments: string[]): Promise<MerkleProof[]>;
    validatePOIMerkleroots(txidVersion: TXIDVersion, chain: Chain, listKey: string, poiMerkleroots: string[]): Promise<boolean>;
    submitPOI(txidVersion: TXIDVersion, chain: Chain, listKey: string, snarkProof: SnarkProof, poiMerkleroots: string[], txidMerkleroot: string, txidMerklerootIndex: number, blindedCommitmentsOut: string[], railgunTxidIfHasUnshield: string): Promise<void>;
    submitLegacyTransactProofs(txidVersion: TXIDVersion, chain: Chain, listKeys: string[], legacyTransactProofDatas: LegacyTransactProofData[]): Promise<void>;
}
