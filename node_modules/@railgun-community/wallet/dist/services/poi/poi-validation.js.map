{"version":3,"file":"poi-validation.js","sourceRoot":"","sources":["../../../src/services/poi/poi-validation.ts"],"names":[],"mappings":";;;AAAA,sDAKmC;AACnC,oEAK0C;AAE1C,wDAAyD;AACzD,mDAAmD;AAEnD,MAAa,YAAY;IACvB,MAAM,CAAC,cAAc,CAAC,sBAA+C;QACnE,sBAAa,CAAC,cAAc,CAAC,sBAAsB,CAAC,CAAC;IACvD,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,2BAA2B,CACtC,eAAuB,EACvB,WAAwB,EACxB,KAAY,EACZ,kBAAuC,EACvC,aAAsB,EACtB,IAA0C;QAM1C,MAAM,OAAO,GAAG,IAAA,+BAAe,EAAC,KAAK,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;SACxD;QAED,IAAI,eAAuB,CAAC;QAC5B,IAAI,aAAa,EAAE;YACjB,eAAe,GAAG,uCAA8B,CAAC,qBAAqB,CACpE,WAAW,EACX,KAAK,CACN,CAAC,OAAO,CAAC;SACX;aAAM;YACL,eAAe,GAAG,uCAA8B,CAAC,WAAW,CAC1D,WAAW,EACX,KAAK,CACN,CAAC,OAAO,CAAC;SACX;QAED,MAAM,MAAM,GAAG,IAAA,qBAAW,EAAC,eAAe,CAAC,CAAC;QAC5C,OAAO,MAAM,CAAC,2BAA2B,CACvC,WAAW,EACX,KAAK,EACL,eAAe,EACf,kBAAkB,EAClB,aAAa,EACb,IAAI,CACL,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,0BAA0B,CACrC,OAAe,EACf,WAAwB,EACxB,KAAY,EACZ,IAA0C,EAC1C,YAAsB,EACtB,WAAqB;QAErB,MAAM,MAAM,GAAG,IAAA,kBAAS,GAAE,CAAC;QAE3B,OAAO,sBAAa,CAAC,0BAA0B,CAC7C,WAAW,EACX,OAAO,EACP,KAAK,EACL,MAAM,EACN,IAAI,EACJ,YAAY,EACZ,WAAW,CACZ,CAAC;IACJ,CAAC;CACF;AAlED,oCAkEC","sourcesContent":["import {\n  ExtractedRailgunTransactionData,\n  POIMerklerootsValidator,\n  POIValidation,\n  RailgunVersionedSmartContracts,\n} from '@railgun-community/engine';\nimport {\n  Chain,\n  PreTransactionPOIsPerTxidLeafPerList,\n  TXIDVersion,\n  networkForChain,\n} from '@railgun-community/shared-models';\nimport { ContractTransaction } from 'ethers';\nimport { walletForID } from '../railgun/wallets/wallets';\nimport { getProver } from '../railgun/core/prover';\n\nexport class POIValidator {\n  static initForPOINode(validatePOIMerkleroots: POIMerklerootsValidator) {\n    POIValidation.initForPOINode(validatePOIMerkleroots);\n  }\n\n  static async isValidSpendableTransaction(\n    railgunWalletID: string,\n    txidVersion: TXIDVersion,\n    chain: Chain,\n    transactionRequest: ContractTransaction,\n    useRelayAdapt: boolean,\n    pois: PreTransactionPOIsPerTxidLeafPerList,\n  ): Promise<{\n    isValid: boolean;\n    error?: string;\n    extractedRailgunTransactionData?: ExtractedRailgunTransactionData;\n  }> {\n    const network = networkForChain(chain);\n    if (!network) {\n      throw new Error(`No network found for POI validator.`);\n    }\n\n    let contractAddress: string;\n    if (useRelayAdapt) {\n      contractAddress = RailgunVersionedSmartContracts.getRelayAdaptContract(\n        txidVersion,\n        chain,\n      ).address;\n    } else {\n      contractAddress = RailgunVersionedSmartContracts.getVerifier(\n        txidVersion,\n        chain,\n      ).address;\n    }\n\n    const wallet = walletForID(railgunWalletID);\n    return wallet.isValidSpendableTransaction(\n      txidVersion,\n      chain,\n      contractAddress,\n      transactionRequest,\n      useRelayAdapt,\n      pois,\n    );\n  }\n\n  static async assertIsValidSpendableTXID(\n    listKey: string,\n    txidVersion: TXIDVersion,\n    chain: Chain,\n    pois: PreTransactionPOIsPerTxidLeafPerList,\n    railgunTxids: string[],\n    utxoTreesIn: bigint[],\n  ): Promise<boolean> {\n    const prover = getProver();\n\n    return POIValidation.assertIsValidSpendableTXID(\n      txidVersion,\n      listKey,\n      chain,\n      prover,\n      pois,\n      railgunTxids,\n      utxoTreesIn,\n    );\n  }\n}\n"]}