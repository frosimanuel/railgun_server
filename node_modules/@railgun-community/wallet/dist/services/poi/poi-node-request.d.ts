import { TransactProofData, MerkleProof, Chain, BlindedCommitmentData, POIsPerListMap, ValidatedRailgunTxidStatus, TXIDVersion, SingleCommitmentProofsData } from '@railgun-community/shared-models';
import { LegacyTransactProofData } from '@railgun-community/engine';
export declare class POINodeRequest {
    private nodeURLs;
    constructor(nodeURLs: string[]);
    private currentNodeURLIndex;
    private getNextNodeURL;
    private getNodeURL;
    private static jsonRpcRequest;
    private attemptRequestWithFallbacks;
    validateRailgunTxidMerkleroot: (txidVersion: TXIDVersion, chain: Chain, tree: number, index: number, merkleroot: string) => Promise<boolean>;
    getLatestValidatedRailgunTxid: (txidVersion: TXIDVersion, chain: Chain) => Promise<ValidatedRailgunTxidStatus>;
    validatePOIMerkleroots: (txidVersion: TXIDVersion, chain: Chain, listKey: string, poiMerkleroots: string[], retryCount?: number) => Promise<boolean>;
    getPOIsPerList: (txidVersion: TXIDVersion, chain: Chain, listKeys: string[], blindedCommitmentDatas: BlindedCommitmentData[]) => Promise<POIsPerListMap>;
    getPOIMerkleProofs: (txidVersion: TXIDVersion, chain: Chain, listKey: string, blindedCommitments: string[]) => Promise<MerkleProof[]>;
    submitPOI: (txidVersion: TXIDVersion, chain: Chain, listKey: string, transactProofData: TransactProofData) => Promise<void>;
    submitLegacyTransactProofs: (txidVersion: TXIDVersion, chain: Chain, listKeys: string[], legacyTransactProofDatas: LegacyTransactProofData[]) => Promise<void>;
    submitSingleCommitmentProof: (txidVersion: TXIDVersion, chain: Chain, singleCommitmentProofsData: SingleCommitmentProofsData) => Promise<void>;
}
