"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getArtifactUrl = exports.decompressArtifact = exports.getArtifactDownloadsPaths = exports.artifactDownloadsPath = exports.getArtifactVariantStringPOI = exports.getArtifactVariantString = exports.artifactDownloadsDir = exports.ARTIFACT_VARIANT_STRING_POI_PREFIX = void 0;
const shared_models_1 = require("@railgun-community/shared-models");
const decompress_1 = __importDefault(require("brotli/decompress"));
const IPFS_GATEWAY = 'https://ipfs-lb.com';
const MASTER_IPFS_HASH_ARTIFACTS = 'QmeBrG7pii1qTqsn7rusvDiqXopHPjCT9gR4PsmW7wXqZq';
const IPFS_HASH_ARTIFACTS_POI = 'QmZrP9zaZw2LwErT2yA6VpMWm65UdToQiKj4DtStVsUJHr';
exports.ARTIFACT_VARIANT_STRING_POI_PREFIX = 'POI';
const artifactDownloadsDir = (artifactVariantString) => {
    if (artifactVariantString.startsWith(exports.ARTIFACT_VARIANT_STRING_POI_PREFIX)) {
        return `artifacts-v2.1/poi-nov-2-23/${artifactVariantString}`;
    }
    return `artifacts-v2.1/${artifactVariantString}`;
};
exports.artifactDownloadsDir = artifactDownloadsDir;
const getArtifactVariantString = (nullifiers, commitments) => {
    return `${nullifiers}x${commitments}`;
};
exports.getArtifactVariantString = getArtifactVariantString;
const getArtifactVariantStringPOI = (maxInputs, maxOutputs) => {
    return `${exports.ARTIFACT_VARIANT_STRING_POI_PREFIX}_${maxInputs}x${maxOutputs}`;
};
exports.getArtifactVariantStringPOI = getArtifactVariantStringPOI;
const artifactDownloadsPath = (artifactName, artifactVariantString) => {
    switch (artifactName) {
        case shared_models_1.ArtifactName.WASM:
            return `${(0, exports.artifactDownloadsDir)(artifactVariantString)}/wasm`;
        case shared_models_1.ArtifactName.ZKEY:
            return `${(0, exports.artifactDownloadsDir)(artifactVariantString)}/zkey`;
        case shared_models_1.ArtifactName.VKEY:
            return `${(0, exports.artifactDownloadsDir)(artifactVariantString)}/vkey.json`;
        case shared_models_1.ArtifactName.DAT:
            return `${(0, exports.artifactDownloadsDir)(artifactVariantString)}/dat`;
    }
};
exports.artifactDownloadsPath = artifactDownloadsPath;
const getArtifactDownloadsPaths = (artifactVariantString) => {
    return {
        [shared_models_1.ArtifactName.ZKEY]: (0, exports.artifactDownloadsPath)(shared_models_1.ArtifactName.ZKEY, artifactVariantString),
        [shared_models_1.ArtifactName.WASM]: (0, exports.artifactDownloadsPath)(shared_models_1.ArtifactName.WASM, artifactVariantString),
        [shared_models_1.ArtifactName.VKEY]: (0, exports.artifactDownloadsPath)(shared_models_1.ArtifactName.VKEY, artifactVariantString),
        [shared_models_1.ArtifactName.DAT]: (0, exports.artifactDownloadsPath)(shared_models_1.ArtifactName.DAT, artifactVariantString),
    };
};
exports.getArtifactDownloadsPaths = getArtifactDownloadsPaths;
const decompressArtifact = (arrayBuffer) => {
    const decompress = decompress_1.default;
    return decompress(Buffer.from(arrayBuffer));
};
exports.decompressArtifact = decompressArtifact;
const getArtifactIPFSFilepath = (artifactName, artifactVariantString) => {
    switch (artifactName) {
        case shared_models_1.ArtifactName.ZKEY:
            return `${artifactVariantString}/zkey.br`;
        case shared_models_1.ArtifactName.WASM:
            return `prover/snarkjs/${artifactVariantString}.wasm.br`;
        case shared_models_1.ArtifactName.VKEY:
            return `${artifactVariantString}/vkey.json`;
        case shared_models_1.ArtifactName.DAT:
            return `prover/native/${artifactVariantString}.dat.br`;
    }
    throw new Error('Invalid artifact.');
};
const getArtifactIPFSFilepathPOI = (artifactName) => {
    switch (artifactName) {
        case shared_models_1.ArtifactName.ZKEY:
            return `zkey.br`;
        case shared_models_1.ArtifactName.WASM:
            return `wasm.br`;
        case shared_models_1.ArtifactName.VKEY:
            return `vkey.json`;
        case shared_models_1.ArtifactName.DAT:
            return `dat.br`;
    }
    throw new Error('Invalid artifact.');
};
const getArtifactUrl = (artifactName, artifactVariantString) => {
    if (artifactVariantString.startsWith(exports.ARTIFACT_VARIANT_STRING_POI_PREFIX)) {
        if (artifactVariantString === (0, exports.getArtifactVariantStringPOI)(3, 3) ||
            artifactVariantString === (0, exports.getArtifactVariantStringPOI)(13, 13)) {
            return `${IPFS_GATEWAY}/ipfs/${IPFS_HASH_ARTIFACTS_POI}/${artifactVariantString}/${getArtifactIPFSFilepathPOI(artifactName)}`;
        }
        throw new Error(`Invalid POI artifact: ${artifactVariantString}.`);
    }
    const artifactFilepath = getArtifactIPFSFilepath(artifactName, artifactVariantString);
    return `${IPFS_GATEWAY}/ipfs/${MASTER_IPFS_HASH_ARTIFACTS}/${artifactFilepath}`;
};
exports.getArtifactUrl = getArtifactUrl;
//# sourceMappingURL=artifact-util.js.map