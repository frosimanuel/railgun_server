"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types="../../../types/global" />
const chai_1 = __importDefault(require("chai"));
const chai_as_promised_1 = __importDefault(require("chai-as-promised"));
const shared_models_1 = require("@railgun-community/shared-models");
const setup_test_1 = require("../../../tests/setup.test");
const artifacts_1 = require("../../railgun/core/artifacts");
const artifact_util_1 = require("../artifact-util");
chai_1.default.use(chai_as_promised_1.default);
const { expect } = chai_1.default;
describe('artifact-downloader', () => {
    before(async () => {
        const useNativeArtifacts = false;
        await (0, setup_test_1.initTestEngine)(useNativeArtifacts);
    });
    it('Should set and get artifacts', async () => {
        (0, artifacts_1.setUseNativeArtifacts)(false);
        (0, artifacts_1.clearArtifactCache)();
        const inputs11By2 = {
            nullifiers: [
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
            ],
            merkleRoot: BigInt(0),
            boundParamsHash: BigInt(0),
            commitmentsOut: [BigInt(0), BigInt(1)],
        };
        await expect(artifacts_1.artifactGetterDownloadJustInTime.getArtifacts(inputs11By2)).to.be.rejectedWith('No artifacts for inputs: 11-2');
        const mockArtifact = {
            [shared_models_1.ArtifactName.ZKEY]: Buffer.from('123'),
            [shared_models_1.ArtifactName.WASM]: Buffer.from('456'),
            [shared_models_1.ArtifactName.DAT]: undefined,
            [shared_models_1.ArtifactName.VKEY]: { data: '789' },
        };
        const artifactVariantString2by2 = (0, artifact_util_1.getArtifactVariantString)(2, 2);
        (0, artifacts_1.overrideArtifact)(artifactVariantString2by2, mockArtifact);
        // Pre-set in test.
        const inputs2By2 = {
            nullifiers: [BigInt(1), BigInt(2)],
            merkleRoot: BigInt(0),
            boundParamsHash: BigInt(0),
            commitmentsOut: [BigInt(0), BigInt(1)],
        };
        await expect(artifacts_1.artifactGetterDownloadJustInTime.getArtifacts(inputs2By2)).to
            .be.fulfilled;
    });
    it('Should get artifacts from cache - poi', async () => {
        (0, artifacts_1.setUseNativeArtifacts)(false);
        (0, artifacts_1.clearArtifactCache)();
        await expect(artifacts_1.artifactGetterDownloadJustInTime.getArtifactsPOI(13, 12)).to.be.rejectedWith('Invalid POI artifact: POI_13x12.');
        const mockArtifact = {
            [shared_models_1.ArtifactName.ZKEY]: Buffer.from('123'),
            [shared_models_1.ArtifactName.WASM]: Buffer.from('456'),
            [shared_models_1.ArtifactName.DAT]: undefined,
            [shared_models_1.ArtifactName.VKEY]: { data: '789' },
        };
        (0, artifacts_1.overrideArtifact)('POI_13x13', mockArtifact);
        await expect(artifacts_1.artifactGetterDownloadJustInTime.getArtifactsPOI(13, 13)).to.be
            .fulfilled;
    });
    it('Should download artifacts - poi snarkjs', async () => {
        (0, artifacts_1.setUseNativeArtifacts)(false);
        (0, artifacts_1.clearArtifactCache)();
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const artifacts3x3 = await artifacts_1.artifactGetterDownloadJustInTime.getArtifactsPOI(3, 3);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const artifacts13x13 = await artifacts_1.artifactGetterDownloadJustInTime.getArtifactsPOI(13, 13);
        expect(artifacts3x3.vkey).to.not.be.undefined;
        expect(artifacts3x3.zkey).to.not.be.undefined;
        expect(artifacts3x3.wasm).to.not.be.undefined;
        expect(artifacts3x3.dat).to.be.undefined;
        expect(artifacts13x13.vkey).to.not.be.undefined;
        expect(artifacts13x13.zkey).to.not.be.undefined;
        expect(artifacts13x13.wasm).to.not.be.undefined;
        expect(artifacts13x13.dat).to.be.undefined;
        const cached = artifacts_1.artifactCache.POI_13x13;
        expect(cached?.vkey).to.not.be.undefined;
        expect(cached?.zkey).to.not.be.undefined;
        expect(cached?.wasm).to.not.be.undefined;
        expect(cached?.dat).to.be.undefined;
    }).timeout(30000);
    it('Should download artifacts - poi native', async () => {
        (0, artifacts_1.setUseNativeArtifacts)(true);
        (0, artifacts_1.clearArtifactCache)();
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const artifacts3x3 = await artifacts_1.artifactGetterDownloadJustInTime.getArtifactsPOI(3, 3);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const artifacts13x13 = await artifacts_1.artifactGetterDownloadJustInTime.getArtifactsPOI(13, 13);
        expect(artifacts3x3.vkey).to.not.be.undefined;
        expect(artifacts3x3.zkey).to.not.be.undefined;
        expect(artifacts3x3.wasm).to.be.undefined;
        expect(artifacts3x3.dat).to.not.be.undefined;
        expect(artifacts13x13.vkey).to.not.be.undefined;
        expect(artifacts13x13.zkey).to.not.be.undefined;
        expect(artifacts13x13.wasm).to.be.undefined;
        expect(artifacts13x13.dat).to.not.be.undefined;
        const cached = artifacts_1.artifactCache.POI_13x13;
        expect(cached?.vkey).to.not.be.undefined;
        expect(cached?.zkey).to.not.be.undefined;
        expect(cached?.wasm).to.be.undefined;
        expect(cached?.dat).to.not.be.undefined;
    }).timeout(30000);
    it('Should download artifacts - snarkjs', async () => {
        (0, artifacts_1.setUseNativeArtifacts)(false);
        (0, artifacts_1.clearArtifactCache)();
        // Requires download.
        const inputs = {
            nullifiers: [
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
            ],
            merkleRoot: BigInt(0),
            boundParamsHash: BigInt(0),
            commitmentsOut: [BigInt(0), BigInt(1)],
        };
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const artifacts = await artifacts_1.artifactGetterDownloadJustInTime.getArtifacts(inputs);
        expect(artifacts.vkey).to.not.be.undefined;
        expect(artifacts.zkey).to.not.be.undefined;
        expect(artifacts.wasm).to.not.be.undefined;
        expect(artifacts.dat).to.be.undefined;
        const cached = artifacts_1.artifactCache['8x2'];
        expect(cached?.vkey).to.not.be.undefined;
        expect(cached?.zkey).to.not.be.undefined;
        expect(cached?.wasm).to.not.be.undefined;
        expect(cached?.dat).to.be.undefined;
    }).timeout(30000);
    it('Should download artifacts - native', async () => {
        (0, artifacts_1.setUseNativeArtifacts)(true);
        (0, artifacts_1.clearArtifactCache)();
        // Requires download.
        const inputs = {
            nullifiers: [
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
                BigInt(1),
            ],
            merkleRoot: BigInt(0),
            boundParamsHash: BigInt(0),
            commitmentsOut: [BigInt(0), BigInt(1), BigInt(1)],
        };
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const artifacts = await artifacts_1.artifactGetterDownloadJustInTime.getArtifacts(inputs);
        expect(artifacts.vkey).to.not.be.undefined;
        expect(artifacts.zkey).to.not.be.undefined;
        expect(artifacts.wasm).to.be.undefined;
        expect(artifacts.dat).to.not.be.undefined;
        const cached = artifacts_1.artifactCache['6x3'];
        expect(cached?.vkey).to.not.be.undefined;
        expect(cached?.zkey).to.not.be.undefined;
        expect(cached?.wasm).to.be.undefined;
        expect(cached?.dat).to.not.be.undefined;
    }).timeout(30000);
    // Skipped because we don't want to run this on every build.
    it.skip('Should download ALL artifacts - native and nodejs', async () => {
        (0, artifacts_1.setUseNativeArtifacts)(true);
        (0, artifacts_1.clearArtifactCache)();
        for (let i = 1; i <= 10; i += 1) {
            for (let j = 1; j <= 3; j += 1) {
                if (i === 10 && j === 5) {
                    continue;
                }
                // console.log(`NATIVE: ${i}x${j}...`);
                const inputs = {
                    nullifiers: new Array(i),
                    merkleRoot: BigInt(0),
                    boundParamsHash: BigInt(0),
                    commitmentsOut: new Array(j),
                };
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                const artifacts = 
                // eslint-disable-next-line no-await-in-loop
                await artifacts_1.artifactGetterDownloadJustInTime.getArtifacts(inputs);
                expect(artifacts.vkey).to.not.be.undefined;
                expect(artifacts.zkey).to.not.be.undefined;
                expect(artifacts.wasm).to.be.undefined;
                expect(artifacts.dat).to.not.be.undefined;
            }
        }
        (0, artifacts_1.clearArtifactCache)();
        (0, artifacts_1.setUseNativeArtifacts)(false);
        for (let i = 1; i <= 10; i += 1) {
            for (let j = 1; j <= 5; j += 1) {
                if (i === 10 && j === 5) {
                    continue;
                }
                // console.log(`NODEJS: ${i}x${j}...`);
                const inputs = {
                    nullifiers: new Array(i),
                    merkleRoot: BigInt(0),
                    boundParamsHash: BigInt(0),
                    commitmentsOut: new Array(j),
                };
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                const artifacts = 
                // eslint-disable-next-line no-await-in-loop
                await artifacts_1.artifactGetterDownloadJustInTime.getArtifacts(inputs);
                expect(artifacts.vkey).to.not.be.undefined;
                expect(artifacts.zkey).to.not.be.undefined;
                expect(artifacts.wasm).to.not.be.undefined;
                expect(artifacts.dat).to.be.undefined;
            }
        }
    }).timeout(30000);
});
//# sourceMappingURL=artifact-downloader.test.js.map