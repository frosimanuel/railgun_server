{"version":3,"file":"balances.test.js","sourceRoot":"","sources":["../../../../../src/services/railgun/wallets/__tests__/balances.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { RailgunEngine, RailgunWallet } from '@railgun-community/engine';\nimport chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport Sinon, { SinonStub } from 'sinon';\nimport {\n  MOCK_DB_ENCRYPTION_KEY,\n  MOCK_MNEMONIC,\n} from '../../../../tests/mocks.test';\nimport { closeTestEngine, initTestEngine } from '../../../../tests/setup.test';\nimport { createRailgunWallet } from '../wallets';\nimport {\n  refreshBalances,\n  rescanFullUTXOMerkletreesAndWallets,\n} from '../balances';\nimport { Chain, ChainType, isDefined } from '@railgun-community/shared-models';\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\nlet walletScanStub: SinonStub;\nlet walletFullScanStub: SinonStub;\nlet engineScanStub: SinonStub;\nlet engineFullScanStub: SinonStub;\n\ndescribe('balances', () => {\n  before(async () => {\n    await initTestEngine();\n    const railgunWalletInfo = await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC,\n      undefined, // creationBlockNumbers\n    );\n    if (!isDefined(railgunWalletInfo)) {\n      return;\n    }\n    walletScanStub = Sinon.stub(\n      RailgunWallet.prototype,\n      'decryptBalances',\n    ).resolves();\n\n    engineScanStub = Sinon.stub(\n      RailgunEngine.prototype,\n      'scanContractHistory',\n    ).resolves();\n\n    walletFullScanStub = Sinon.stub(\n      RailgunWallet.prototype,\n      'fullRedecryptBalancesAllTXIDVersions',\n    ).resolves();\n\n    engineFullScanStub = Sinon.stub(\n      RailgunEngine.prototype,\n      'fullRescanUTXOMerkletreesAndWallets',\n    ).resolves();\n  });\n  afterEach(() => {\n    walletScanStub.resetHistory();\n    engineScanStub.resetHistory();\n    walletFullScanStub.resetHistory();\n    engineFullScanStub.resetHistory();\n  });\n  after(async () => {\n    walletScanStub.restore();\n    engineScanStub.restore();\n    walletFullScanStub.restore();\n    engineFullScanStub.restore();\n    await closeTestEngine();\n  });\n\n  it('Should scan for updates to merkletree and wallets', async () => {\n    const chain: Chain = { type: ChainType.EVM, id: 1 };\n    const response = await refreshBalances(\n      chain,\n      undefined, // walletIdFilter\n    );\n    expect(response).to.be.undefined;\n    expect(engineScanStub.calledOnce).to.be.true;\n  });\n\n  it('Should run full rescan of merkletree and wallets', async () => {\n    const chain: Chain = { type: ChainType.EVM, id: 1 };\n    const response = await rescanFullUTXOMerkletreesAndWallets(\n      chain,\n      undefined, // walletIdFilter\n    );\n    expect(response).to.be.undefined;\n    expect(engineFullScanStub.calledOnce).to.be.true;\n  });\n});\n"]}