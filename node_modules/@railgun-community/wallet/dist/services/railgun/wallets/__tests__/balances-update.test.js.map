{"version":3,"file":"balances-update.test.js","sourceRoot":"","sources":["../../../../../src/services/railgun/wallets/__tests__/balances-update.test.ts"],"names":[],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport {\n  RailgunWallet,\n  TokenBalances,\n  Chain,\n  ChainType,\n  getTokenDataERC20,\n  POIProofEventStatus,\n} from '@railgun-community/engine';\nimport Sinon, { SinonStub } from 'sinon';\nimport {\n  NETWORK_CONFIG,\n  NetworkName,\n  POIProofProgressEvent,\n  RailgunBalancesEvent,\n  RailgunWalletBalanceBucket,\n  isDefined,\n} from '@railgun-community/shared-models';\nimport {\n  onBalancesUpdate,\n  onWalletPOIProofProgress,\n  setOnBalanceUpdateCallback,\n  setOnWalletPOIProofProgressCallback,\n} from '../balance-update';\nimport { createRailgunWallet, fullWalletForID } from '../wallets';\nimport {\n  MOCK_DB_ENCRYPTION_KEY,\n  MOCK_FALLBACK_PROVIDER_JSON_CONFIG_SEPOLIA,\n  MOCK_MNEMONIC,\n} from '../../../../tests/mocks.test';\nimport { closeTestEngine, initTestEngine } from '../../../../tests/setup.test';\nimport { loadProvider } from '../../core/load-provider';\nimport { getTestTXIDVersion } from '../../../../tests/helper.test';\nimport { getEngine } from '../../core/engine';\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\nconst MOCK_TOKEN_ADDRESS = '0x012536';\n\nconst txidVersion = getTestTXIDVersion();\n\nlet wallet: RailgunWallet;\n\nlet walletBalanceStub: SinonStub;\nlet walletBalancesByBucketStub: SinonStub;\nlet walletTokenBalanceStub: SinonStub;\n\ndescribe('balances-update', () => {\n  before(async function run() {\n    this.timeout(60_000);\n    await initTestEngine();\n    const railgunWalletInfo = await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC,\n      undefined, // creationBlockNumbers\n    );\n    if (!isDefined(railgunWalletInfo)) {\n      throw new Error('Expected railgunWalletInfo');\n    }\n    await loadProvider(\n      MOCK_FALLBACK_PROVIDER_JSON_CONFIG_SEPOLIA,\n      NetworkName.EthereumSepolia,\n      10_000, // pollingInterval\n    );\n    const { chain } = NETWORK_CONFIG[NetworkName.EthereumSepolia];\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    getEngine().scanContractHistory(\n      chain,\n      undefined, // walletIdFilter\n    );\n    wallet = fullWalletForID(railgunWalletInfo.id);\n    const tokenAddress = MOCK_TOKEN_ADDRESS.replace('0x', '');\n    const tokenData = getTokenDataERC20(tokenAddress);\n    const balances: TokenBalances = {\n      [tokenAddress]: {\n        balance: BigInt(10),\n        utxos: [],\n        tokenData,\n      },\n    };\n    walletBalanceStub = Sinon.stub(\n      RailgunWallet,\n      'getTokenBalancesByTxidVersion',\n    ).resolves(balances);\n    walletBalancesByBucketStub = Sinon.stub(\n      RailgunWallet.prototype,\n      'getTokenBalancesByBucket',\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    ).resolves({ Spendable: balances } as any);\n    walletTokenBalanceStub = Sinon.stub(\n      RailgunWallet.prototype,\n      'getTokenBalances',\n    ).resolves(balances);\n  });\n\n  afterEach(() => {\n    walletBalanceStub.resetHistory();\n    walletBalancesByBucketStub.resetHistory();\n    walletTokenBalanceStub.resetHistory();\n  });\n  after(async () => {\n    walletBalanceStub.restore();\n    walletBalancesByBucketStub.restore();\n    walletTokenBalanceStub.restore();\n    await closeTestEngine();\n  });\n\n  it('Should not pull balances without callback', async () => {\n    setOnBalanceUpdateCallback(undefined);\n    const chain: Chain = { type: ChainType.EVM, id: 1 };\n    await expect(onBalancesUpdate(txidVersion, wallet, chain)).to.be.fulfilled;\n    expect(walletBalanceStub.notCalled).to.be.true;\n    expect(walletBalancesByBucketStub.notCalled).to.be.true;\n  });\n\n  it('Should parse wallet balances response', async () => {\n    let formattedBalances!: RailgunBalancesEvent;\n    const callback = (balancesFormatted: RailgunBalancesEvent) => {\n      formattedBalances = balancesFormatted;\n    };\n    setOnBalanceUpdateCallback(callback);\n    const chain: Chain = { type: ChainType.EVM, id: 80001 };\n    await expect(onBalancesUpdate(txidVersion, wallet, chain)).to.be.fulfilled;\n    // TODO: enable this assertion once we have PPOI on PolygonMumbai\n    // because `onBalancesUpdate` only runs it if PPOI is required:\n    // expect(walletBalancesByBucketStub.calledOnce).to.be.true;\n    expect(formattedBalances.balanceBucket).to.deep.equal(\n      RailgunWalletBalanceBucket.Spendable,\n    );\n    expect(formattedBalances.chain).to.deep.equal(chain);\n    expect(formattedBalances.erc20Amounts.length).to.equal(1);\n    expect(formattedBalances.erc20Amounts[0]).to.deep.equal({\n      tokenAddress: '0x0000000000000000000000000000000000012536',\n      amount: 10n,\n    });\n  });\n\n  it('Should parse poi proof progress response', async () => {\n    let proofProgress!: POIProofProgressEvent;\n    const callback = (proofProgressEvent: POIProofProgressEvent) => {\n      proofProgress = proofProgressEvent;\n    };\n    setOnWalletPOIProofProgressCallback(callback);\n    const chain: Chain = { type: ChainType.EVM, id: 69 };\n    const status = POIProofEventStatus.InProgress;\n    const progress = 5;\n    const listKey = 'listKey';\n    const txid = 'txid';\n    const railgunTxid = 'railgunTxid';\n    const index = 2;\n    const totalCount = 10;\n    onWalletPOIProofProgress(\n      status,\n      txidVersion,\n      wallet,\n      chain,\n      progress,\n      listKey,\n      txid,\n      railgunTxid,\n      index,\n      totalCount,\n      undefined, // errMessage\n    );\n    expect(proofProgress.chain).to.deep.equal(chain);\n    expect(proofProgress.railgunWalletID).to.equal(wallet.id);\n    expect(proofProgress.progress).to.equal(progress);\n    expect(proofProgress.listKey).to.equal(listKey);\n    expect(proofProgress.txid).to.equal(txid);\n    expect(proofProgress.railgunTxid).to.equal(railgunTxid);\n    expect(proofProgress.index).to.equal(index);\n    expect(proofProgress.totalCount).to.equal(totalCount);\n    expect(proofProgress.txidVersion).to.equal(txidVersion);\n    expect(proofProgress.errMessage).to.be.undefined;\n  });\n});\n"]}