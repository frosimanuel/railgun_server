{"version":3,"file":"wallets.test.js","sourceRoot":"","sources":["../../../../../src/services/railgun/wallets/__tests__/wallets.test.ts"],"names":[],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport { getEngine } from '../../core/engine';\nimport {\n  createRailgunWallet,\n  createViewOnlyRailgunWallet,\n  fullWalletForID,\n  getRailgunAddress,\n  getWalletMnemonic,\n  getWalletShareableViewingKey,\n  loadWalletByID,\n  unloadWalletByID,\n  validateRailgunAddress,\n  viewOnlyWalletForID,\n} from '../wallets';\nimport {\n  MOCK_DB_ENCRYPTION_KEY,\n  MOCK_MNEMONIC_2,\n} from '../../../../tests/mocks.test';\nimport {\n  closeTestEngine,\n  initTestEngine,\n  initTestEngineNetworks,\n} from '../../../../tests/setup.test';\nimport { RailgunWallet } from '@railgun-community/engine';\nimport { NetworkName, isDefined } from '@railgun-community/shared-models';\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\nlet wallet: RailgunWallet;\n\ndescribe('wallets', () => {\n  before(async function run() {\n    this.timeout(60_000);\n    await initTestEngine();\n    await initTestEngineNetworks();\n    const railgunWalletInfo = await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC_2,\n      { [NetworkName.Ethereum]: 0, [NetworkName.Polygon]: 2 }, // creationBlockNumbers\n    );\n    if (!isDefined(railgunWalletInfo)) {\n      throw new Error(`Could not create wallet`);\n    }\n    wallet = fullWalletForID(railgunWalletInfo.id);\n  });\n  after(async () => {\n    await closeTestEngine();\n  });\n\n  it('Should create view only wallet', async () => {\n    const railgunWalletInfo = await createViewOnlyRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      wallet.generateShareableViewingKey(),\n      undefined, // creationBlockNumbers\n    );\n    if (!isDefined(railgunWalletInfo)) {\n      throw new Error('Could not create view-only wallet');\n    }\n    const viewOnlyWallet = viewOnlyWalletForID(railgunWalletInfo.id);\n    expect(viewOnlyWallet).to.not.be.undefined;\n    expect(railgunWalletInfo.railgunAddress).to.equal(wallet.getAddress());\n  }).timeout(60_000);\n\n  it('Should get wallet address', () => {\n    const addressAny = getRailgunAddress(wallet.id);\n    expect(addressAny).to.equal(\n      '0zk1qykzjxctynyz4z43pukckpv43jyzhyvy0ehrd5wuc54l5enqf9qfrrv7j6fe3z53la7enqphqvxys9aqyp9xx0km95ehqslx8apmu8l7anc7emau4tvsultrkvd',\n    );\n  });\n\n  it('Should get wallet shareable viewing key', async () => {\n    const shareableKey = await getWalletShareableViewingKey(wallet.id);\n    expect(shareableKey).to.equal(\n      '82a57670726976d94032643030623234396632646337313236303565336263653364373665376631313931373933363436393365333931666566643963323764303161396262336433a473707562d94030633661376436386331663437303262613764666134613361353236323035303765386637366632393139326363666637653861366231303637393062316165',\n    );\n  });\n\n  it('Should get wallet mnemonic', async () => {\n    const mnemonic = await getWalletMnemonic(MOCK_DB_ENCRYPTION_KEY, wallet.id);\n    expect(mnemonic).to.equal(MOCK_MNEMONIC_2);\n  });\n\n  it('Should create and load wallet from valid mnemonic', async () => {\n    const railgunWalletInfo = await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC_2,\n      undefined, // creationBlockNumbers\n    );\n    expect(railgunWalletInfo.railgunAddress).to.be.a('string');\n    expect(railgunWalletInfo.id).to.equal(wallet.id);\n\n    const loadWalletInfo = await loadWalletByID(\n      MOCK_DB_ENCRYPTION_KEY,\n      railgunWalletInfo.id,\n      false, // isViewOnlyWallet\n    );\n    expect(loadWalletInfo.railgunAddress).to.be.a('string');\n    expect(loadWalletInfo.id).to.equal(wallet.id);\n  });\n\n  it('Should load wallet from db after Engine wallet unload', async () => {\n    expect(Object.keys(getEngine().wallets)).to.include(wallet.id);\n    unloadWalletByID(wallet.id);\n    expect(Object.keys(getEngine().wallets)).to.not.include(wallet.id);\n    const railgunWalletInfo = await loadWalletByID(\n      MOCK_DB_ENCRYPTION_KEY,\n      wallet.id,\n      false, // isViewOnlyWallet\n    );\n    expect(railgunWalletInfo.id).to.equal(wallet.id);\n    expect(railgunWalletInfo.railgunAddress).to.equal(\n      wallet.getAddress(undefined),\n    );\n  });\n\n  it('Should error for unknown load wallet', async () => {\n    await expect(\n      loadWalletByID(\n        MOCK_DB_ENCRYPTION_KEY,\n        'unknown',\n        false, // isViewOnlyWallet\n      ),\n    ).rejectedWith('Could not load RAILGUN wallet');\n  });\n\n  it('Should validate RAILGUN addresses', async () => {\n    expect(validateRailgunAddress('0x9E9F988356f46744Ee0374A17a5Fa1a3A3cC3777'))\n      .to.be.false;\n    expect(validateRailgunAddress('9E9F988356f46744Ee0374A17a5Fa1a3A3cC3777'))\n      .to.be.false;\n    expect(\n      validateRailgunAddress(\n        'rgtestropsten1qyglk9smgj240x2xmj2laj7p5hexw0a30vvdqnv9gk020nsd7yzgwkgce9x',\n      ),\n    ).to.be.false;\n    expect(\n      validateRailgunAddress(\n        '0zk1q8hxknrs97q8pjxaagwthzc0df99rzmhl2xnlxmgv9akv32sua0kfrv7j6fe3z53llhxknrs97q8pjxaagwthzc0df99rzmhl2xnlxmgv9akv32sua0kg0zpzts',\n      ),\n    ).to.be.true;\n    expect(\n      validateRailgunAddress(\n        '0zk1qyqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqunpd9kxwatwqyqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqhshkca',\n      ),\n    ).to.be.true;\n  });\n});\n"]}