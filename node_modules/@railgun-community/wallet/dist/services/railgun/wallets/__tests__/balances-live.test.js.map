{"version":3,"file":"balances-live.test.js","sourceRoot":"","sources":["../../../../../src/services/railgun/wallets/__tests__/balances-live.test.ts"],"names":[],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport {\n  MOCK_DB_ENCRYPTION_KEY,\n  MOCK_FALLBACK_PROVIDER_JSON_CONFIG_SEPOLIA,\n  MOCK_MNEMONIC,\n} from '../../../../tests/mocks.test';\nimport {\n  closeTestEngine,\n  initTestEngine,\n  pollUntilTXIDMerkletreeScanned,\n  pollUntilUTXOMerkletreeScanned,\n} from '../../../../tests/setup.test';\nimport { createRailgunWallet, fullWalletForID } from '../wallets';\nimport { rescanFullUTXOMerkletreesAndWallets } from '../balances';\nimport {\n  Chain,\n  NETWORK_CONFIG,\n  NetworkName,\n  isDefined,\n} from '@railgun-community/shared-models';\nimport { loadProvider } from '../../core/load-provider';\nimport { getTXIDMerkletreeForNetwork } from '../../core/merkletree';\nimport { getTestTXIDVersion, isV2Test } from '../../../../tests/helper.test';\nimport { getEngine } from '../../core/engine';\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\nlet railgunWalletID: string;\n\nconst txidVersion = getTestTXIDVersion();\n\nconst networkName = NetworkName.EthereumSepolia;\nconst chain: Chain = NETWORK_CONFIG[networkName].chain;\n\ndescribe('balances-live', () => {\n  before(async function run() {\n    this.timeout(360_000);\n    await initTestEngine();\n    const railgunWalletInfo = await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC,\n      undefined, // creationBlockNumbers\n    );\n    if (!isDefined(railgunWalletInfo)) {\n      throw new Error('Expected railgunWalletInfo');\n    }\n    railgunWalletID = railgunWalletInfo.id;\n\n    await loadProvider(\n      MOCK_FALLBACK_PROVIDER_JSON_CONFIG_SEPOLIA,\n      networkName,\n      10_000, // pollingInterval\n    );\n    const { chain } = NETWORK_CONFIG[networkName];\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    getEngine().scanContractHistory(\n      chain,\n      undefined, // walletIdFilter\n    );\n    await Promise.all([\n      pollUntilUTXOMerkletreeScanned(),\n      // Enable this when running on a network supporting PPOI:\n      pollUntilTXIDMerkletreeScanned(),\n    ]);\n  });\n\n  after(async () => {\n    await closeTestEngine();\n  });\n\n  it('[V2] Should run live balance fetch, transaction history scan, and POI status info scan', async function run() {\n    if (!isV2Test()) {\n      this.skip();\n      return;\n    }\n\n    await rescanFullUTXOMerkletreesAndWallets(chain, [railgunWalletID]);\n\n    const wallet = fullWalletForID(railgunWalletID);\n    const balances = await wallet.getTokenBalances(\n      txidVersion,\n      chain,\n      false, // onlySpendable\n    );\n\n    // Note: railgunWallet above needs to perform transactions on above network to have balances\n    expect(Object.keys(balances).length).to.be.greaterThanOrEqual(1);\n\n    const transactionHistory = await wallet.getTransactionHistory(\n      chain,\n      undefined,\n    );\n    expect(transactionHistory.length).to.be.greaterThanOrEqual(2);\n\n    const poiStatusReceived = await wallet.getTXOsReceivedPOIStatusInfo(\n      txidVersion,\n      chain,\n    );\n    expect(poiStatusReceived.length).to.be.greaterThanOrEqual(2);\n    expect(poiStatusReceived[0].strings.blindedCommitment).to.not.equal(\n      'Missing',\n    );\n\n    const txidMerkletree = getTXIDMerkletreeForNetwork(\n      txidVersion,\n      networkName,\n    );\n    expect(txidMerkletree.savedPOILaunchSnapshot).to.equal(true);\n\n    const poiStatusSpent = await wallet.getTXOsSpentPOIStatusInfo(\n      txidVersion,\n      chain,\n    );\n    expect(poiStatusSpent.length).to.be.greaterThanOrEqual(1);\n    expect(poiStatusSpent[0].strings.railgunTransactionInfo).to.not.equal(\n      'Not found',\n    );\n  }).timeout(90_000);\n});\n"]}