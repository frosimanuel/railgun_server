{"version":3,"file":"balance-update.js","sourceRoot":"","sources":["../../../../src/services/railgun/wallets/balance-update.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Chain,\n  AbstractWallet,\n  TokenType,\n  TokenBalances,\n  NFTTokenData,\n  getTokenDataHash,\n  getTokenDataNFT,\n  getTokenDataERC20,\n  POIProofEventStatus,\n} from '@railgun-community/engine';\nimport {\n  RailgunBalancesEvent,\n  POIProofProgressEvent,\n  RailgunNFTAmount,\n  RailgunERC20Amount,\n  NetworkName,\n  NETWORK_CONFIG,\n  TXIDVersion,\n  NFTTokenType,\n  RailgunWalletBalanceBucket,\n  isDefined,\n  networkForChain,\n} from '@railgun-community/shared-models';\nimport { sendErrorMessage, sendMessage } from '../../../utils/logger';\nimport { parseRailgunTokenAddress } from '../util/bytes';\nimport { POIRequired } from '../../poi/poi-required';\nimport { getEngine } from '../core/engine';\n\nexport type BalancesUpdatedCallback = (\n  balancesEvent: RailgunBalancesEvent,\n) => void;\n\nlet onBalanceUpdateCallback: Optional<BalancesUpdatedCallback>;\n\nexport const setOnBalanceUpdateCallback = (\n  callback?: BalancesUpdatedCallback,\n) => {\n  onBalanceUpdateCallback = callback;\n};\n\nexport type POIProofProgressCallback = (\n  poiProofProgressEvent: POIProofProgressEvent,\n) => void;\n\nlet onWalletPOIProofProgressCallback: Optional<POIProofProgressCallback>;\n\nexport const setOnWalletPOIProofProgressCallback = (\n  callback?: POIProofProgressCallback,\n) => {\n  onWalletPOIProofProgressCallback = callback;\n};\n\nexport const getSerializedERC20Balances = (\n  balances: TokenBalances,\n): RailgunERC20Amount[] => {\n  const tokenHashes = Object.keys(balances);\n\n  return tokenHashes\n    .filter(tokenHash => {\n      return balances[tokenHash].tokenData.tokenType === TokenType.ERC20;\n    })\n    .map(railgunBalanceAddress => {\n      const erc20Balance: RailgunERC20Amount = {\n        tokenAddress: parseRailgunTokenAddress(\n          balances[railgunBalanceAddress].tokenData.tokenAddress,\n        ).toLowerCase(),\n        amount: balances[railgunBalanceAddress].balance,\n      };\n      return erc20Balance;\n    });\n};\n\nexport const getSerializedNFTBalances = (\n  balances: TokenBalances,\n): RailgunNFTAmount[] => {\n  const tokenHashes = Object.keys(balances);\n\n  return tokenHashes\n    .filter(tokenHash => {\n      return [TokenType.ERC721, TokenType.ERC1155].includes(\n        balances[tokenHash].tokenData.tokenType,\n      );\n    })\n    .map(railgunBalanceAddress => {\n      const balanceForToken = balances[railgunBalanceAddress];\n      const tokenData = balanceForToken.tokenData;\n      const nftBalance: RailgunNFTAmount = {\n        nftAddress: parseRailgunTokenAddress(\n          tokenData.tokenAddress,\n        ).toLowerCase(),\n        tokenSubID: tokenData.tokenSubID,\n        nftTokenType: tokenData.tokenType as 1 | 2,\n        amount: balanceForToken.balance,\n      };\n      return nftBalance;\n    });\n};\n\nconst getNFTBalances = (balances: TokenBalances): RailgunNFTAmount[] => {\n  const tokenHashes = Object.keys(balances);\n\n  return tokenHashes\n    .filter(tokenHash => {\n      return (\n        [TokenType.ERC721, TokenType.ERC1155].includes(\n          balances[tokenHash].tokenData.tokenType,\n        ) && balances[tokenHash].balance > BigInt(0)\n      );\n    })\n    .map(tokenHash => {\n      const tokenData = balances[tokenHash].tokenData;\n\n      const nftBalance: RailgunNFTAmount = {\n        nftAddress: parseRailgunTokenAddress(\n          tokenData.tokenAddress,\n        ).toLowerCase(),\n        nftTokenType: tokenData.tokenType as 1 | 2,\n        tokenSubID: tokenData.tokenSubID,\n        amount: balances[tokenHash].balance,\n      };\n      return nftBalance;\n    });\n};\n\nexport const onBalancesUpdate = async (\n  txidVersion: TXIDVersion,\n  wallet: AbstractWallet,\n  chain: Chain,\n): Promise<void> => {\n  try {\n    if (!onBalanceUpdateCallback) {\n      return;\n    }\n\n    sendMessage(\n      `Wallet balance SCANNED. Getting balances for chain ${chain.type}:${chain.id}.`,\n    );\n\n    const network = networkForChain(chain);\n    if (!network) {\n      return;\n    }\n    if (!(await POIRequired.isRequiredForNetwork(network.name))) {\n      // POI not required for this network\n      return getAllBalancesAsSpendable(txidVersion, wallet, chain);\n    }\n\n    // POI required for this network\n    const tokenBalancesByBucket = await wallet.getTokenBalancesByBucket(\n      txidVersion,\n      chain,\n    );\n\n    const balanceBuckets = Object.values(RailgunWalletBalanceBucket);\n\n    balanceBuckets.forEach(balanceBucket => {\n      if (!onBalanceUpdateCallback) {\n        return;\n      }\n\n      const tokenBalances = tokenBalancesByBucket[balanceBucket];\n      if (!isDefined(tokenBalances)) {\n        return;\n      }\n\n      const erc20Amounts = getSerializedERC20Balances(tokenBalances);\n      const nftAmounts = getNFTBalances(tokenBalances);\n\n      const balancesEvent: RailgunBalancesEvent = {\n        txidVersion,\n        chain,\n        erc20Amounts,\n        nftAmounts,\n        railgunWalletID: wallet.id,\n        balanceBucket,\n      };\n\n      onBalanceUpdateCallback(balancesEvent);\n    });\n  } catch (err) {\n    if (!(err instanceof Error)) {\n      return;\n    }\n    sendMessage(\n      `Error getting balances for chain ${chain.type}:${chain.id}: ${err.message}`,\n    );\n    sendErrorMessage(err);\n  }\n};\n\nconst getAllBalancesAsSpendable = async (\n  txidVersion: TXIDVersion,\n  wallet: AbstractWallet,\n  chain: Chain,\n) => {\n  if (!onBalanceUpdateCallback) {\n    return;\n  }\n\n  const tokenBalances = await wallet.getTokenBalances(\n    txidVersion,\n    chain,\n    false, // onlySpendable\n  );\n\n  const erc20Amounts = getSerializedERC20Balances(tokenBalances);\n  const nftAmounts = getNFTBalances(tokenBalances);\n\n  const balancesEvent: RailgunBalancesEvent = {\n    txidVersion,\n    chain,\n    erc20Amounts,\n    nftAmounts,\n    railgunWalletID: wallet.id,\n    balanceBucket: RailgunWalletBalanceBucket.Spendable,\n  };\n\n  onBalanceUpdateCallback(balancesEvent);\n};\n\nexport const onWalletPOIProofProgress = (\n  status: POIProofEventStatus,\n  txidVersion: TXIDVersion,\n  wallet: AbstractWallet,\n  chain: Chain,\n  progress: number,\n  listKey: string,\n  txid: string,\n  railgunTxid: string,\n  index: number,\n  totalCount: number,\n  errMessage: Optional<string>,\n): void => {\n  sendMessage(\n    `[${listKey}, ${chain.type}:${chain.id}] Wallet POI proof progress: ${progress}.`,\n  );\n  if (!onWalletPOIProofProgressCallback) {\n    return;\n  }\n\n  const poiProofEvent: POIProofProgressEvent = {\n    status,\n    txidVersion,\n    chain,\n    railgunWalletID: wallet.id,\n    progress,\n    listKey,\n    txid,\n    railgunTxid,\n    index,\n    totalCount,\n    errMessage,\n  };\n\n  onWalletPOIProofProgressCallback(poiProofEvent);\n};\n\nexport const balanceForERC20Token = async (\n  txidVersion: TXIDVersion,\n  wallet: AbstractWallet,\n  networkName: NetworkName,\n  tokenAddress: string,\n  onlySpendable: boolean,\n): Promise<bigint> => {\n  const { chain } = NETWORK_CONFIG[networkName];\n  const balances = await wallet.getTokenBalances(\n    txidVersion,\n    chain,\n    onlySpendable,\n  );\n  const tokenBalances = getSerializedERC20Balances(balances);\n\n  const matchingTokenBalance: Optional<RailgunERC20Amount> = tokenBalances.find(\n    tokenBalance =>\n      tokenBalance.tokenAddress.toLowerCase() === tokenAddress.toLowerCase(),\n  );\n  if (!matchingTokenBalance) {\n    return 0n;\n  }\n  return matchingTokenBalance.amount;\n};\n\nexport const balanceForNFT = async (\n  txidVersion: TXIDVersion,\n  wallet: AbstractWallet,\n  networkName: NetworkName,\n  nftTokenData: NFTTokenData,\n  onlySpendable: boolean,\n): Promise<bigint> => {\n  const { chain } = NETWORK_CONFIG[networkName];\n  const balances = await wallet.getTokenBalances(\n    txidVersion,\n    chain,\n    onlySpendable,\n  );\n  const nftBalances = getSerializedNFTBalances(balances);\n\n  const matchingNFTBalance: Optional<RailgunNFTAmount> = nftBalances.find(\n    nftBalance =>\n      nftBalance.nftAddress.toLowerCase() ===\n        nftTokenData.tokenAddress.toLowerCase() &&\n      BigInt(nftBalance.tokenSubID) === BigInt(nftTokenData.tokenSubID),\n  );\n  if (!matchingNFTBalance) {\n    return 0n;\n  }\n  return matchingNFTBalance.amount;\n};\n\nexport {\n  getTokenDataHash,\n  getTokenDataNFT,\n  getTokenDataERC20,\n  TokenType,\n  NFTTokenType,\n  NFTTokenData,\n};\n"]}