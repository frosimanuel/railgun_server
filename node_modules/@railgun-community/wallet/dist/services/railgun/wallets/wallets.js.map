{"version":3,"file":"wallets.js","sourceRoot":"","sources":["../../../../src/services/railgun/wallets/wallets.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RailgunWallet,\n  EngineEvent,\n  WalletScannedEventData,\n  AbstractWallet,\n  WalletData,\n  AddressData,\n  RailgunEngine,\n  ByteUtils,\n  POICurrentProofEventData,\n  ViewOnlyWallet,\n} from '@railgun-community/engine';\nimport {\n  RailgunWalletInfo,\n  NetworkName,\n  NETWORK_CONFIG,\n  isDefined,\n  Chain,\n} from '@railgun-community/shared-models';\nimport { onBalancesUpdate, onWalletPOIProofProgress } from './balance-update';\nimport { reportAndSanitizeError } from '../../../utils/error';\nimport { getAddress } from 'ethers';\nimport { getEngine } from '../core/engine';\n\nexport const awaitWalletScan = (walletID: string, chain: Chain) => {\n  const wallet = walletForID(walletID);\n  return new Promise((resolve, reject) =>\n    wallet.once(\n      EngineEvent.WalletDecryptBalancesComplete,\n      ({ chain: returnedChain }: WalletScannedEventData) =>\n        returnedChain.type === chain.type && returnedChain.id === chain.id\n          ? resolve(returnedChain)\n          : reject(),\n    ),\n  );\n};\n\nexport const awaitMultipleWalletScans = async (\n  walletID: string,\n  chain: Chain,\n  numScans: number,\n) => {\n  let i = 0;\n  while (i < numScans) {\n    // eslint-disable-next-line no-await-in-loop\n    await awaitWalletScan(walletID, chain);\n    i += 1;\n  }\n  return Promise.resolve();\n};\n\nexport const walletForID = (id: string): AbstractWallet => {\n  const engine = getEngine();\n  const wallet = engine.wallets[id];\n  if (!isDefined(wallet)) {\n    throw new Error('No RAILGUN wallet for ID');\n  }\n  return wallet;\n};\n\nexport const fullWalletForID = (id: string): RailgunWallet => {\n  const wallet = walletForID(id);\n  if (!(wallet instanceof RailgunWallet)) {\n    throw new Error('Can not load View-Only wallet.');\n  }\n  return wallet;\n};\n\nexport const viewOnlyWalletForID = (id: string): RailgunWallet => {\n  const wallet = walletForID(id);\n  if (!(wallet instanceof ViewOnlyWallet)) {\n    throw new Error('Can only load View-Only wallet.');\n  }\n  return wallet as RailgunWallet;\n};\n\nconst subscribeToEvents = (wallet: AbstractWallet) => {\n  wallet.on(\n    EngineEvent.WalletDecryptBalancesComplete,\n    ({ txidVersion, chain }: WalletScannedEventData) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      onBalancesUpdate(txidVersion, wallet, chain);\n    },\n  );\n  wallet.on(\n    EngineEvent.POIProofUpdate,\n    ({\n      status,\n      txidVersion,\n      chain,\n      progress,\n      listKey,\n      txid,\n      railgunTxid,\n      index,\n      totalCount,\n      errorMsg,\n    }: POICurrentProofEventData) => {\n      onWalletPOIProofProgress(\n        status,\n        txidVersion,\n        wallet,\n        chain,\n        progress,\n        listKey,\n        txid,\n        railgunTxid,\n        index,\n        totalCount,\n        errorMsg,\n      );\n    },\n  );\n};\n\nconst addressForWallet = (wallet: AbstractWallet): string => {\n  return wallet.getAddress();\n};\n\nconst infoForWallet = (wallet: AbstractWallet): RailgunWalletInfo => {\n  const railgunAddress = addressForWallet(wallet);\n  return {\n    id: wallet.id,\n    railgunAddress,\n  };\n};\n\nconst getExistingWallet = (\n  railgunWalletID: string,\n): Optional<AbstractWallet> => {\n  try {\n    const existingWallet = walletForID(railgunWalletID);\n    return existingWallet;\n  } catch (_err) {\n    return undefined;\n  }\n};\n\nconst loadExistingWallet = async (\n  encryptionKey: string,\n  railgunWalletID: string,\n  isViewOnlyWallet: boolean,\n): Promise<RailgunWalletInfo> => {\n  const existingWallet = getExistingWallet(railgunWalletID);\n  if (existingWallet) {\n    return infoForWallet(existingWallet);\n  }\n  const engine = getEngine();\n  let wallet: AbstractWallet;\n\n  if (isViewOnlyWallet) {\n    wallet = await engine.loadExistingViewOnlyWallet(\n      encryptionKey,\n      railgunWalletID,\n    );\n  } else {\n    wallet = await engine.loadExistingWallet(encryptionKey, railgunWalletID);\n  }\n\n  subscribeToEvents(wallet);\n  return infoForWallet(wallet);\n};\n\nconst createWallet = async (\n  encryptionKey: string,\n  mnemonic: string,\n  creationBlockNumbers: Optional<MapType<number>>,\n  railgunWalletDerivationIndex?: number,\n): Promise<RailgunWalletInfo> => {\n  const formattedCreationBlockNumbers =\n    formatCreationBlockNumbers(creationBlockNumbers);\n\n  const engine = getEngine();\n  const wallet = await engine.createWalletFromMnemonic(\n    encryptionKey,\n    mnemonic,\n    railgunWalletDerivationIndex ?? 0,\n    formattedCreationBlockNumbers,\n  );\n  subscribeToEvents(wallet);\n  return infoForWallet(wallet);\n};\n\nconst createViewOnlyWallet = async (\n  encryptionKey: string,\n  shareableViewingKey: string,\n  creationBlockNumbers: Optional<MapType<number>>,\n): Promise<RailgunWalletInfo> => {\n  const formattedCreationBlockNumbers =\n    formatCreationBlockNumbers(creationBlockNumbers);\n\n  const engine = getEngine();\n  const wallet = await engine.createViewOnlyWalletFromShareableViewingKey(\n    encryptionKey,\n    shareableViewingKey,\n    formattedCreationBlockNumbers,\n  );\n  subscribeToEvents(wallet);\n  return infoForWallet(wallet);\n};\n\nexport const createRailgunWallet = async (\n  encryptionKey: string,\n  mnemonic: string,\n  creationBlockNumbers: Optional<MapType<number>>,\n  railgunWalletDerivationIndex?: number,\n): Promise<RailgunWalletInfo> => {\n  try {\n    return await createWallet(\n      encryptionKey,\n      mnemonic,\n      creationBlockNumbers,\n      railgunWalletDerivationIndex,\n    );\n  } catch (err) {\n    throw reportAndSanitizeError(createRailgunWallet.name, err);\n  }\n};\n\nexport const createViewOnlyRailgunWallet = async (\n  encryptionKey: string,\n  shareableViewingKey: string,\n  creationBlockNumbers: Optional<MapType<number>>,\n): Promise<RailgunWalletInfo> => {\n  try {\n    return await createViewOnlyWallet(\n      encryptionKey,\n      shareableViewingKey,\n      creationBlockNumbers,\n    );\n  } catch (err) {\n    throw reportAndSanitizeError(createViewOnlyRailgunWallet.name, err);\n  }\n};\n\nexport const loadWalletByID = async (\n  encryptionKey: string,\n  railgunWalletID: string,\n  isViewOnlyWallet: boolean,\n): Promise<RailgunWalletInfo> => {\n  try {\n    return await loadExistingWallet(\n      encryptionKey,\n      railgunWalletID,\n      isViewOnlyWallet,\n    );\n  } catch (err) {\n    const sanitizedError = reportAndSanitizeError(loadWalletByID.name, err);\n    throw new Error(`Could not load RAILGUN wallet`, { cause: sanitizedError });\n  }\n};\n\nexport const unloadWalletByID = (railgunWalletID: string): void => {\n  try {\n    const engine = getEngine();\n    engine.unloadWallet(railgunWalletID);\n  } catch (err) {\n    throw new Error('Could not unload RAILGUN wallet.', { cause: err });\n  }\n};\n\nexport const deleteWalletByID = async (\n  railgunWalletID: string,\n): Promise<void> => {\n  try {\n    const engine = getEngine();\n    await engine.deleteWallet(railgunWalletID);\n  } catch (err) {\n    throw new Error('Could not delete RAILGUN wallet.', { cause: err });\n  }\n};\n\nexport const getWalletMnemonic = async (\n  encryptionKey: string,\n  railgunWalletID: string,\n) => {\n  const { db } = getEngine();\n  // Reload wallet to ensure that encryption key is valid.\n  const walletData = (await RailgunWallet.getEncryptedData(\n    db,\n    encryptionKey,\n    railgunWalletID,\n  )) as WalletData;\n\n  if (!walletData.mnemonic) {\n    throw new Error('No mnemonic for wallet.');\n  }\n  return walletData.mnemonic;\n};\n\nexport const getRailgunWalletAddressData = (address: string): AddressData => {\n  assertValidRailgunAddress(address);\n  return RailgunEngine.decodeAddress(address);\n};\n\nexport const getRailgunWalletPrivateViewingKey = (\n  railgunWalletID: string,\n): Uint8Array => {\n  const wallet = walletForID(railgunWalletID);\n  return wallet.getViewingKeyPair().privateKey;\n};\n\nexport const signWithWalletViewingKey = async (\n  railgunWalletID: string,\n  message: string,\n): Promise<string> => {\n  const wallet = walletForID(railgunWalletID);\n  const signature = await wallet.signWithViewingKey(\n    ByteUtils.hexStringToBytes(message),\n  );\n  return ByteUtils.hexlify(signature);\n};\n\nexport const assertValidRailgunAddress = (address: string): void => {\n  if (!validateRailgunAddress(address)) {\n    throw new Error('Invalid RAILGUN address.');\n  }\n};\n\nexport const validateRailgunAddress = (address: string): boolean => {\n  try {\n    return RailgunEngine.decodeAddress(address) != null;\n  } catch (err) {\n    return false;\n  }\n};\n\nexport const assertValidEthAddress = (address: string) => {\n  if (!validateEthAddress(address)) {\n    throw new Error('Invalid wallet address.');\n  }\n};\n\nexport const validateEthAddress = (address: string): boolean => {\n  try {\n    getAddress(address);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nexport const getRailgunAddress = (\n  railgunWalletID: string,\n): Optional<string> => {\n  try {\n    const wallet = walletForID(railgunWalletID);\n    return wallet.getAddress();\n  } catch (err) {\n    reportAndSanitizeError(getRailgunAddress.name, err);\n    return undefined;\n  }\n};\n\nexport const getWalletShareableViewingKey = async (\n  railgunWalletID: string,\n): Promise<Optional<string>> => {\n  try {\n    const wallet = walletForID(railgunWalletID);\n    return wallet.generateShareableViewingKey();\n  } catch (err) {\n    reportAndSanitizeError(getWalletShareableViewingKey.name, err);\n    return undefined;\n  }\n};\n\nconst formatCreationBlockNumbers = (\n  creationBlockNumbers: Optional<MapType<number>>,\n): Optional<number[][]> => {\n  // Format creationBlockNumbers from client side { <NetworkName>: <BlockNumber> } map to @railgun-community/engine's number[][] type\n  if (!creationBlockNumbers) return;\n\n  const formattedCreationBlockNumbers: number[][] = [];\n  const networksNames = Object.keys(creationBlockNumbers) as NetworkName[];\n\n  for (const networkName of networksNames) {\n    const network = NETWORK_CONFIG[networkName];\n\n    const blockNumber = creationBlockNumbers[networkName];\n    if (!isDefined(blockNumber)) {\n      continue;\n    }\n\n    formattedCreationBlockNumbers[network.chain.type] ??= [];\n    formattedCreationBlockNumbers[network.chain.type][network.chain.id] =\n      blockNumber;\n  }\n\n  return formattedCreationBlockNumbers;\n};\n"]}