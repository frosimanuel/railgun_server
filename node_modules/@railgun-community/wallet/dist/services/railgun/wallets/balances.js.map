{"version":3,"file":"balances.js","sourceRoot":"","sources":["../../../../src/services/railgun/wallets/balances.ts"],"names":[],"mappings":";;;AAEA,gDAA8D;AAC9D,2CAA2C;AAEpC,MAAM,eAAe,GAAG,KAAK,EAClC,KAAY,EACZ,cAAkC,EACnB,EAAE;IACjB,IAAI;QACF,qEAAqE;QACrE,sDAAsD;QAEtD,yCAAyC;QACzC,6EAA6E;QAE7E,MAAM,MAAM,GAAG,IAAA,kBAAS,GAAE,CAAC;QAC3B,MAAM,MAAM,CAAC,mBAAmB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;KACzD;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAA,8BAAsB,EAAC,uBAAe,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KACzD;AACH,CAAC,CAAC;AAhBW,QAAA,eAAe,mBAgB1B;AAEK,MAAM,mCAAmC,GAAG,KAAK,EACtD,KAAY,EACZ,cAAkC,EACnB,EAAE;IACjB,IAAI;QACF,MAAM,MAAM,GAAG,IAAA,kBAAS,GAAE,CAAC;QAC3B,MAAM,MAAM,CAAC,mCAAmC,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;QAExE,qEAAqE;QACrE,sDAAsD;KACvD;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAA,8BAAsB,EAAC,2CAAmC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KAC7E;AACH,CAAC,CAAC;AAbW,QAAA,mCAAmC,uCAa9C;AAEK,MAAM,0BAA0B,GAAG,KAAK,EAC7C,KAAY,EACG,EAAE;IACjB,IAAI;QACF,MAAM,MAAM,GAAG,IAAA,kBAAS,GAAE,CAAC;QAC3B,MAAM,MAAM,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC;KAChD;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAA,8BAAsB,EAAC,kCAA0B,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KACpE;AACH,CAAC,CAAC;AATW,QAAA,0BAA0B,8BASrC","sourcesContent":["import { Chain } from '@railgun-community/engine';\nimport { TXIDVersion } from '@railgun-community/shared-models';\nimport { reportAndSanitizeError } from '../../../utils/error';\nimport { getEngine } from '../core/engine';\n\nexport const refreshBalances = async (\n  chain: Chain,\n  walletIdFilter: Optional<string[]>,\n): Promise<void> => {\n  try {\n    // Wallet will trigger .emit('scanned', {chain}) event when finished,\n    // which calls `onBalancesUpdate` (balance-update.ts).\n\n    // Kick off a background merkletree scan.\n    // This will call wallet.scanBalances when it's done, but may take some time.\n\n    const engine = getEngine();\n    await engine.scanContractHistory(chain, walletIdFilter);\n  } catch (err) {\n    throw reportAndSanitizeError(refreshBalances.name, err);\n  }\n};\n\nexport const rescanFullUTXOMerkletreesAndWallets = async (\n  chain: Chain,\n  walletIdFilter: Optional<string[]>,\n): Promise<void> => {\n  try {\n    const engine = getEngine();\n    await engine.fullRescanUTXOMerkletreesAndWallets(chain, walletIdFilter);\n\n    // Wallet will trigger .emit('scanned', {chain}) event when finished,\n    // which calls `onBalancesUpdate` (balance-update.ts).\n  } catch (err) {\n    throw reportAndSanitizeError(rescanFullUTXOMerkletreesAndWallets.name, err);\n  }\n};\n\nexport const resetFullTXIDMerkletreesV2 = async (\n  chain: Chain,\n): Promise<void> => {\n  try {\n    const engine = getEngine();\n    await engine.fullResetTXIDMerkletreesV2(chain);\n  } catch (err) {\n    throw reportAndSanitizeError(resetFullTXIDMerkletreesV2.name, err);\n  }\n};\n"]}