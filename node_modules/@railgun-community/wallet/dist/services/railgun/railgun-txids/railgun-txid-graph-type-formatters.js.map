{"version":3,"file":"railgun-txid-graph-type-formatters.js","sourceRoot":"","sources":["../../../../src/services/railgun/railgun-txids/railgun-txid-graph-type-formatters.ts"],"names":[],"mappings":";;;AAAA,sDAKmC;AAEnC,mCAAoC;AACpC,uEAAkF;AAK3E,MAAM,yBAAyB,GAAG,CACvC,GAA6B,EACL,EAAE;IAC1B,OAAO,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;QAClB,MAAM,QAAQ,GAAqC,EAAE,CAAC,WAAW;YAC/D,CAAC,CAAC;gBACE,SAAS,EAAE;oBACT,SAAS,EAAE,IAAA,mDAA+B,EACxC,EAAE,CAAC,aAAa,CAAC,SAAS,CAC3B;oBACD,YAAY,EAAE,IAAA,mBAAU,EAAC,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC;oBACvD,UAAU,EAAE,EAAE,CAAC,aAAa,CAAC,UAAU;iBACxC;gBACD,SAAS,EAAE,EAAE,CAAC,iBAAiB;gBAC/B,KAAK,EAAE,EAAE,CAAC,aAAa;aACxB;YACH,CAAC,CAAC,SAAS,CAAC;QAEd,MAAM,kBAAkB,GAAyB;YAC/C,OAAO,EAAE,kCAAyB,CAAC,EAAE;YACrC,OAAO,EAAE,EAAE,CAAC,EAAE;YACd,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAC3C,kBAAS,CAAC,kBAAkB,CAAC,UAAU,EAAE,mBAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CACpE;YACD,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CACxC,kBAAS,CAAC,kBAAkB,CAAC,SAAS,EAAE,mBAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CACnE;YACD,eAAe,EAAE,kBAAS,CAAC,kBAAkB,CAC3C,EAAE,CAAC,eAAe,EAClB,mBAAU,CAAC,QAAQ,EACnB,IAAI,CACL;YACD,WAAW,EAAE,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC;YACnC,SAAS,EAAE,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC;YACpC,UAAU,EAAE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC;YACjC,WAAW,EAAE,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC;YACnC,yBAAyB,EAAE,MAAM,CAAC,EAAE,CAAC,yBAAyB,CAAC;YAC/D,IAAI,EAAE,kBAAS,CAAC,kBAAkB,CAChC,EAAE,CAAC,eAAe,EAClB,mBAAU,CAAC,QAAQ,EACnB,KAAK,CACN;YACD,QAAQ;YACR,gBAAgB,EAAE,kBAAS,CAAC,kBAAkB,CAC5C,EAAE,CAAC,gBAAgB,EACnB,mBAAU,CAAC,QAAQ,EACnB,IAAI,CACL;SACF,CAAC;QACF,OAAO,kBAAkB,CAAC;IAC5B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAnDW,QAAA,yBAAyB,6BAmDpC","sourcesContent":["import {\n  ByteLength,\n  RailgunTransactionV2,\n  RailgunTransactionVersion,\n  ByteUtils,\n} from '@railgun-community/engine';\nimport { GetRailgunTransactionsAfterGraphIDQuery } from './graphql';\nimport { getAddress } from 'ethers';\nimport { graphTokenTypeToEngineTokenType } from '../quick-sync/shared-formatters';\n\nexport type GraphRailgunTransactions =\n  GetRailgunTransactionsAfterGraphIDQuery['transactions'];\n\nexport const formatRailgunTransactions = (\n  txs: GraphRailgunTransactions,\n): RailgunTransactionV2[] => {\n  return txs.map(tx => {\n    const unshield: RailgunTransactionV2['unshield'] = tx.hasUnshield\n      ? {\n          tokenData: {\n            tokenType: graphTokenTypeToEngineTokenType(\n              tx.unshieldToken.tokenType,\n            ),\n            tokenAddress: getAddress(tx.unshieldToken.tokenAddress),\n            tokenSubID: tx.unshieldToken.tokenSubID,\n          },\n          toAddress: tx.unshieldToAddress,\n          value: tx.unshieldValue,\n        }\n      : undefined;\n\n    const railgunTransaction: RailgunTransactionV2 = {\n      version: RailgunTransactionVersion.V2,\n      graphID: tx.id,\n      commitments: tx.commitments.map(commitment =>\n        ByteUtils.formatToByteLength(commitment, ByteLength.UINT_256, true),\n      ),\n      nullifiers: tx.nullifiers.map(nullifier =>\n        ByteUtils.formatToByteLength(nullifier, ByteLength.UINT_256, true),\n      ),\n      boundParamsHash: ByteUtils.formatToByteLength(\n        tx.boundParamsHash,\n        ByteLength.UINT_256,\n        true,\n      ),\n      blockNumber: Number(tx.blockNumber),\n      timestamp: Number(tx.blockTimestamp),\n      utxoTreeIn: Number(tx.utxoTreeIn),\n      utxoTreeOut: Number(tx.utxoTreeOut),\n      utxoBatchStartPositionOut: Number(tx.utxoBatchStartPositionOut),\n      txid: ByteUtils.formatToByteLength(\n        tx.transactionHash,\n        ByteLength.UINT_256,\n        false,\n      ),\n      unshield,\n      verificationHash: ByteUtils.formatToByteLength(\n        tx.verificationHash,\n        ByteLength.UINT_256,\n        true,\n      ),\n    };\n    return railgunTransaction;\n  });\n};\n"]}