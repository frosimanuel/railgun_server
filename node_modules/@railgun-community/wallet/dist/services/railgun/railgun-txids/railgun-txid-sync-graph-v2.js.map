{"version":3,"file":"railgun-txid-sync-graph-v2.js","sourceRoot":"","sources":["../../../../src/services/railgun/railgun-txids/railgun-txid-sync-graph-v2.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Chain,\n  RailgunTransaction,\n  RailgunTransactionV2,\n  getRailgunTransactionIDHex,\n} from '@railgun-community/engine';\nimport {\n  NetworkName,\n  delay,\n  isDefined,\n  networkForChain,\n  promiseTimeout,\n} from '@railgun-community/shared-models';\nimport { getMeshOptions, getSdk } from './graphql';\nimport { MeshInstance, getMesh } from '@graphql-mesh/runtime';\nimport {\n  GraphRailgunTransactions,\n  formatRailgunTransactions,\n} from './railgun-txid-graph-type-formatters';\nimport { removeDuplicatesByID } from '../util/graph-util';\n\nconst meshes: MapType<MeshInstance> = {};\n\nconst MAX_QUERY_RESULTS = 5000;\n\nconst txsSubgraphSourceNameForNetwork = (networkName: NetworkName): string => {\n  switch (networkName) {\n    case NetworkName.Ethereum:\n      return 'txs-ethereum';\n    case NetworkName.EthereumSepolia:\n      return 'txs-sepolia';\n    case NetworkName.BNBChain:\n      return 'txs-bsc';\n    case NetworkName.Arbitrum:\n      return 'txs-arbitrum';\n    case NetworkName.Polygon:\n      return 'txs-matic';\n    case NetworkName.PolygonAmoy:\n    case NetworkName.PolygonMumbai_DEPRECATED:\n    case NetworkName.ArbitrumGoerli_DEPRECATED:\n    case NetworkName.EthereumGoerli_DEPRECATED:\n    case NetworkName.EthereumRopsten_DEPRECATED:\n    case NetworkName.Hardhat:\n    default:\n      throw new Error('No railgun-transaction subsquid for this network');\n  }\n};\n\nexport const getRailgunTxDataForUnshields = async (\n  chain: Chain,\n  txid: string,\n): Promise<\n  {\n    railgunTransaction: RailgunTransactionV2;\n    railgunTxid: string;\n  }[]\n> => {\n  const network = networkForChain(chain);\n  if (!network) {\n    return [];\n  }\n\n  const sdk = getBuiltGraphSDK(network.name);\n\n  const transactions: GraphRailgunTransactions = (\n    await sdk.GetRailgunTransactionsByTxid({ txid })\n  ).transactions;\n\n  const railgunTxidsForUnshields: {\n    railgunTransaction: RailgunTransactionV2;\n    railgunTxid: string;\n  }[] = transactions\n    .filter(transaction => transaction.hasUnshield)\n    .map(transaction => {\n      const railgunTransaction = formatRailgunTransactions([transaction])[0];\n      const railgunTxid = getRailgunTransactionIDHex(transaction);\n      return { railgunTxid, railgunTransaction };\n    });\n\n  return railgunTxidsForUnshields;\n};\n\nexport const getRailgunTxidsForUnshields = async (\n  chain: Chain,\n  txid: string,\n): Promise<string[]> => {\n  const network = networkForChain(chain);\n  if (!network) {\n    return [];\n  }\n\n  const sdk = getBuiltGraphSDK(network.name);\n\n  const transactions: GraphRailgunTransactions = (\n    await sdk.GetRailgunTransactionsByTxid({ txid })\n  ).transactions;\n\n  const railgunTxidsForUnshields: string[] = transactions\n    .filter(transaction => transaction.hasUnshield)\n    .map(transaction => {\n      const railgunTxid = getRailgunTransactionIDHex(transaction);\n      return railgunTxid;\n    });\n\n  return railgunTxidsForUnshields;\n};\n\nexport const getRailgunTransactionDataForUnshieldToAddress = async (\n  chain: Chain,\n  unshieldToAddress: string,\n): Promise<\n  {\n    txid: string;\n    transactionDatas: {\n      railgunTransaction: RailgunTransactionV2;\n      railgunTxid: string;\n    }[];\n  }[]\n> => {\n  const network = networkForChain(chain);\n  if (!network) {\n    return [];\n  }\n\n  const sdk = getBuiltGraphSDK(network.name);\n\n  const transactions: GraphRailgunTransactions = (\n    await sdk.GetRailgunTransactionsByUnshieldToAddress({\n      address: unshieldToAddress,\n    })\n  ).transactions;\n  const uniqueTxidMap = new Map<string, string[]>();\n  const railgunTxidToTransactionMap = new Map<string, RailgunTransactionV2>();\n\n  transactions\n    .filter(transaction => transaction.hasUnshield)\n    .forEach(transaction => {\n      const railgunTxid = getRailgunTransactionIDHex(transaction);\n      railgunTxidToTransactionMap.set(\n        railgunTxid,\n        formatRailgunTransactions([transaction])[0],\n      );\n      if (uniqueTxidMap.has(transaction.transactionHash)) {\n        const railgunTxids = uniqueTxidMap.get(\n          transaction.transactionHash,\n        ) as string[];\n        railgunTxids.push(railgunTxid);\n        uniqueTxidMap.set(transaction.transactionHash, railgunTxids);\n      } else {\n        uniqueTxidMap.set(transaction.transactionHash, [railgunTxid]);\n      }\n    });\n  const railgunTxidsForUnshields: {\n    txid: string;\n    transactionDatas: {\n      railgunTransaction: RailgunTransactionV2;\n      railgunTxid: string;\n    }[];\n  }[] = [];\n  uniqueTxidMap.forEach((railgunTxids, txid) => {\n    railgunTxidsForUnshields.push({\n      txid,\n      transactionDatas: railgunTxids.map(railgunTxid => {\n        const railgunTransaction = railgunTxidToTransactionMap.get(railgunTxid);\n        if (!railgunTransaction) {\n          throw new Error(\n            `Could not find railgun transaction for txid ${txid}`,\n          );\n        }\n        return { railgunTransaction, railgunTxid };\n      }),\n    });\n  });\n\n  return railgunTxidsForUnshields;\n};\n\nexport const getRailgunTransactionsForTxid = async (\n  chain: Chain,\n  txid: string,\n): Promise<RailgunTransaction[]> => {\n  const network = networkForChain(chain);\n  if (!network) {\n    return [];\n  }\n\n  const sdk = getBuiltGraphSDK(network.name);\n\n  const railgunTransactions: GraphRailgunTransactions = (\n    await sdk.GetRailgunTransactionsByTxid({ txid })\n  ).transactions;\n\n  const filteredRailgunTransactions: GraphRailgunTransactions =\n    removeDuplicatesByID(railgunTransactions);\n\n  const formattedRailgunTransactions: RailgunTransaction[] =\n    formatRailgunTransactions(filteredRailgunTransactions);\n\n  return formattedRailgunTransactions;\n};\n\nexport const quickSyncRailgunTransactionsV2 = async (\n  chain: Chain,\n  latestGraphID: Optional<string>,\n): Promise<RailgunTransactionV2[]> => {\n  const network = networkForChain(chain);\n  if (!network || !isDefined(network.poi)) {\n    return [];\n  }\n\n  const sdk = getBuiltGraphSDK(network.name);\n\n  const railgunTransactions: GraphRailgunTransactions =\n    await autoPaginatingQuery(\n      async (id: string) =>\n        (\n          await sdk.GetRailgunTransactionsAfterGraphID({\n            idLow: id,\n          })\n        ).transactions,\n      latestGraphID ?? '0x00',\n    );\n\n  const filteredRailgunTransactions: GraphRailgunTransactions =\n    removeDuplicatesByID(railgunTransactions);\n\n  const formattedRailgunTransactions: RailgunTransactionV2[] =\n    formatRailgunTransactions(filteredRailgunTransactions);\n\n  return formattedRailgunTransactions;\n};\n\nconst autoPaginatingQuery = async <ReturnType extends { id: string }>(\n  query: (id: string) => Promise<ReturnType[]>,\n  id: string,\n  prevResults: ReturnType[] = [],\n): Promise<ReturnType[]> => {\n  const newResults = await promiseTimeout(\n    query(id),\n    20000,\n    new Error('Timeout querying Graph for QuickSync of RAILGUN-TXID Events'),\n  );\n  if (newResults.length === 0) {\n    return prevResults;\n  }\n\n  const totalResults = prevResults.concat(newResults);\n\n  const overLimit = totalResults.length >= MAX_QUERY_RESULTS;\n  const lastResult = totalResults[totalResults.length - 1];\n\n  const shouldQueryMore = newResults.length === 5000;\n  // console.log(\"SHOULD QUERY MORE\", shouldQueryMore, \"OVER LIMIT\", overLimit, \"TOTAL RESULTS\", totalResults.length)\n  if (!overLimit && shouldQueryMore) {\n    await delay(250);\n    return autoPaginatingQuery(query, lastResult.id, totalResults);\n  }\n\n  return totalResults;\n};\n\nconst getBuiltGraphClient = async (\n  networkName: NetworkName,\n): Promise<MeshInstance> => {\n  const meshForNetwork = meshes[networkName];\n  if (isDefined(meshForNetwork)) {\n    return meshForNetwork;\n  }\n  const sourceName = txsSubgraphSourceNameForNetwork(networkName);\n  const meshOptions = await getMeshOptions();\n  const filteredSources = meshOptions.sources.filter(source => {\n    return source.name === sourceName;\n  });\n  if (filteredSources.length !== 1) {\n    throw new Error(\n      `Expected exactly one source for network ${networkName}, found ${filteredSources.length}`,\n    );\n  }\n  meshOptions.sources = [filteredSources[0]];\n\n  try {\n    const mesh = await getMesh(meshOptions);\n    meshes[networkName] = mesh;\n    const id = mesh.pubsub.subscribe('destroy', () => {\n      meshes[networkName] = undefined;\n      mesh.pubsub.unsubscribe(id);\n    });\n    return mesh;\n  } catch (cause) {\n    throw new Error(\n      `ERROR getting mesh - if error includes \"can't generate schema,\" make sure to check the filepaths for source schema imports in the built index file`,\n      { cause },\n    );\n  }\n};\n\nconst getBuiltGraphSDK = <TGlobalContext, TOperationContext>(\n  networkName: NetworkName,\n  globalContext?: TGlobalContext,\n) => {\n  const sdkRequester$ = getBuiltGraphClient(networkName).then(\n    ({ sdkRequesterFactory }) => sdkRequesterFactory(globalContext),\n  );\n  return getSdk<TOperationContext, TGlobalContext>((...args) =>\n    sdkRequester$.then(sdkRequester => sdkRequester(...args)),\n  );\n};\n"]}