{"version":3,"file":"providers.test.js","sourceRoot":"","sources":["../../../../../src/services/railgun/core/__tests__/providers.test.ts"],"names":[],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport {\n  NetworkName,\n  FallbackProviderJsonConfig,\n  isDefined,\n  NETWORK_CONFIG,\n} from '@railgun-community/shared-models';\nimport {\n  MOCK_DB_ENCRYPTION_KEY,\n  MOCK_FALLBACK_PROVIDER_JSON_CONFIG_SEPOLIA,\n} from '../../../../tests/mocks.test';\nimport { closeTestEngine, initTestEngine } from '../../../../tests/setup.test';\nimport { getFallbackProviderForNetwork } from '../providers';\nimport { loadProvider } from '../load-provider';\nimport { createRailgunWallet, walletForID } from '../../wallets/wallets';\nimport {\n  getUTXOMerkletreeForNetwork,\n  getTXIDMerkletreeForNetwork,\n} from '../merkletree';\nimport {\n  RailgunVersionedSmartContracts,\n  RelayAdaptVersionedSmartContracts,\n} from '@railgun-community/engine';\nimport { getTestTXIDVersion, isV2Test } from '../../../../tests/helper.test';\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\nconst MOCK_MNEMONIC_PROVIDERS_ONLY =\n  'pause crystal tornado alcohol genre cement fade large song like bag where';\n\nconst txidVersion = getTestTXIDVersion();\n\ndescribe('providers', () => {\n  before(async () => {\n    await closeTestEngine();\n    await initTestEngine();\n  });\n  after(async () => {\n    await closeTestEngine();\n  });\n\n  it('Should load provider with json, pull fees, and check created objects', async () => {\n    const response = await loadProvider(\n      MOCK_FALLBACK_PROVIDER_JSON_CONFIG_SEPOLIA,\n      NetworkName.EthereumSepolia,\n      10_000, // pollingInterval\n    );\n    expect(response.feesSerialized).to.deep.equal({\n      shieldFeeV2: '25',\n      unshieldFeeV2: '25',\n      shieldFeeV3: undefined,\n      unshieldFeeV3: undefined,\n    });\n\n    expect(getFallbackProviderForNetwork(NetworkName.EthereumSepolia)).to.not.be\n      .undefined;\n    expect(() =>\n      getFallbackProviderForNetwork(NetworkName.EthereumRopsten_DEPRECATED),\n    ).to.throw;\n\n    expect(getUTXOMerkletreeForNetwork(txidVersion, NetworkName.EthereumSepolia))\n      .to.not.be.undefined;\n    expect(() =>\n      getUTXOMerkletreeForNetwork(\n        txidVersion,\n        NetworkName.EthereumRopsten_DEPRECATED,\n      ),\n    ).to.throw;\n\n    // expect(getTXIDMerkletreeForNetwork(txidVersion, NetworkName.EthereumSepolia))\n    //   .to.be.undefined; // Until poi.launchBlock is defined.\n    expect(() =>\n      getTXIDMerkletreeForNetwork(\n        txidVersion,\n        NetworkName.EthereumRopsten_DEPRECATED,\n      ),\n    ).to.throw;\n\n    const { chain } = NETWORK_CONFIG[NetworkName.EthereumSepolia];\n    expect(\n      RailgunVersionedSmartContracts.getShieldApprovalContract(\n        txidVersion,\n        chain,\n      ),\n    ).to.not.be.undefined;\n\n    if (isV2Test()) {\n      // TODO-V3: Remove when ready\n      expect(\n        RelayAdaptVersionedSmartContracts.getRelayAdaptContract(\n          txidVersion,\n          chain,\n        ),\n      ).to.not.be.undefined;\n    }\n\n    const { chain: chainEthereumRopsten } =\n      NETWORK_CONFIG[NetworkName.EthereumRopsten_DEPRECATED];\n    expect(() =>\n      RelayAdaptVersionedSmartContracts.getRelayAdaptContract(\n        txidVersion,\n        chainEthereumRopsten,\n      ),\n    ).to.throw;\n\n    // Check that new wallet has merkletree.\n    const railgunWalletInfo = await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC_PROVIDERS_ONLY,\n      undefined, // creationBlockNumbers\n    );\n    if (!isDefined(railgunWalletInfo)) {\n      throw new Error('Expected railgunWalletInfo.');\n    }\n    const wallet = walletForID(railgunWalletInfo.id);\n    expect(\n      wallet.getUTXOMerkletree(\n        txidVersion,\n        NETWORK_CONFIG[NetworkName.EthereumSepolia].chain,\n      ),\n    ).to.not.be.undefined;\n  }).timeout(15_000);\n\n  it('Should fail with invalid chain ID', async () => {\n    await expect(\n      loadProvider(\n        { chainId: 55 } as FallbackProviderJsonConfig,\n        NetworkName.BNBChain,\n        10000, // pollingInterval\n      ),\n    ).rejectedWith('Invalid chain ID');\n  });\n\n  it('Should fail with invalid json', async () => {\n    await expect(\n      loadProvider(\n        { chainId: 56 } as FallbackProviderJsonConfig,\n        NetworkName.BNBChain,\n        10000, // pollingInterval\n      ),\n    ).rejectedWith('Invalid fallback provider config for chain 56');\n  });\n});\n"]}