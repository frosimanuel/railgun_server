{"version":3,"file":"merkletree.js","sourceRoot":"","sources":["../../../../src/services/railgun/core/merkletree.ts"],"names":[],"mappings":";;;AAAA,oEAK0C;AAC1C,sDAKmC;AACnC,qCAAqC;AACrC,gDAAiD;AAE1C,MAAM,2BAA2B,GAAG,CACzC,WAAwB,EACxB,WAAwB,EACxB,EAAE;IACF,MAAM,OAAO,GAAG,8BAAc,CAAC,WAAW,CAAC,CAAC;IAC5C,MAAM,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC;IAC1B,MAAM,cAAc,GAAG,IAAA,kBAAS,GAAE,CAAC,iBAAiB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IACzE,IAAI,CAAC,IAAA,yBAAS,EAAC,cAAc,CAAC,EAAE;QAC9B,MAAM,IAAI,KAAK,CACb,yCAAyC,OAAO,CAAC,UAAU,EAAE,CAC9D,CAAC;KACH;IACD,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AAbW,QAAA,2BAA2B,+BAatC;AAEK,MAAM,2BAA2B,GAAG,CACzC,WAAwB,EACxB,WAAwB,EACxB,EAAE;IACF,MAAM,OAAO,GAAG,8BAAc,CAAC,WAAW,CAAC,CAAC;IAC5C,MAAM,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC;IAC1B,MAAM,cAAc,GAAG,IAAA,kBAAS,GAAE,CAAC,iBAAiB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IACzE,IAAI,CAAC,IAAA,yBAAS,EAAC,cAAc,CAAC,EAAE;QAC9B,MAAM,IAAI,KAAK,CACb,yCAAyC,OAAO,CAAC,UAAU,EAAE,CAC9D,CAAC;KACH;IACD,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AAbW,QAAA,2BAA2B,+BAatC;AAEK,MAAM,yBAAyB,GAAG,KAAK,EAC5C,WAAwB,EACxB,WAAwB,EACxB,QAAgB,EAChB,SAAoB,EACM,EAAE;IAC5B,MAAM,MAAM,GAAG,IAAA,qBAAW,EAAC,QAAQ,CAAC,CAAC;IACrC,MAAM,KAAK,GAAG,8BAAc,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;IAChD,MAAM,aAAa,GAAG,IAAI,CAAC;IAC3B,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAC5C,WAAW,EACX,KAAK,EACL,aAAa,CACd,CAAC;IACF,MAAM,SAAS,GAAG,IAAA,yBAAgB,EAAC,SAAS,CAAC,CAAC;IAC9C,OAAO,QAAQ,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC;AACpC,CAAC,CAAC;AAhBW,QAAA,yBAAyB,6BAgBpC;AAEK,MAAM,uBAAuB,GAAG,KAAK,EAC1C,WAAwB,EACxB,WAAwB,EACxB,QAAgB,EAChB,YAA0B,EAC1B,EAAE;IACF,MAAM,KAAK,GAAG,MAAM,IAAA,iCAAyB,EAC3C,WAAW,EACX,WAAW,EACX,QAAQ,EACR,YAAY,CACb,CAAC;IACF,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;QAC3B,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;KACrD;IACD,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC5C;IAED,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACpC,MAAM,cAAc,GAAG,IAAA,mCAA2B,EAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IAC7E,OAAO,cAAc,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACvD,CAAC,CAAC;AAtBW,QAAA,uBAAuB,2BAsBlC","sourcesContent":["import {\n  NETWORK_CONFIG,\n  NetworkName,\n  TXIDVersion,\n  isDefined,\n} from '@railgun-community/shared-models';\nimport {\n  NFTTokenData,\n  TXO,\n  TokenData,\n  getTokenDataHash,\n} from '@railgun-community/engine';\nimport { getEngine } from './engine';\nimport { walletForID } from '../wallets/wallets';\n\nexport const getUTXOMerkletreeForNetwork = (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n) => {\n  const network = NETWORK_CONFIG[networkName];\n  const { chain } = network;\n  const utxoMerkletree = getEngine().getUTXOMerkletree(txidVersion, chain);\n  if (!isDefined(utxoMerkletree)) {\n    throw new Error(\n      `MerkleTree not yet loaded for network ${network.publicName}`,\n    );\n  }\n  return utxoMerkletree;\n};\n\nexport const getTXIDMerkletreeForNetwork = (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n) => {\n  const network = NETWORK_CONFIG[networkName];\n  const { chain } = network;\n  const txidMerkletree = getEngine().getTXIDMerkletree(txidVersion, chain);\n  if (!isDefined(txidMerkletree)) {\n    throw new Error(\n      `MerkleTree not yet loaded for network ${network.publicName}`,\n    );\n  }\n  return txidMerkletree;\n};\n\nexport const getSpendableUTXOsForToken = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  walletID: string,\n  tokenData: TokenData,\n): Promise<Optional<TXO[]>> => {\n  const wallet = walletForID(walletID);\n  const chain = NETWORK_CONFIG[networkName].chain;\n  const onlySpendable = true;\n  const balances = await wallet.getTokenBalances(\n    txidVersion,\n    chain,\n    onlySpendable,\n  );\n  const tokenHash = getTokenDataHash(tokenData);\n  return balances[tokenHash]?.utxos;\n};\n\nexport const getMerkleProofForERC721 = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  walletID: string,\n  nftTokenData: NFTTokenData,\n) => {\n  const utxos = await getSpendableUTXOsForToken(\n    txidVersion,\n    networkName,\n    walletID,\n    nftTokenData,\n  );\n  if (!utxos || !utxos.length) {\n    throw new Error('No spendable UTXOs found for NFT');\n  }\n  if (utxos.length !== 1) {\n    throw new Error('Expected 1 UTXO for NFT');\n  }\n\n  const { tree, position } = utxos[0];\n  const utxoMerkletree = getUTXOMerkletreeForNetwork(txidVersion, networkName);\n  return utxoMerkletree.getMerkleProof(tree, position);\n};\n"]}