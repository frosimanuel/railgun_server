{"version":3,"file":"init.js","sourceRoot":"","sources":["../../../../src/services/railgun/core/init.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AbstractLevelDOWN } from 'abstract-leveldown';\nimport {\n  RailgunEngine,\n  EngineEvent,\n  MerkletreeHistoryScanEventData,\n  POIList,\n  POIListType,\n  UTXOScanDecryptBalancesCompleteEventData,\n  AbstractWallet,\n  POIMerklerootsValidator,\n} from '@railgun-community/engine';\nimport {\n  MerkletreeScanUpdateEvent,\n  isDefined,\n  type Chain,\n} from '@railgun-community/shared-models';\nimport { sendErrorMessage, sendMessage } from '../../../utils/logger';\nimport {\n  artifactGetterDownloadJustInTime,\n  setArtifactStore,\n  setUseNativeArtifacts,\n} from './artifacts';\nimport { ArtifactStore } from '../../artifacts/artifact-store';\nimport { reportAndSanitizeError } from '../../../utils/error';\nimport { quickSyncEventsGraph } from '../quick-sync/quick-sync-events';\nimport { quickSyncRailgunTransactionsV2 } from '../railgun-txids/railgun-txid-sync-graph-v2';\nimport { WalletPOI } from '../../poi/wallet-poi';\nimport {\n  WalletPOINodeInterface,\n  type BatchListUpdateEvent,\n} from '../../poi/wallet-poi-node-interface';\nimport { setEngine, getEngine, hasEngine } from './engine';\nimport { onBalancesUpdate } from '../wallets/balance-update';\nimport { POIValidator } from '../../poi';\n\nexport { type BatchListUpdateEvent } from '../../poi/wallet-poi-node-interface';\n\nexport type EngineDebugger = {\n  log: (msg: string) => void;\n  error: (error: Error) => void;\n  verboseScanLogging: boolean;\n};\n\nconst createEngineDebugger = (verboseScanLogging: boolean): EngineDebugger => {\n  return {\n    log: (msg: string) => sendMessage(msg),\n    error: (error: Error) => sendErrorMessage(error),\n    verboseScanLogging,\n  };\n};\n\nexport const setOnUTXOMerkletreeScanCallback = (\n  onUTXOMerkletreeScanCallback: (scanData: MerkletreeScanUpdateEvent) => void,\n) => {\n  const engine = getEngine();\n  engine.on(\n    EngineEvent.UTXOMerkletreeHistoryScanUpdate,\n    ({ chain, scanStatus, progress }: MerkletreeHistoryScanEventData) =>\n      onUTXOMerkletreeScanCallback({\n        scanStatus,\n        chain,\n        progress: progress ?? 0.0,\n      }),\n  );\n};\n\nexport const setOnTXIDMerkletreeScanCallback = (\n  onTXIDMerkletreeScanCallback: (scanData: MerkletreeScanUpdateEvent) => void,\n) => {\n  const engine = getEngine();\n  engine.on(\n    EngineEvent.TXIDMerkletreeHistoryScanUpdate,\n    ({ chain, scanStatus, progress }: MerkletreeHistoryScanEventData) =>\n      onTXIDMerkletreeScanCallback({\n        scanStatus,\n        chain,\n        progress: progress ?? 0.0,\n      }),\n  );\n};\n\nconst setOnUTXOScanDecryptBalancesCompleteListener = () => {\n  const engine = getEngine();\n  engine.on(\n    EngineEvent.UTXOScanDecryptBalancesComplete,\n    ({\n      txidVersion,\n      chain,\n      walletIdFilter,\n    }: UTXOScanDecryptBalancesCompleteEventData) => {\n      const updateWalletBalances = async () => {\n        let walletsToUpdate: AbstractWallet[] = Object.values(engine.wallets);\n        if (isDefined(walletIdFilter)) {\n          walletsToUpdate = walletsToUpdate.filter(wallet =>\n            walletIdFilter.includes(wallet.id),\n          );\n        }\n\n        // await onBalancesUpdate calls for each wallet\n        await Promise.all(\n          walletsToUpdate.map(wallet =>\n            onBalancesUpdate(txidVersion, wallet, chain),\n          ),\n        );\n\n        // emit event to notify listeners that UTXOMerkletreeHistoryScan is complete\n        engine.emitScanEventHistoryComplete(txidVersion, chain);\n      };\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      updateWalletBalances();\n    },\n  );\n};\n\nexport const setBatchListCallback = (\n  onBatchListCallback: (callbackData: BatchListUpdateEvent) => void,\n) => {\n  WalletPOINodeInterface.setListBatchCallback(onBatchListCallback);\n};\n\nexport const pausePPOIBatchingForChain = (chain: Chain) => {\n  WalletPOINodeInterface.pause(chain);\n};\n\nexport const resumePPOIBatching = (chain: Chain) => {\n  WalletPOINodeInterface.unpause(chain);\n};\n\n/**\n *\n * @param walletSource - Name for your wallet implementation. Encrypted and viewable in private transaction history. Maximum of 16 characters, lowercase.\n * @param db - LevelDOWN compatible database for storing encrypted wallets.\n * @param shouldDebug - Whether to forward Engine debug logs to Logger.\n * @param artifactStore - Persistent store for downloading large artifact files. See Wallet SDK Developer Guide for platform implementations.\n * @param useNativeArtifacts - Whether to download native C++ or web-assembly artifacts. TRUE for mobile. FALSE for nodejs and browser.\n * @param skipMerkletreeScans - Whether to skip merkletree syncs and private balance scans. Only set to TRUE in shield-only applications that don't load private wallets or balances.\n * @param poiNodeURLs - List of POI aggregator node URLs, in order of priority.\n * @param customPOILists - POI lists to use for additional wallet protections after default lists.\n * @returns\n */\nexport const startRailgunEngine = async (\n  walletSource: string,\n  db: AbstractLevelDOWN,\n  shouldDebug: boolean,\n  artifactStore: ArtifactStore,\n  useNativeArtifacts: boolean,\n  skipMerkletreeScans: boolean,\n  poiNodeURLs?: string[],\n  customPOILists?: POIList[],\n  verboseScanLogging = false,\n): Promise<void> => {\n  if (hasEngine()) {\n    return;\n  }\n  try {\n    setArtifactStore(artifactStore);\n    setUseNativeArtifacts(useNativeArtifacts);\n\n    const engine = await RailgunEngine.initForWallet(\n      walletSource,\n      db,\n      artifactGetterDownloadJustInTime,\n      quickSyncEventsGraph,\n      quickSyncRailgunTransactionsV2,\n      WalletPOI.getPOITxidMerklerootValidator(poiNodeURLs),\n      WalletPOI.getPOILatestValidatedRailgunTxid(poiNodeURLs),\n      shouldDebug ? createEngineDebugger(verboseScanLogging) : undefined,\n      skipMerkletreeScans,\n    );\n    setEngine(engine);\n\n    setOnUTXOScanDecryptBalancesCompleteListener();\n\n    if (isDefined(poiNodeURLs)) {\n      const poiNodeInterface = new WalletPOINodeInterface(poiNodeURLs);\n      WalletPOI.init(poiNodeInterface, customPOILists ?? []);\n    }\n  } catch (err) {\n    throw reportAndSanitizeError(startRailgunEngine.name, err);\n  }\n};\n\nexport const startRailgunEngineForPOINode = async (\n  db: AbstractLevelDOWN,\n  shouldDebug: boolean,\n  artifactStore: ArtifactStore,\n  validatePOIMerkleroots: POIMerklerootsValidator,\n): Promise<void> => {\n  if (hasEngine()) {\n    return;\n  }\n  try {\n    setArtifactStore(artifactStore);\n    setUseNativeArtifacts(false);\n\n    POIValidator.initForPOINode(validatePOIMerkleroots);\n\n    const engine = await RailgunEngine.initForPOINode(\n      db,\n      artifactGetterDownloadJustInTime,\n      quickSyncEventsGraph,\n      quickSyncRailgunTransactionsV2,\n      shouldDebug\n        ? createEngineDebugger(\n            false, // verboseScanLogging\n          )\n        : undefined,\n    );\n    setEngine(engine);\n  } catch (err) {\n    throw reportAndSanitizeError(startRailgunEngineForPOINode.name, err);\n  }\n};\n\nexport const stopRailgunEngine = async () => {\n  if (!hasEngine()) {\n    return;\n  }\n  await getEngine()?.unload();\n  setEngine(undefined);\n};\n\nexport { POIList, POIListType };\n"]}