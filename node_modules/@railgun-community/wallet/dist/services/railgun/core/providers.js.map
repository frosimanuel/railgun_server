{"version":3,"file":"providers.js","sourceRoot":"","sources":["../../../../src/services/railgun/core/providers.ts"],"names":[],"mappings":";;;AAAA,oEAA0E;AAI7D,QAAA,mBAAmB,GAA8B,EAAE,CAAC;AACpD,QAAA,kBAAkB,GAAoC,EAAE,CAAC;AAE/D,MAAM,6BAA6B,GAAG,CAC3C,WAAwB,EACN,EAAE;IACpB,MAAM,QAAQ,GAAG,2BAAmB,CAAC,WAAW,CAAC,CAAC;IAClD,IAAI,CAAC,IAAA,yBAAS,EAAC,QAAQ,CAAC,EAAE;QACxB,MAAM,IAAI,KAAK,CAAC,uCAAuC,WAAW,EAAE,CAAC,CAAC;KACvE;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AARW,QAAA,6BAA6B,iCAQxC;AAEK,MAAM,4BAA4B,GAAG,CAC1C,WAAwB,EACA,EAAE;IAC1B,MAAM,QAAQ,GAAG,0BAAkB,CAAC,WAAW,CAAC,CAAC;IACjD,IAAI,CAAC,IAAA,yBAAS,EAAC,QAAQ,CAAC,EAAE;QACxB,MAAM,IAAI,KAAK,CACb,+CAA+C,WAAW,EAAE,CAC7D,CAAC;KACH;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAVW,QAAA,4BAA4B,gCAUvC;AAEK,MAAM,6BAA6B,GAAG,CAC3C,WAAwB,EACxB,QAA0B,EACpB,EAAE;IACR,2BAAmB,CAAC,WAAW,CAAC,GAAG,QAAQ,CAAC;AAC9C,CAAC,CAAC;AALW,QAAA,6BAA6B,iCAKxC;AAEK,MAAM,4BAA4B,GAAG,CAC1C,WAAwB,EACxB,QAAgC,EAC1B,EAAE;IACR,0BAAkB,CAAC,WAAW,CAAC,GAAG,QAAQ,CAAC;AAC7C,CAAC,CAAC;AALW,QAAA,4BAA4B,gCAKvC","sourcesContent":["import { NetworkName, isDefined } from '@railgun-community/shared-models';\nimport { PollingJsonRpcProvider } from '@railgun-community/engine';\nimport { FallbackProvider } from 'ethers';\n\nexport const fallbackProviderMap: MapType<FallbackProvider> = {};\nexport const pollingProviderMap: MapType<PollingJsonRpcProvider> = {};\n\nexport const getFallbackProviderForNetwork = (\n  networkName: NetworkName,\n): FallbackProvider => {\n  const provider = fallbackProviderMap[networkName];\n  if (!isDefined(provider)) {\n    throw new Error(`Provider not yet loaded for network ${networkName}`);\n  }\n  return provider;\n};\n\nexport const getPollingProviderForNetwork = (\n  networkName: NetworkName,\n): PollingJsonRpcProvider => {\n  const provider = pollingProviderMap[networkName];\n  if (!isDefined(provider)) {\n    throw new Error(\n      `Polling provider not yet loaded for network ${networkName}`,\n    );\n  }\n  return provider;\n};\n\nexport const setFallbackProviderForNetwork = (\n  networkName: NetworkName,\n  provider: FallbackProvider,\n): void => {\n  fallbackProviderMap[networkName] = provider;\n};\n\nexport const setPollingProviderForNetwork = (\n  networkName: NetworkName,\n  provider: PollingJsonRpcProvider,\n): void => {\n  pollingProviderMap[networkName] = provider;\n};\n"]}