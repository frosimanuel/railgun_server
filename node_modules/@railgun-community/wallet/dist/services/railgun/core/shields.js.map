{"version":3,"file":"shields.js","sourceRoot":"","sources":["../../../../src/services/railgun/core/shields.ts"],"names":[],"mappings":";;;AAAA,oEAI0C;AAC1C,qCAAqC;AACrC,sDAAiE;AAY1D,MAAM,aAAa,GAAG,KAAK,EAChC,WAAwB,EACxB,aAAqB,EACE,EAAE;IACzB,MAAM,yBAAyB,GAAG,MAAM,OAAO,CAAC,GAAG,CACjD,6BAAoB,CAAC,GAAG,CAAC,KAAK,EAAC,WAAW,EAAC,EAAE;QAC3C,MAAM,OAAO,GAAG,MAAM,IAAA,gCAAwB,EAC5C,WAAW,EACX,WAAW,EACX,aAAa,CACd,CAAC;QAEF,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC,CACH,CAAC;IACF,OAAO,yBAAyB,CAAC,IAAI,EAAE,CAAC;AAC1C,CAAC,CAAC;AAhBW,QAAA,aAAa,iBAgBxB;AAEK,MAAM,wBAAwB,GAAG,KAAK,EAC3C,WAAwB,EACxB,WAAwB,EACxB,aAAqB,EACE,EAAE;IACzB,MAAM,MAAM,GAAG,IAAA,kBAAS,GAAE,CAAC;IAC3B,MAAM,EAAE,KAAK,EAAE,GAAG,8BAAc,CAAC,WAAW,CAAC,CAAC;IAC9C,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,uBAAuB,CAC5D,WAAW,EACX,KAAK,EACL,aAAa,CACd,CAAC;IAEF,OAAO,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;QACxC,MAAM,UAAU,GAAe;YAC7B,IAAI,EAAE,KAAK,UAAU,CAAC,IAAI,EAAE;YAC5B,cAAc,EAAE,KAAK,UAAU,CAAC,IAAI,EAAE;YACtC,GAAG,EAAE,KAAK,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE;YACnC,QAAQ,EAAE,UAAU,CAAC,QAAQ;YAC7B,SAAS,EAAE,UAAU,CAAC,SAAS;YAC/B,SAAS,EAAE,UAAU,CAAC,SAAS;YAC/B,WAAW,EAAE,UAAU,CAAC,WAAW;SACpC,CAAC;QACF,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAzBW,QAAA,wBAAwB,4BAyBnC","sourcesContent":["import {\n  NETWORK_CONFIG,\n  NetworkName,\n  TXIDVersion,\n} from '@railgun-community/shared-models';\nimport { getEngine } from './engine';\nimport { ACTIVE_TXID_VERSIONS } from '@railgun-community/engine';\n\nexport type ShieldData = {\n  txid: string;\n  commitmentHash: string;\n  npk: string;\n  timestamp: Optional<number>;\n  blockNumber: number;\n  utxoTree: number;\n  utxoIndex: number;\n};\n\nexport const getAllShields = async (\n  networkName: NetworkName,\n  startingBlock: number,\n): Promise<ShieldData[]> => {\n  const shieldsForEachTxidVersion = await Promise.all(\n    ACTIVE_TXID_VERSIONS.map(async txidVersion => {\n      const shields = await getShieldsForTXIDVersion(\n        txidVersion,\n        networkName,\n        startingBlock,\n      );\n\n      return shields;\n    }),\n  );\n  return shieldsForEachTxidVersion.flat();\n};\n\nexport const getShieldsForTXIDVersion = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  startingBlock: number,\n): Promise<ShieldData[]> => {\n  const engine = getEngine();\n  const { chain } = NETWORK_CONFIG[networkName];\n  const shieldCommitments = await engine.getAllShieldCommitments(\n    txidVersion,\n    chain,\n    startingBlock,\n  );\n\n  return shieldCommitments.map(commitment => {\n    const shieldData: ShieldData = {\n      txid: `0x${commitment.txid}`,\n      commitmentHash: `0x${commitment.hash}`,\n      npk: `0x${commitment.preImage.npk}`,\n      utxoTree: commitment.utxoTree,\n      utxoIndex: commitment.utxoIndex,\n      timestamp: commitment.timestamp,\n      blockNumber: commitment.blockNumber,\n    };\n    return shieldData;\n  });\n};\n"]}