{"version":3,"file":"crypto-util.test.js","sourceRoot":"","sources":["../../../../../src/services/railgun/util/__tests__/crypto-util.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAwB;AACxB,wEAA8C;AAC9C,mDAAqC;AACrC,sCAKmB;AACnB,oCAAsC;AAEtC,cAAI,CAAC,GAAG,CAAC,0BAAc,CAAC,CAAC;AACzB,MAAM,EAAE,MAAM,EAAE,GAAG,cAAI,CAAC;AAExB,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,UAAU,GAAG,EAAE,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;QAC/C,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACvD,MAAM,SAAS,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QACpD,MAAM,SAAS,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAElD,MAAM,YAAY,GAAG,MAAM,IAAA,mCAA0B,EACnD,SAAS,EACT,IAAI,EACJ,SAAS,CACV,CAAC;QACF,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QAEhC,MAAM,UAAU,GAAG,MAAM,IAAA,mCAA0B,EACjD,IAAA,kBAAU,EAAC,SAAS,CAAC,EACrB,IAAA,kBAAU,EAAC,IAAI,CAAC,EAChB,SAAS,CACV,CAAC;QACF,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;QAC5E,MAAM,UAAU,GAAG,EAAE,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;QAC/C,MAAM,cAAc,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QACzD,MAAM,IAAI,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;QAEzC,MAAM,EAAE,aAAa,EAAE,YAAY,EAAE,GAAG,MAAM,IAAA,iCAAwB,EACpE,IAAI,EACJ,cAAc,CACf,CAAC;QACF,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAEzC,MAAM,SAAS,GAAG,MAAM,EAAE,CAAC,eAAe,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QACrE,MAAM,SAAS,GAAG,IAAA,yBAAgB,EAAC,aAAa,EAAE,SAAS,CAAC,CAAC;QAE7D,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,IAAI,GAAG,MAAM,IAAA,eAAM,EAAC,QAAQ,EAAE,0BAA0B,EAAE,OAAO,CAAC,CAAC;QACzE,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CACnB,kEAAkE,CACnE,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport * as ed from '@noble/ed25519';\nimport {\n  decryptAESGCM256,\n  encryptDataWithSharedKey,\n  pbkdf2,\n  verifyBroadcasterSignature,\n} from '../crypto';\nimport { bytesToHex } from '../bytes';\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\ndescribe('crypto-util', () => {\n  it('Should verify signature', async () => {\n    const privateKey = ed.utils.randomPrivateKey();\n    const data = Uint8Array.from([0xab, 0xbc, 0xcd, 0xde]);\n    const publicKey = await ed.getPublicKey(privateKey);\n    const signature = await ed.sign(data, privateKey);\n\n    const isValidBytes = await verifyBroadcasterSignature(\n      signature,\n      data,\n      publicKey,\n    );\n    expect(isValidBytes).to.be.true;\n\n    const isValidHex = await verifyBroadcasterSignature(\n      bytesToHex(signature),\n      bytesToHex(data),\n      publicKey,\n    );\n    expect(isValidHex).to.be.true;\n  });\n\n  it('Should encrypt and decrypt data with shareable random pubkey', async () => {\n    const privateKey = ed.utils.randomPrivateKey();\n    const externalPubKey = await ed.getPublicKey(privateKey);\n    const data = { test: '123', value: 678 };\n\n    const { encryptedData, randomPubKey } = await encryptDataWithSharedKey(\n      data,\n      externalPubKey,\n    );\n    expect(randomPubKey.length).to.equal(64);\n\n    const sharedKey = await ed.getSharedSecret(privateKey, randomPubKey);\n    const decrypted = decryptAESGCM256(encryptedData, sharedKey);\n\n    expect(decrypted).to.deep.equal(data);\n  });\n\n  it('Should calculate PBKDF2 hash', async () => {\n    const hash = await pbkdf2('secret', '0c6c732c2b03dfb6cf5f5893', 1000000);\n    expect(hash).to.equal(\n      'ac0323bc154cc4b7ac0440eee6414356801faa198bb635d0b60441e3a043a706',\n    );\n  });\n});\n"]}