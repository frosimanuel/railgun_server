{"version":3,"file":"crypto.js","sourceRoot":"","sources":["../../../../src/services/railgun/util/crypto.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mDAAqC;AACrC,sDAQmC;AAkFjC,6GAxFA,qCAA4B,OAwFA;AAC5B,gHAxFA,wCAA+B,OAwFA;AAE/B,oGAzFA,4BAAmB,OAyFA;AAnFrB,mCAAyC;AACzC,+BAAiC;AACjC,mCAA8C;AAC9C,yDAAkE;AAClE,uCAA0C;AAEnC,MAAM,0BAA0B,GAAG,CACxC,SAA8B,EAC9B,IAAyB,EACzB,UAAsB,EACJ,EAAE;IACpB,OAAO,IAAA,sBAAa,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AACpD,CAAC,CAAC;AANW,QAAA,0BAA0B,8BAMrC;AAEK,MAAM,wBAAwB,GAAG,KAAK,EAC3C,IAAY,EACZ,cAA0B,EACiB,EAAE;IAC7C,MAAM,aAAa,GAAG,kBAAS,CAAC,gBAAgB,CAAC,IAAA,sBAAc,EAAC,EAAE,CAAC,CAAC,CAAC;IACrE,MAAM,sBAAsB,GAAG,MAAM,IAAA,4BAAmB,EAAC,aAAa,CAAC,CAAC;IACxE,MAAM,YAAY,GAAG,kBAAS,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;IAC/D,MAAM,SAAS,GAAG,MAAM,EAAE,CAAC,eAAe,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;IAC1E,MAAM,aAAa,GAAG,IAAA,qCAA4B,EAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACpE,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC;AACpD,CAAC,CAAC;AAVW,QAAA,wBAAwB,4BAUnC;AAEK,MAAM,gBAAgB,GAAG,CAC9B,aAA4B,EAC5B,SAAqB,EACN,EAAE;IACjB,OAAO,IAAA,wCAA+B,EAAC,aAAa,EAAE,SAAS,CAAC,CAAC;AACnE,CAAC,CAAC;AALW,QAAA,gBAAgB,oBAK3B;AAEK,MAAM,gBAAgB,GAAG,CAC9B,IAAY,EACZ,SAAqB,EACN,EAAE;IACjB,OAAO,IAAA,qCAA4B,EAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACvD,CAAC,CAAC;AALW,QAAA,gBAAgB,oBAK3B;AAEF;;;;;GAKG;AACI,MAAM,MAAM,GAAG,KAAK,EACzB,MAAc,EACd,IAAY,EACZ,UAAkB,EACD,EAAE;IACnB,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAClD,MAAM,eAAe,GAAG,IAAI,UAAU,CAAC,kBAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;IACzE,MAAM,aAAa,GAAG,IAAI,UAAU,CAAC,kBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAE/D,MAAM,SAAS,GAAG,EAAE,CAAC,CAAC,QAAQ;IAC9B,MAAM,MAAM,GAAG,QAAQ,CAAC;IAExB,IAAI,GAAwB,CAAC;IAC7B,IAAI,uBAAa,EAAE;QACjB,GAAG,GAAG,MAAM,IAAA,eAAQ,EAClB,eAAe,EACf,aAAa,EACb,UAAU,EACV,SAAS,EACT,MAAM,CACP,CAAC;KACH;SAAM;QACL,GAAG,GAAG,MAAM,IAAA,gBAAS,EAAC,eAAU,CAAC,CAC/B,eAAe,EACf,aAAa,EACb,UAAU,EACV,SAAS,EACT,MAAM,CACP,CAAC;KACH;IACD,OAAO,kBAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AAChC,CAAC,CAAC;AA/BW,QAAA,MAAM,UA+BjB","sourcesContent":["import * as ed from '@noble/ed25519';\nimport {\n  ByteUtils,\n  encryptJSONDataWithSharedKey,\n  tryDecryptJSONDataWithSharedKey,\n  getPublicViewingKey,\n  verifyED25519,\n  EncryptedData,\n  ViewingKeyPair,\n} from '@railgun-community/engine';\nimport { EncryptDataWithSharedKeyResponse } from '@railgun-community/shared-models';\nimport { getRandomBytes } from './bytes';\nimport { promisify } from 'util';\nimport { pbkdf2 as NodePbkdf2 } from 'crypto';\nimport { pbkdf2 as JSpbkdf2 } from 'ethereum-cryptography/pbkdf2';\nimport { isReactNative } from './runtime';\n\nexport const verifyBroadcasterSignature = (\n  signature: string | Uint8Array,\n  data: string | Uint8Array,\n  signingKey: Uint8Array,\n): Promise<boolean> => {\n  return verifyED25519(data, signature, signingKey);\n};\n\nexport const encryptDataWithSharedKey = async (\n  data: object,\n  externalPubKey: Uint8Array,\n): Promise<EncryptDataWithSharedKeyResponse> => {\n  const randomPrivKey = ByteUtils.hexStringToBytes(getRandomBytes(32));\n  const randomPubKeyUint8Array = await getPublicViewingKey(randomPrivKey);\n  const randomPubKey = ByteUtils.hexlify(randomPubKeyUint8Array);\n  const sharedKey = await ed.getSharedSecret(randomPrivKey, externalPubKey);\n  const encryptedData = encryptJSONDataWithSharedKey(data, sharedKey);\n  return { encryptedData, randomPubKey, sharedKey };\n};\n\nexport const decryptAESGCM256 = (\n  encryptedData: EncryptedData,\n  sharedKey: Uint8Array,\n): object | null => {\n  return tryDecryptJSONDataWithSharedKey(encryptedData, sharedKey);\n};\n\nexport const encryptAESGCM256 = (\n  data: object,\n  sharedKey: Uint8Array,\n): EncryptedData => {\n  return encryptJSONDataWithSharedKey(data, sharedKey);\n};\n\n/**\n * Calculates PBKDF2 hash\n * @param secret - input\n * @param salt - salt\n * @param iterations - rounds\n */\nexport const pbkdf2 = async (\n  secret: string,\n  salt: string,\n  iterations: number,\n): Promise<string> => {\n  const secretBuffer = Buffer.from(secret, 'utf-8');\n  const secretFormatted = new Uint8Array(ByteUtils.arrayify(secretBuffer));\n  const saltFormatted = new Uint8Array(ByteUtils.arrayify(salt));\n\n  const keyLength = 32; // Bytes\n  const digest = 'sha256';\n\n  let key: Uint8Array | Buffer;\n  if (isReactNative) {\n    key = await JSpbkdf2(\n      secretFormatted,\n      saltFormatted,\n      iterations,\n      keyLength,\n      digest,\n    );\n  } else {\n    key = await promisify(NodePbkdf2)(\n      secretFormatted,\n      saltFormatted,\n      iterations,\n      keyLength,\n      digest,\n    );\n  }\n  return ByteUtils.hexlify(key);\n};\n\nexport {\n  encryptJSONDataWithSharedKey,\n  tryDecryptJSONDataWithSharedKey,\n  EncryptedData,\n  getPublicViewingKey,\n  ViewingKeyPair,\n};\n"]}