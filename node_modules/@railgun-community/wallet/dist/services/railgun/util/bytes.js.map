{"version":3,"file":"bytes.js","sourceRoot":"","sources":["../../../../src/services/railgun/util/bytes.ts"],"names":[],"mappings":";;;AAAA,sDAMmC;AAc1B,2FAnBP,mBAAU,OAmBO;AAAE,0FAlBnB,kBAAS,OAkBmB;AAAE,+FAjB9B,uBAAc,OAiB8B;AAAE,6FAhB9C,qBAAY,OAgB8C;AAAE,yFAf5D,iBAAQ,OAe4D;AAZ/D,MAAM,wBAAwB,GAAG,CAAC,YAAoB,EAAU,EAAE;IACvE,OAAO,kBAAS,CAAC,kBAAkB,CAAC,YAAY,EAAE,mBAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC9E,CAAC,CAAC;AAFW,QAAA,wBAAwB,4BAEnC;AAEK,MAAM,cAAc,GAAG,CAAC,MAAc,EAAU,EAAE;IACvD,OAAO,kBAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AACrC,CAAC,CAAC;AAFW,QAAA,cAAc,kBAEzB;AAEK,MAAM,UAAU,GAAG,CAAC,KAAiB,EAAU,EAAE;IACtD,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC5C,CAAC,CAAC;AAFW,QAAA,UAAU,cAErB","sourcesContent":["import {\n  ByteLength,\n  ByteUtils,\n  fromUTF8String,\n  toUTF8String,\n  Database,\n} from '@railgun-community/engine';\n\nexport const parseRailgunTokenAddress = (tokenAddress: string): string => {\n  return ByteUtils.formatToByteLength(tokenAddress, ByteLength.Address, true);\n};\n\nexport const getRandomBytes = (length: number): string => {\n  return ByteUtils.randomHex(length);\n};\n\nexport const bytesToHex = (bytes: Uint8Array): string => {\n  return Buffer.from(bytes).toString('hex');\n};\n\nexport { ByteLength, ByteUtils, fromUTF8String, toUTF8String, Database };\n"]}