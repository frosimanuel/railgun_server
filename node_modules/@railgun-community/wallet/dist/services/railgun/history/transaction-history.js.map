{"version":3,"file":"transaction-history.js","sourceRoot":"","sources":["../../../../src/services/railgun/history/transaction-history.ts"],"names":[],"mappings":";;;AAAA,sDAWmC;AACnC,oEAY0C;AAC1C,yCAAyD;AACzD,gDAA8D;AAC9D,gDAAiD;AAEjD,MAAM,8CAA8C,GAAG,CACrD,aAAkC,EACN,EAAE;IAC9B,QAAQ,aAAa,EAAE;QACrB,KAAK,4BAAmB,CAAC,SAAS;YAChC,OAAO,0CAA0B,CAAC,SAAS,CAAC;QAC9C,KAAK,4BAAmB,CAAC,aAAa;YACpC,OAAO,0CAA0B,CAAC,aAAa,CAAC;QAClD,KAAK,4BAAmB,CAAC,aAAa;YACpC,OAAO,0CAA0B,CAAC,aAAa,CAAC;QAClD,KAAK,4BAAmB,CAAC,cAAc;YACrC,OAAO,0CAA0B,CAAC,cAAc,CAAC;QACnD,KAAK,4BAAmB,CAAC,kBAAkB;YACzC,OAAO,0CAA0B,CAAC,kBAAkB,CAAC;QACvD,KAAK,4BAAmB,CAAC,kBAAkB;YACzC,OAAO,0CAA0B,CAAC,kBAAkB,CAAC;QACvD,KAAK,4BAAmB,CAAC,KAAK;YAC5B,OAAO,0CAA0B,CAAC,KAAK,CAAC;KAC3C;IACD,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;AACtD,CAAC,CAAC;AAEF,MAAM,wDAAwD,GAAG,CAC/D,oCAA0E,EACxC,EAAE;IACpC,OAAO;QACL,GAAG,iDAAiD,CAClD,oCAAoC,CACrC;QACD,QAAQ,EAAE,oCAAoC,CAAC,QAAQ;QACvD,aAAa,EAAE,oCAAoC,CAAC,aAAa;QACjE,SAAS,EAAE,oCAAoC,CAAC,SAAS;QACzD,yBAAyB,EACvB,oCAAoC,CAAC,yBAAyB;QAChE,aAAa,EAAE,8CAA8C,CAC3D,oCAAoC,CAAC,aAAa,CACnD;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,8CAA8C,GAAG,CACrD,oCAA0E,EAC1C,EAAE;IAClC,OAAO;QACL,GAAG,uCAAuC,CACxC,oCAAoC,CACrC;QACD,QAAQ,EAAE,oCAAoC,CAAC,QAAQ;QACvD,aAAa,EAAE,oCAAoC,CAAC,aAAa;QACjE,SAAS,EAAE,oCAAoC,CAAC,SAAS;QACzD,yBAAyB,EACvB,oCAAoC,CAAC,yBAAyB;QAChE,aAAa,EAAE,8CAA8C,CAC3D,oCAAoC,CAAC,aAAa,CACnD;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,yDAAyD,GAAG,CAChE,6BAAoE,EACrC,EAAE;IACjC,OAAO;QACL,GAAG,iDAAiD,CAClD,6BAA6B,CAC9B;QACD,gBAAgB,EAAE,6BAA6B,CAAC,gBAAgB;QAChE,QAAQ,EAAE,6BAA6B,CAAC,QAAQ;QAChD,YAAY,EAAE,6BAA6B,CAAC,YAAY;QACxD,yBAAyB,EACvB,6BAA6B,CAAC,yBAAyB;KAC1D,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,yDAAyD,GAAG,CAChE,qCAA4E,EACzC,EAAE;IACrC,OAAO;QACL,GAAG,yDAAyD,CAC1D,qCAAqC,CACtC;QACD,WAAW,EAAE,qCAAqC,CAAC,WAAW;QAC9D,yBAAyB,EACvB,qCAAqC,CAAC,yBAAyB;KAClE,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,+CAA+C,GAAG,CACtD,qBAA4D,EAC/B,EAAE;IAC/B,OAAO;QACL,GAAG,uCAAuC,CAAC,qBAAqB,CAAC;QACjE,QAAQ,EAAE,qBAAqB,CAAC,QAAQ;QACxC,YAAY,EAAE,qBAAqB,CAAC,YAAY;QAChD,gBAAgB,EAAE,qBAAqB,CAAC,gBAAgB;QACxD,yBAAyB,EAAE,qBAAqB,CAAC,yBAAyB;KAC3E,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,+CAA+C,GAAG,CACtD,qBAA4D,EAC3B,EAAE;IACnC,OAAO;QACL,GAAG,+CAA+C,CAAC,qBAAqB,CAAC;QACzE,WAAW,EAAE,qBAAqB,CAAC,WAAW;QAC9C,yBAAyB,EAAE,qBAAqB,CAAC,yBAAyB;KAC3E,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,iDAAiD,GAAG,CACxD,6BAA4D,EACjC,EAAE;IAC7B,OAAO;QACL,YAAY,EAAE,IAAA,gCAAwB,EACpC,6BAA6B,CAAC,SAAS,CAAC,YAAY,CACrD,CAAC,WAAW,EAAE;QACf,MAAM,EAAE,6BAA6B,CAAC,MAAM;QAC5C,yBAAyB,EACvB,6BAA6B,CAAC,yBAAyB;KAC1D,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,uCAAuC,GAAG,CAC9C,qBAAoD,EAC3B,EAAE;IAC3B,OAAO;QACL,UAAU,EAAE,IAAA,gCAAwB,EAClC,qBAAqB,CAAC,SAAS,CAAC,YAAY,CAC7C,CAAC,WAAW,EAAE;QACf,YAAY,EAAE,qBAAqB,CAAC,SAAS,CAAC,SAAkB;QAChE,UAAU,EAAE,qBAAqB,CAAC,SAAS,CAAC,UAAU;QACtD,MAAM,EAAE,qBAAqB,CAAC,MAAM;QACpC,yBAAyB,EAAE,qBAAqB,CAAC,yBAAyB;KAC3E,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,WAA0C,EAAE,EAAE;IACjE,OAAO,WAAW,CAAC,SAAS,CAAC,SAAS,KAAK,kBAAS,CAAC,KAAK,CAAC;AAC7D,CAAC,CAAC;AAEF,MAAM,SAAS,GAAG,CAAC,WAA0C,EAAE,EAAE;IAC/D,QAAQ,WAAW,CAAC,SAAS,CAAC,SAAS,EAAE;QACvC,KAAK,kBAAS,CAAC,KAAK;YAClB,OAAO,KAAK,CAAC;QACf,KAAK,kBAAS,CAAC,MAAM,CAAC;QACtB,KAAK,kBAAS,CAAC,OAAO;YACpB,OAAO,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;KACzC;AACH,CAAC,CAAC;AAEF,MAAM,gCAAgC,GAAG,CACvC,mBAAuD,EAC9C,EAAE;IACX,OAAO,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;AACtE,CAAC,CAAC;AAEK,MAAM,iCAAiC,GAAG,CAC/C,WAAmC,EACH,EAAE;IAClC,MAAM,eAAe,GAAG,WAAW,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC;IAClE,MAAM,cAAc,GAAG,WAAW,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;IAChE,MAAM,eAAe,GAAG,WAAW,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC;IAClE,IAAI,eAAe,IAAI,cAAc,IAAI,eAAe,EAAE;QACxD,6CAA6C;QAC7C,OAAO,8CAA8B,CAAC,OAAO,CAAC;KAC/C;IAED,MAAM,iBAAiB,GAAG,WAAW,CAAC,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAC;IACtE,MAAM,gBAAgB,GAAG,WAAW,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,CAAC;IACpE,MAAM,iBAAiB,GAAG,WAAW,CAAC,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAC;IAEtE,IAAI,iBAAiB,IAAI,CAAC,gBAAgB,IAAI,CAAC,iBAAiB,EAAE;QAChE,wBAAwB;QACxB,OAAO,8CAA8B,CAAC,kBAAkB,CAAC;KAC1D;IAED,IAAI,CAAC,iBAAiB,IAAI,gBAAgB,IAAI,CAAC,iBAAiB,EAAE;QAChE,uBAAuB;QACvB,MAAM,YAAY,GAAG,gCAAgC,CACnD,WAAW,CAAC,mBAAmB,CAChC,CAAC;QACF,IAAI,YAAY,EAAE;YAChB,+DAA+D;YAC/D,iEAAiE;YACjE,OAAO,8CAA8B,CAAC,YAAY,CAAC;SACpD;QACD,OAAO,8CAA8B,CAAC,qBAAqB,CAAC;KAC7D;IAED,IAAI,CAAC,iBAAiB,IAAI,CAAC,gBAAgB,IAAI,iBAAiB,EAAE;QAChE,wBAAwB;QACxB,OAAO,8CAA8B,CAAC,cAAc,CAAC;KACtD;IAED,OAAO,8CAA8B,CAAC,OAAO,CAAC;AAChD,CAAC,CAAC;AAvCW,QAAA,iCAAiC,qCAuC5C;AAEF,MAAM,2BAA2B,GAAG,CAClC,kBAA6C,EACnB,EAAE;IAC5B,MAAM,yBAAyB,GAC7B,kBAAkB,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACtC,WAAW,EAAE,YAAY,CAAC,WAAW;QACrC,IAAI,EAAE,kBAAS,CAAC,kBAAkB,CAAC,YAAY,CAAC,IAAI,EAAE,mBAAU,CAAC,QAAQ,EAAE,IAAI,CAAC;QAChF,WAAW,EAAE,YAAY,CAAC,WAAW;QACrC,SAAS,EAAE,YAAY,CAAC,SAAS;QACjC,oBAAoB,EAAE,YAAY,CAAC,oBAAoB;aACpD,MAAM,CAAC,WAAW,CAAC;aACnB,GAAG,CAAC,yDAAyD,CAAC;QACjE,yBAAyB,EAAE,YAAY,CAAC,yBAAyB;YAC/D,CAAC,CAAC,iDAAiD,CAC/C,YAAY,CAAC,yBAAyB,CACvC;YACH,CAAC,CAAC,SAAS;QACb,kBAAkB,EAAE,YAAY,CAAC,kBAAkB;aAChD,MAAM,CAAC,WAAW,CAAC;aACnB,GAAG,CAAC,iDAAiD,CAAC;QACzD,mBAAmB,EAAE,YAAY,CAAC,mBAAmB;aAClD,MAAM,CAAC,WAAW,CAAC;aACnB,GAAG,CAAC,wDAAwD,CAAC;QAChE,oBAAoB,EAAE,YAAY,CAAC,oBAAoB;aACpD,MAAM,CAAC,WAAW,CAAC;aACnB,GAAG,CAAC,yDAAyD,CAAC;QACjE,iBAAiB,EAAE,YAAY,CAAC,mBAAmB;aAChD,MAAM,CAAC,SAAS,CAAC;aACjB,GAAG,CAAC,8CAA8C,CAAC;QACtD,kBAAkB,EAAE,YAAY,CAAC,oBAAoB;aAClD,MAAM,CAAC,SAAS,CAAC;aACjB,GAAG,CAAC,+CAA+C,CAAC;QACvD,kBAAkB,EAAE,YAAY,CAAC,oBAAoB;aAClD,MAAM,CAAC,SAAS,CAAC;aACjB,GAAG,CAAC,+CAA+C,CAAC;QACvD,OAAO,EAAE,YAAY,CAAC,OAAO;QAC7B,QAAQ,EAAE,8CAA8B,CAAC,OAAO;KACjD,CAAC,CAAC,CAAC;IAEN,+CAA+C;IAC/C,OAAO,yBAAyB,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QACnD,GAAG,WAAW;QACd,QAAQ,EAAE,IAAA,yCAAiC,EAAC,WAAW,CAAC;KACzD,CAAC,CAAC,CAAC;AACN,CAAC,CAAC;AAEK,MAAM,2BAA2B,GAAG,KAAK,EAC9C,KAAY,EACZ,eAAuB,EACvB,aAA+B,EACI,EAAE;IACrC,IAAI;QACF,MAAM,MAAM,GAAG,IAAA,qBAAW,EAAC,eAAe,CAAC,CAAC;QAC5C,MAAM,kBAAkB,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAC3D,KAAK,EACL,aAAa,CACd,CAAC;QACF,OAAO,2BAA2B,CAAC,kBAAkB,CAAC,CAAC;KACxD;IAAC,OAAO,GAAG,EAAE;QACZ,IAAA,8BAAsB,EAAC,mCAA2B,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAC9D,MAAM,IAAI,KAAK,CAAC,oDAAoD,EAAE;YACpE,KAAK,EAAE,GAAG;SACX,CAAC,CAAC;KACJ;AACH,CAAC,CAAC;AAlBW,QAAA,2BAA2B,+BAkBtC","sourcesContent":["import {\n  TransactionHistoryTransferTokenAmount,\n  TransactionHistoryTokenAmount,\n  TransactionHistoryEntry,\n  Chain,\n  TransactionHistoryReceiveTokenAmount,\n  TokenType,\n  ByteLength,\n  ByteUtils,\n  TransactionHistoryUnshieldTokenAmount,\n  WalletBalanceBucket,\n} from '@railgun-community/engine';\nimport {\n  TransactionHistoryItem,\n  RailgunHistoryERC20Amount,\n  RailgunHistorySendERC20Amount,\n  RailgunHistoryReceiveERC20Amount,\n  RailgunHistorySendNFTAmount,\n  RailgunHistoryNFTAmount,\n  RailgunHistoryReceiveNFTAmount,\n  RailgunHistoryUnshieldERC20Amount,\n  RailgunHistoryUnshieldNFTAmount,\n  TransactionHistoryItemCategory,\n  RailgunWalletBalanceBucket,\n} from '@railgun-community/shared-models';\nimport { parseRailgunTokenAddress } from '../util/bytes';\nimport { reportAndSanitizeError } from '../../../utils/error';\nimport { walletForID } from '../wallets/wallets';\n\nconst getRailgunBalanceBucketFromEngineBalanceBucket = (\n  balanceBucket: WalletBalanceBucket,\n): RailgunWalletBalanceBucket => {\n  switch (balanceBucket) {\n    case WalletBalanceBucket.Spendable:\n      return RailgunWalletBalanceBucket.Spendable;\n    case WalletBalanceBucket.ShieldBlocked:\n      return RailgunWalletBalanceBucket.ShieldBlocked;\n    case WalletBalanceBucket.ShieldPending:\n      return RailgunWalletBalanceBucket.ShieldPending;\n    case WalletBalanceBucket.ProofSubmitted:\n      return RailgunWalletBalanceBucket.ProofSubmitted;\n    case WalletBalanceBucket.MissingInternalPOI:\n      return RailgunWalletBalanceBucket.MissingInternalPOI;\n    case WalletBalanceBucket.MissingExternalPOI:\n      return RailgunWalletBalanceBucket.MissingExternalPOI;\n    case WalletBalanceBucket.Spent:\n      return RailgunWalletBalanceBucket.Spent;\n  }\n  throw new Error('Unrecognized WalletBalanceBucket');\n};\n\nconst transactionHistoryReceiveTokenAmountToRailgunERC20Amount = (\n  transactionHistoryReceiveTokenAmount: TransactionHistoryReceiveTokenAmount,\n): RailgunHistoryReceiveERC20Amount => {\n  return {\n    ...transactionHistoryTokenAmountToRailgunERC20Amount(\n      transactionHistoryReceiveTokenAmount,\n    ),\n    memoText: transactionHistoryReceiveTokenAmount.memoText,\n    senderAddress: transactionHistoryReceiveTokenAmount.senderAddress,\n    shieldFee: transactionHistoryReceiveTokenAmount.shieldFee,\n    hasValidPOIForActiveLists:\n      transactionHistoryReceiveTokenAmount.hasValidPOIForActiveLists,\n    balanceBucket: getRailgunBalanceBucketFromEngineBalanceBucket(\n      transactionHistoryReceiveTokenAmount.balanceBucket,\n    ),\n  };\n};\n\nconst transactionHistoryReceiveNFTToRailgunNFTAmount = (\n  transactionHistoryReceiveTokenAmount: TransactionHistoryReceiveTokenAmount,\n): RailgunHistoryReceiveNFTAmount => {\n  return {\n    ...transactionHistoryNFTToRailgunNFTAmount(\n      transactionHistoryReceiveTokenAmount,\n    ),\n    memoText: transactionHistoryReceiveTokenAmount.memoText,\n    senderAddress: transactionHistoryReceiveTokenAmount.senderAddress,\n    shieldFee: transactionHistoryReceiveTokenAmount.shieldFee,\n    hasValidPOIForActiveLists:\n      transactionHistoryReceiveTokenAmount.hasValidPOIForActiveLists,\n    balanceBucket: getRailgunBalanceBucketFromEngineBalanceBucket(\n      transactionHistoryReceiveTokenAmount.balanceBucket,\n    ),\n  };\n};\n\nconst transactionHistoryTransferTokenAmountToRailgunERC20Amount = (\n  transactionHistoryTokenAmount: TransactionHistoryTransferTokenAmount,\n): RailgunHistorySendERC20Amount => {\n  return {\n    ...transactionHistoryTokenAmountToRailgunERC20Amount(\n      transactionHistoryTokenAmount,\n    ),\n    recipientAddress: transactionHistoryTokenAmount.recipientAddress,\n    memoText: transactionHistoryTokenAmount.memoText,\n    walletSource: transactionHistoryTokenAmount.walletSource,\n    hasValidPOIForActiveLists:\n      transactionHistoryTokenAmount.hasValidPOIForActiveLists,\n  };\n};\n\nconst transactionHistoryUnshieldTokenAmountToRailgunERC20Amount = (\n  transactionHistoryUnshieldTokenAmount: TransactionHistoryUnshieldTokenAmount,\n): RailgunHistoryUnshieldERC20Amount => {\n  return {\n    ...transactionHistoryTransferTokenAmountToRailgunERC20Amount(\n      transactionHistoryUnshieldTokenAmount,\n    ),\n    unshieldFee: transactionHistoryUnshieldTokenAmount.unshieldFee,\n    hasValidPOIForActiveLists:\n      transactionHistoryUnshieldTokenAmount.hasValidPOIForActiveLists,\n  };\n};\n\nconst transactionHistoryTransferNFTToRailgunNFTAmount = (\n  transactionHistoryNFT: TransactionHistoryTransferTokenAmount,\n): RailgunHistorySendNFTAmount => {\n  return {\n    ...transactionHistoryNFTToRailgunNFTAmount(transactionHistoryNFT),\n    memoText: transactionHistoryNFT.memoText,\n    walletSource: transactionHistoryNFT.walletSource,\n    recipientAddress: transactionHistoryNFT.recipientAddress,\n    hasValidPOIForActiveLists: transactionHistoryNFT.hasValidPOIForActiveLists,\n  };\n};\n\nconst transactionHistoryUnshieldNFTToRailgunNFTAmount = (\n  transactionHistoryNFT: TransactionHistoryUnshieldTokenAmount,\n): RailgunHistoryUnshieldNFTAmount => {\n  return {\n    ...transactionHistoryTransferNFTToRailgunNFTAmount(transactionHistoryNFT),\n    unshieldFee: transactionHistoryNFT.unshieldFee,\n    hasValidPOIForActiveLists: transactionHistoryNFT.hasValidPOIForActiveLists,\n  };\n};\n\nconst transactionHistoryTokenAmountToRailgunERC20Amount = (\n  transactionHistoryTokenAmount: TransactionHistoryTokenAmount,\n): RailgunHistoryERC20Amount => {\n  return {\n    tokenAddress: parseRailgunTokenAddress(\n      transactionHistoryTokenAmount.tokenData.tokenAddress,\n    ).toLowerCase(),\n    amount: transactionHistoryTokenAmount.amount,\n    hasValidPOIForActiveLists:\n      transactionHistoryTokenAmount.hasValidPOIForActiveLists,\n  };\n};\n\nconst transactionHistoryNFTToRailgunNFTAmount = (\n  transactionHistoryNFT: TransactionHistoryTokenAmount,\n): RailgunHistoryNFTAmount => {\n  return {\n    nftAddress: parseRailgunTokenAddress(\n      transactionHistoryNFT.tokenData.tokenAddress,\n    ).toLowerCase(),\n    nftTokenType: transactionHistoryNFT.tokenData.tokenType as 1 | 2,\n    tokenSubID: transactionHistoryNFT.tokenData.tokenSubID,\n    amount: transactionHistoryNFT.amount,\n    hasValidPOIForActiveLists: transactionHistoryNFT.hasValidPOIForActiveLists,\n  };\n};\n\nconst filterERC20 = (tokenAmount: TransactionHistoryTokenAmount) => {\n  return tokenAmount.tokenData.tokenType === TokenType.ERC20;\n};\n\nconst filterNFT = (tokenAmount: TransactionHistoryTokenAmount) => {\n  switch (tokenAmount.tokenData.tokenType) {\n    case TokenType.ERC20:\n      return false;\n    case TokenType.ERC721:\n    case TokenType.ERC1155:\n      return tokenAmount.amount > BigInt(0);\n  }\n};\n\nconst receiveERC20AmountsHaveShieldFee = (\n  receiveERC20Amounts: RailgunHistoryReceiveERC20Amount[],\n): boolean => {\n  return receiveERC20Amounts.find(amount => amount.shieldFee) != null;\n};\n\nexport const categoryForTransactionHistoryItem = (\n  historyItem: TransactionHistoryItem,\n): TransactionHistoryItemCategory => {\n  const hasTransferNFTs = historyItem.transferNFTAmounts.length > 0;\n  const hasReceiveNFTs = historyItem.receiveNFTAmounts.length > 0;\n  const hasUnshieldNFTs = historyItem.unshieldNFTAmounts.length > 0;\n  if (hasTransferNFTs || hasReceiveNFTs || hasUnshieldNFTs) {\n    // Some kind of NFT Transfer. Unhandled case.\n    return TransactionHistoryItemCategory.Unknown;\n  }\n\n  const hasTransferERC20s = historyItem.transferERC20Amounts.length > 0;\n  const hasReceiveERC20s = historyItem.receiveERC20Amounts.length > 0;\n  const hasUnshieldERC20s = historyItem.unshieldERC20Amounts.length > 0;\n\n  if (hasTransferERC20s && !hasReceiveERC20s && !hasUnshieldERC20s) {\n    // Only transfer erc20s.\n    return TransactionHistoryItemCategory.TransferSendERC20s;\n  }\n\n  if (!hasTransferERC20s && hasReceiveERC20s && !hasUnshieldERC20s) {\n    // Only receive erc20s.\n    const hasShieldFee = receiveERC20AmountsHaveShieldFee(\n      historyItem.receiveERC20Amounts,\n    );\n    if (hasShieldFee) {\n      // Note: Shield fees were added to contract events in Mar 2023.\n      // Prior shields will show as TransferReceiveERC20s without fees.\n      return TransactionHistoryItemCategory.ShieldERC20s;\n    }\n    return TransactionHistoryItemCategory.TransferReceiveERC20s;\n  }\n\n  if (!hasTransferERC20s && !hasReceiveERC20s && hasUnshieldERC20s) {\n    // Only unshield erc20s.\n    return TransactionHistoryItemCategory.UnshieldERC20s;\n  }\n\n  return TransactionHistoryItemCategory.Unknown;\n};\n\nconst serializeTransactionHistory = (\n  transactionHistory: TransactionHistoryEntry[],\n): TransactionHistoryItem[] => {\n  const historyItemsUncategorized: TransactionHistoryItem[] =\n    transactionHistory.map(historyEntry => ({\n      txidVersion: historyEntry.txidVersion,\n      txid: ByteUtils.formatToByteLength(historyEntry.txid, ByteLength.UINT_256, true),\n      blockNumber: historyEntry.blockNumber,\n      timestamp: historyEntry.timestamp,\n      transferERC20Amounts: historyEntry.transferTokenAmounts\n        .filter(filterERC20)\n        .map(transactionHistoryTransferTokenAmountToRailgunERC20Amount),\n      broadcasterFeeERC20Amount: historyEntry.broadcasterFeeTokenAmount\n        ? transactionHistoryTokenAmountToRailgunERC20Amount(\n            historyEntry.broadcasterFeeTokenAmount,\n          )\n        : undefined,\n      changeERC20Amounts: historyEntry.changeTokenAmounts\n        .filter(filterERC20)\n        .map(transactionHistoryTokenAmountToRailgunERC20Amount),\n      receiveERC20Amounts: historyEntry.receiveTokenAmounts\n        .filter(filterERC20)\n        .map(transactionHistoryReceiveTokenAmountToRailgunERC20Amount),\n      unshieldERC20Amounts: historyEntry.unshieldTokenAmounts\n        .filter(filterERC20)\n        .map(transactionHistoryUnshieldTokenAmountToRailgunERC20Amount),\n      receiveNFTAmounts: historyEntry.receiveTokenAmounts\n        .filter(filterNFT)\n        .map(transactionHistoryReceiveNFTToRailgunNFTAmount),\n      transferNFTAmounts: historyEntry.transferTokenAmounts\n        .filter(filterNFT)\n        .map(transactionHistoryTransferNFTToRailgunNFTAmount),\n      unshieldNFTAmounts: historyEntry.unshieldTokenAmounts\n        .filter(filterNFT)\n        .map(transactionHistoryUnshieldNFTToRailgunNFTAmount),\n      version: historyEntry.version,\n      category: TransactionHistoryItemCategory.Unknown,\n    }));\n\n  // Add category for items based on token types.\n  return historyItemsUncategorized.map(historyItem => ({\n    ...historyItem,\n    category: categoryForTransactionHistoryItem(historyItem),\n  }));\n};\n\nexport const getWalletTransactionHistory = async (\n  chain: Chain,\n  railgunWalletID: string,\n  startingBlock: Optional<number>,\n): Promise<TransactionHistoryItem[]> => {\n  try {\n    const wallet = walletForID(railgunWalletID);\n    const transactionHistory = await wallet.getTransactionHistory(\n      chain,\n      startingBlock,\n    );\n    return serializeTransactionHistory(transactionHistory);\n  } catch (err) {\n    reportAndSanitizeError(getWalletTransactionHistory.name, err);\n    throw new Error('Could not load RAILGUN wallet transaction history.', {\n      cause: err,\n    });\n  }\n};"]}