{"version":3,"file":"shared-formatters.js","sourceRoot":"","sources":["../../../../src/services/railgun/quick-sync/shared-formatters.ts"],"names":[],"mappings":";;;AAAA,sDAQmC;AAY5B,MAAM,+BAA+B,GAAG,CAC7C,cAAmD,EACxC,EAAE;IACb,QAAQ,cAAc,EAAE;QACtB,KAAK,OAAO;YACV,OAAO,kBAAS,CAAC,KAAK,CAAC;QACzB,KAAK,QAAQ;YACX,OAAO,kBAAS,CAAC,MAAM,CAAC;QAC1B,KAAK,SAAS;YACZ,OAAO,kBAAS,CAAC,OAAO,CAAC;KAC5B;AACH,CAAC,CAAC;AAXW,QAAA,+BAA+B,mCAW1C;AAEK,MAAM,qBAAqB,GAAG,CACnC,UAAuC,EAC5B,EAAE;IACb,OAAO,IAAA,2BAAkB,EACvB,UAAU,CAAC,YAAY,EACvB,IAAA,uCAA+B,EAAC,UAAU,CAAC,SAAS,CAAC,EACrD,UAAU,CAAC,UAAU,CACtB,CAAC;AACJ,CAAC,CAAC;AARW,QAAA,qBAAqB,yBAQhC;AAEK,MAAM,cAAc,GAAG,CAC5B,aAAoE,EAC1D,EAAE;IACZ,OAAO,IAAA,0BAAiB,EACtB,aAAa,CAAC,GAAG,EACjB,IAAA,6BAAqB,EAAC,aAAa,CAAC,KAAK,CAAC,EAC1C,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAC5B,CAAC;AACJ,CAAC,CAAC;AARW,QAAA,cAAc,kBAQzB;AAEK,MAAM,eAAe,GAAG,CAAC,KAAa,EAAE,MAAe,EAAE,EAAE;IAChE,OAAO,kBAAS,CAAC,kBAAkB,CAAC,KAAK,EAAE,mBAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAC1E,CAAC,CAAC;AAFW,QAAA,eAAe,mBAE1B;AAEK,MAAM,eAAe,GAAG,CAAC,KAAa,EAAE,MAAe,EAAE,EAAE;IAChE,OAAO,kBAAS,CAAC,kBAAkB,CAAC,KAAK,EAAE,mBAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAC1E,CAAC,CAAC;AAFW,QAAA,eAAe,mBAE1B;AAEK,MAAM,iBAAiB,GAAG,CAAC,YAAoB,EAAU,EAAE;IAChE,OAAO,KAAK,MAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;AAClD,CAAC,CAAC;AAFW,QAAA,iBAAiB,qBAE5B","sourcesContent":["import {\n  ByteLength,\n  PreImage,\n  TokenData,\n  TokenType,\n  ByteUtils,\n  serializePreImage,\n  serializeTokenData,\n} from '@railgun-community/engine';\nimport {\n  TokenType as GraphTokenTypeV2,\n  Token as GraphTokenV2,\n  CommitmentPreimage as GraphCommitmentPreimageV2,\n} from './V2/graphql';\nimport {\n  TokenType as GraphTokenTypeV3,\n  Token as GraphTokenV3,\n  CommitmentPreimage as GraphCommitmentPreimageV3,\n} from './V3/graphql';\n\nexport const graphTokenTypeToEngineTokenType = (\n  graphTokenType: GraphTokenTypeV2 | GraphTokenTypeV3,\n): TokenType => {\n  switch (graphTokenType) {\n    case 'ERC20':\n      return TokenType.ERC20;\n    case 'ERC721':\n      return TokenType.ERC721;\n    case 'ERC1155':\n      return TokenType.ERC1155;\n  }\n};\n\nexport const formatSerializedToken = (\n  graphToken: GraphTokenV2 | GraphTokenV3,\n): TokenData => {\n  return serializeTokenData(\n    graphToken.tokenAddress,\n    graphTokenTypeToEngineTokenType(graphToken.tokenType),\n    graphToken.tokenSubID,\n  );\n};\n\nexport const formatPreImage = (\n  graphPreImage: GraphCommitmentPreimageV2 | GraphCommitmentPreimageV3,\n): PreImage => {\n  return serializePreImage(\n    graphPreImage.npk,\n    formatSerializedToken(graphPreImage.token),\n    BigInt(graphPreImage.value),\n  );\n};\n\nexport const formatTo16Bytes = (value: string, prefix: boolean) => {\n  return ByteUtils.formatToByteLength(value, ByteLength.UINT_128, prefix);\n};\n\nexport const formatTo32Bytes = (value: string, prefix: boolean) => {\n  return ByteUtils.formatToByteLength(value, ByteLength.UINT_256, prefix);\n};\n\nexport const bigIntStringToHex = (bigintString: string): string => {\n  return `0x${BigInt(bigintString).toString(16)}`;\n};\n"]}