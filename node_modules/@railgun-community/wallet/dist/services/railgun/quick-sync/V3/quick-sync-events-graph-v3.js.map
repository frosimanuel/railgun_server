{"version":3,"file":"quick-sync-events-graph-v3.js","sourceRoot":"","sources":["../../../../../src/services/railgun/quick-sync/V3/quick-sync-events-graph-v3.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AccumulatedEvents,\n  Chain,\n  getRailgunTransactionIDHex,\n} from '@railgun-community/engine';\nimport { EMPTY_EVENTS, autoPaginatingQuery } from '../graph-query';\nimport {\n  NetworkName,\n  isDefined,\n  networkForChain,\n} from '@railgun-community/shared-models';\nimport { MeshInstance, getMesh } from '@graphql-mesh/runtime';\nimport { removeDuplicatesByID } from '../../util/graph-util';\nimport { getMeshOptions, getSdk } from './graphql';\nimport {\n  RailgunTxidMapV3,\n  formatGraphCommitmentEventsV3,\n  formatGraphNullifierEventsV3,\n  formatGraphRailgunTransactionEventsV3,\n  formatGraphUnshieldEventsV3,\n} from './graph-type-formatters-v3';\n\nconst meshes: MapType<MeshInstance> = {};\n\n// 1.5 full trees of commitments\n// TODO: This will have to change when we have more than 100k commitments.\nconst MAX_QUERY_RESULTS = 100000;\n\nconst sourceNameForNetwork = (networkName: NetworkName): string => {\n  switch (networkName) {\n    case NetworkName.Ethereum:\n    case NetworkName.EthereumSepolia:\n    case NetworkName.BNBChain:\n    case NetworkName.Polygon:\n    case NetworkName.Arbitrum:\n    case NetworkName.PolygonAmoy:\n    case NetworkName.ArbitrumGoerli_DEPRECATED:\n    case NetworkName.EthereumGoerli_DEPRECATED:\n    case NetworkName.EthereumRopsten_DEPRECATED:\n    case NetworkName.PolygonMumbai_DEPRECATED:\n    case NetworkName.Hardhat:\n    default:\n      throw new Error(\n        'No Graph API hosted service for this network on RAILGUN V3',\n      );\n  }\n};\n\nconst isSupportedByNetwork = (networkName: NetworkName) => {\n  try {\n    sourceNameForNetwork(networkName);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nexport const quickSyncEventsGraphV3 = async (\n  chain: Chain,\n  startingBlock: number,\n): Promise<AccumulatedEvents> => {\n  const network = networkForChain(chain);\n  if (!network || !isSupportedByNetwork(network.name)) {\n    // Return empty logs, Engine will default to full scan.\n    return EMPTY_EVENTS;\n  }\n\n  const sdk = getBuiltGraphSDK(network.name);\n\n  const [nullifiers, unshields, commitments, railgunTransactions] =\n    await Promise.all([\n      autoPaginatingQuery(\n        async (blockNumber: string) =>\n          (\n            await sdk.Nullifiers({\n              blockNumber,\n            })\n          ).nullifiers,\n        startingBlock.toString(),\n        MAX_QUERY_RESULTS,\n      ),\n      autoPaginatingQuery(\n        async (blockNumber: string) =>\n          (\n            await sdk.Unshields({\n              blockNumber,\n            })\n          ).unshields,\n        startingBlock.toString(),\n        MAX_QUERY_RESULTS,\n      ),\n      autoPaginatingQuery(\n        async (blockNumber: string) =>\n          (\n            await sdk.Commitments({\n              blockNumber,\n            })\n          ).commitments,\n        startingBlock.toString(),\n        MAX_QUERY_RESULTS,\n      ),\n      autoPaginatingQuery(\n        async (blockNumber: string) =>\n          (\n            await sdk.RailgunTransactions({\n              blockNumber,\n            })\n          ).railgunTransactions,\n        startingBlock.toString(),\n        MAX_QUERY_RESULTS,\n      ),\n    ]);\n\n  const filteredRailgunTransactions = removeDuplicatesByID(railgunTransactions);\n  const filteredNullifiers = removeDuplicatesByID(nullifiers);\n  const filteredUnshields = removeDuplicatesByID(unshields);\n  const filteredCommitments = removeDuplicatesByID(commitments);\n\n  const railgunTransactionEvents = formatGraphRailgunTransactionEventsV3(\n    filteredRailgunTransactions,\n  );\n\n  const railgunTxidMap: RailgunTxidMapV3 = {};\n  for (const railgunTransaction of filteredRailgunTransactions) {\n    const railgunTxid = getRailgunTransactionIDHex(railgunTransaction);\n    railgunTxidMap[railgunTxid] = railgunTransaction.commitments;\n  }\n\n  const nullifierEvents = formatGraphNullifierEventsV3(filteredNullifiers);\n  const unshieldEvents = formatGraphUnshieldEventsV3(\n    filteredUnshields,\n    railgunTxidMap,\n  );\n  const commitmentEvents = formatGraphCommitmentEventsV3(\n    filteredCommitments,\n    railgunTxidMap,\n  );\n\n  return {\n    nullifierEvents,\n    unshieldEvents,\n    commitmentEvents,\n    railgunTransactionEvents,\n  };\n};\n\nconst getBuiltGraphClient = async (\n  networkName: NetworkName,\n): Promise<MeshInstance> => {\n  const meshForNetwork = meshes[networkName];\n  if (isDefined(meshForNetwork)) {\n    return meshForNetwork;\n  }\n  const sourceName = sourceNameForNetwork(networkName);\n  const meshOptions = await getMeshOptions();\n  const filteredSources = meshOptions.sources.filter(source => {\n    return source.name === sourceName;\n  });\n  if (filteredSources.length !== 1) {\n    throw new Error(\n      `Expected exactly one source for network ${networkName}, found ${filteredSources.length}`,\n    );\n  }\n  meshOptions.sources = [filteredSources[0]];\n  const mesh = await getMesh(meshOptions);\n  meshes[networkName] = mesh;\n  const id = mesh.pubsub.subscribe('destroy', () => {\n    meshes[networkName] = undefined;\n    mesh.pubsub.unsubscribe(id);\n  });\n  return mesh;\n};\n\nconst getBuiltGraphSDK = <TGlobalContext, TOperationContext>(\n  networkName: NetworkName,\n  globalContext?: TGlobalContext,\n) => {\n  const sdkRequester$ = getBuiltGraphClient(networkName).then(\n    ({ sdkRequesterFactory }) => sdkRequesterFactory(globalContext),\n  );\n  return getSdk<TOperationContext, TGlobalContext>((...args) =>\n    sdkRequester$.then(sdkRequester => sdkRequester(...args)),\n  );\n};\n"]}