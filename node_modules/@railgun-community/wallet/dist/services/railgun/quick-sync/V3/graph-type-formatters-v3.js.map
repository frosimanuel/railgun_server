{"version":3,"file":"graph-type-formatters-v3.js","sourceRoot":"","sources":["../../../../../src/services/railgun/quick-sync/V3/graph-type-formatters-v3.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Nullifier,\n  UnshieldStoredEvent,\n  CommitmentEvent,\n  V3Events,\n  getNoteHash,\n  serializeTokenData,\n  ByteLength,\n  ByteUtils,\n} from '@railgun-community/engine';\nimport {\n  Nullifier as GraphNullifierV3,\n  Unshield as GraphUnshieldV3,\n  ShieldCommitment as GraphShieldCommitmentV3,\n  TransactCommitment as GraphTransactCommitmentV3,\n  RailgunTransaction as GraphRailgunTransactionV3,\n} from './graphql';\nimport {\n  formatTo32Bytes,\n  graphTokenTypeToEngineTokenType,\n} from '../shared-formatters';\n\nexport type GraphCommitmentV3 =\n  | GraphShieldCommitmentV3\n  | GraphTransactCommitmentV3;\n\nexport type RailgunTxidMapV3 = MapType<string[]>;\n\nexport const formatGraphRailgunTransactionEventsV3 = (\n  railgunTransactions: GraphRailgunTransactionV3[],\n) => {\n  return railgunTransactions.map(railgunTransaction => {\n    return V3Events.formatRailgunTransactionEvent(\n      railgunTransaction.transactionHash,\n      Number(railgunTransaction.blockNumber),\n      railgunTransaction.commitments,\n      railgunTransaction.nullifiers,\n      {\n        npk: railgunTransaction.unshieldToAddress,\n        token: {\n          tokenType: BigInt(\n            graphTokenTypeToEngineTokenType(\n              railgunTransaction.unshieldToken.tokenType,\n            ),\n          ),\n          tokenAddress: railgunTransaction.unshieldToken.tokenAddress,\n          tokenSubID: BigInt(railgunTransaction.unshieldToken.tokenSubID),\n        },\n        value: BigInt(railgunTransaction.unshieldValue),\n      },\n      railgunTransaction.boundParamsHash,\n      Number(railgunTransaction.utxoTreeIn),\n      Number(railgunTransaction.utxoTreeOut),\n      Number(railgunTransaction.utxoBatchStartPositionOut),\n      railgunTransaction.verificationHash,\n    );\n  });\n};\n\nexport const formatGraphNullifierEventsV3 = (\n  nullifiers: GraphNullifierV3[],\n): Nullifier[] => {\n  return nullifiers.map(nullifier => {\n    return {\n      txid: formatTo32Bytes(nullifier.transactionHash, false),\n      nullifier: formatTo32Bytes(nullifier.nullifier, false),\n      treeNumber: nullifier.treeNumber,\n      blockNumber: Number(nullifier.blockNumber),\n      spentRailgunTxid: undefined,\n    };\n  });\n};\n\nconst getUnshieldCommitmentHash = (\n  npk: string,\n  tokenAddress: string,\n  tokenType: bigint,\n  tokenSubID: bigint,\n  value: bigint,\n) => {\n  return getNoteHash(\n    npk,\n    serializeTokenData(tokenAddress, tokenType, tokenSubID.toString()),\n    value,\n  );\n};\n\nexport const formatGraphUnshieldEventsV3 = (\n  unshields: GraphUnshieldV3[],\n  railgunTxidMap: RailgunTxidMapV3,\n): UnshieldStoredEvent[] => {\n  return unshields.map(unshield => {\n    const unshieldCommitmentHash = ByteUtils.nToHex(\n      getUnshieldCommitmentHash(\n        unshield.to,\n        unshield.token.tokenAddress,\n        BigInt(graphTokenTypeToEngineTokenType(unshield.token.tokenType)),\n        BigInt(unshield.token.tokenSubID),\n        BigInt(unshield.value),\n      ),\n      ByteLength.UINT_256,\n      true,\n    );\n    const railgunTxid = getRailgunTxid(railgunTxidMap, [\n      unshieldCommitmentHash,\n    ]);\n    return V3Events.formatUnshieldEvent(\n      unshield.transactionHash,\n      Number(unshield.blockNumber),\n      {\n        npk: unshield.to,\n        token: {\n          tokenType: BigInt(\n            graphTokenTypeToEngineTokenType(unshield.token.tokenType),\n          ),\n          tokenAddress: unshield.token.tokenAddress,\n          tokenSubID: BigInt(unshield.token.tokenSubID),\n        },\n        value: BigInt(unshield.value),\n      },\n      Number(unshield.transactIndex),\n      BigInt(unshield.fee),\n      railgunTxid,\n    );\n  });\n};\n\nexport const formatGraphCommitmentEventsV3 = (\n  commitments: GraphCommitmentV3[],\n  railgunTxidMap: RailgunTxidMapV3,\n): CommitmentEvent[] => {\n  return commitments.map(commitment => {\n    return formatGraphCommitmentEventV3(commitment, railgunTxidMap);\n  });\n};\n\nconst formatGraphCommitmentEventV3 = (\n  commitment: GraphCommitmentV3,\n  railgunTxidMap: RailgunTxidMapV3,\n): CommitmentEvent => {\n  switch (commitment.commitmentType) {\n    case 'LegacyGeneratedCommitment':\n    case 'LegacyEncryptedCommitment':\n      throw new Error('Not possible in V3');\n    case 'ShieldCommitment':\n      return formatShieldCommitmentEvent(commitment as GraphShieldCommitmentV3);\n    case 'TransactCommitment': {\n      const railgunTxid = getRailgunTxid(railgunTxidMap, commitment.hashes);\n      return formatTransactCommitmentEvent(\n        commitment as GraphTransactCommitmentV3,\n        railgunTxid,\n      );\n    }\n  }\n};\n\nconst getRailgunTxid = (\n  railgunTxidMap: RailgunTxidMapV3,\n  commitments: string[],\n): string => {\n  const railgunTxids = Object.keys(railgunTxidMap);\n  for (const railgunTxid of railgunTxids) {\n    const railgunTxidCommitments = railgunTxidMap[railgunTxid];\n    if (!railgunTxidCommitments) {\n      continue;\n    }\n    const hasAllCommitments = commitments.every(commitment =>\n      railgunTxidCommitments.includes(commitment),\n    );\n    if (hasAllCommitments) {\n      return railgunTxid;\n    }\n  }\n  throw new Error('railgunTxid not found including all transact commitments');\n};\n\nconst formatShieldCommitmentEvent = (\n  commitment: GraphShieldCommitmentV3,\n): CommitmentEvent => {\n  return V3Events.formatShieldEvent(\n    commitment.transactionHash,\n    Number(commitment.blockNumber),\n    commitment.from,\n    {\n      npk: commitment.preimage.npk,\n      token: {\n        tokenType: BigInt(\n          graphTokenTypeToEngineTokenType(commitment.preimage.token.tokenType),\n        ),\n        tokenAddress: commitment.preimage.token.tokenAddress,\n        tokenSubID: BigInt(commitment.preimage.token.tokenSubID),\n      },\n      value: BigInt(commitment.preimage.value),\n    },\n    {\n      encryptedBundle: commitment.encryptedBundle as [string, string, string],\n      shieldKey: commitment.shieldKey,\n    },\n    commitment.treeNumber,\n    commitment.treePosition,\n    BigInt(commitment.fee),\n  );\n};\n\nconst formatTransactCommitmentEvent = (\n  commitment: GraphTransactCommitmentV3,\n  railgunTxid: string,\n): CommitmentEvent => {\n  return V3Events.formatTransactEvent(\n    commitment.transactionHash,\n    Number(commitment.blockNumber),\n    commitment.hashes,\n    commitment.commitmentCiphertexts,\n    commitment.treeNumber,\n    commitment.batchStartTreePosition,\n    commitment.transactIndex,\n    commitment.senderCiphertext,\n    railgunTxid,\n  );\n};\n"]}