{"version":3,"file":"quick-sync-events-graph-v2.js","sourceRoot":"","sources":["../../../../../src/services/railgun/quick-sync/V2/quick-sync-events-graph-v2.ts"],"names":[],"mappings":";;;AACA,oEAM0C;AAC1C,uCAAmD;AACnD,mDAA8D;AAC9D,yEAMoC;AACpC,sDAA6D;AAC7D,gDAAmE;AAEnE,MAAM,MAAM,GAA0B,EAAE,CAAC;AAEzC,gCAAgC;AAChC,0EAA0E;AAC1E,MAAM,iBAAiB,GAAG,MAAM,CAAC;AAEjC,MAAM,oBAAoB,GAAG,CAAC,WAAwB,EAAU,EAAE;IAChE,QAAQ,WAAW,EAAE;QACnB,KAAK,2BAAW,CAAC,QAAQ;YACvB,OAAO,UAAU,CAAC;QACpB,KAAK,2BAAW,CAAC,eAAe;YAC9B,OAAO,SAAS,CAAC;QACnB,KAAK,2BAAW,CAAC,QAAQ;YACvB,OAAO,KAAK,CAAC;QACf,KAAK,2BAAW,CAAC,OAAO;YACtB,OAAO,OAAO,CAAC;QACjB,KAAK,2BAAW,CAAC,QAAQ;YACvB,OAAO,cAAc,CAAC;QACxB,KAAK,2BAAW,CAAC,WAAW,CAAC;QAC7B,KAAK,2BAAW,CAAC,yBAAyB,CAAC;QAC3C,KAAK,2BAAW,CAAC,yBAAyB,CAAC;QAC3C,KAAK,2BAAW,CAAC,0BAA0B,CAAC;QAC5C,KAAK,2BAAW,CAAC,wBAAwB,CAAC;QAC1C,KAAK,2BAAW,CAAC,OAAO,CAAC;QACzB;YACE,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;KACnE;AACH,CAAC,CAAC;AAEF,MAAM,oBAAoB,GAAG,CAAC,WAAwB,EAAE,EAAE;IACxD,IAAI;QACF,oBAAoB,CAAC,WAAW,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC;KACb;IAAC,MAAM;QACN,OAAO,KAAK,CAAC;KACd;AACH,CAAC,CAAC;AAEK,MAAM,sBAAsB,GAAG,KAAK,EACzC,KAAY,EACZ,aAAqB,EACO,EAAE;IAC9B,MAAM,OAAO,GAAG,IAAA,+BAAe,EAAC,KAAK,CAAC,CAAC;IACvC,IAAI,CAAC,OAAO,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACnD,uDAAuD;QACvD,OAAO,0BAAY,CAAC;KACrB;IAED,MAAM,GAAG,GAAG,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAE3C,MAAM,UAAU,GAAG,MAAM,IAAA,iCAAmB,EAC1C,KAAK,EAAE,WAAmB,EAAE,EAAE,CAC5B,CACE,MAAM,GAAG,CAAC,UAAU,CAAC;QACnB,WAAW;KACZ,CAAC,CACH,CAAC,UAAU,EACd,aAAa,CAAC,QAAQ,EAAE,EACxB,iBAAiB,CAClB,CAAC;IACF,MAAM,IAAA,qBAAK,EAAC,GAAG,CAAC,CAAC;IACjB,MAAM,SAAS,GAAG,MAAM,IAAA,iCAAmB,EACzC,KAAK,EAAE,WAAmB,EAAE,EAAE,CAC5B,CACE,MAAM,GAAG,CAAC,SAAS,CAAC;QAClB,WAAW;KACZ,CAAC,CACH,CAAC,SAAS,EACb,aAAa,CAAC,QAAQ,EAAE,EACxB,iBAAiB,CAClB,CAAC;IACF,MAAM,IAAA,qBAAK,EAAC,GAAG,CAAC,CAAC;IACjB,MAAM,WAAW,GAAG,MAAM,IAAA,iCAAmB,EAC3C,KAAK,EAAE,WAAmB,EAAE,EAAE,CAC5B,CACE,MAAM,GAAG,CAAC,WAAW,CAAC;QACpB,WAAW;KACZ,CAAC,CACH,CAAC,WAAW,EACf,aAAa,CAAC,QAAQ,EAAE,EACxB,iBAAiB,CAClB,CAAC;IAEF,MAAM,kBAAkB,GAAG,IAAA,iCAAoB,EAAC,UAAU,CAAC,CAAC;IAC5D,MAAM,iBAAiB,GAAG,IAAA,iCAAoB,EAAC,SAAS,CAAC,CAAC;IAC1D,MAAM,mBAAmB,GAAG,IAAA,iCAAoB,EAAC,WAAW,CAAC,CAAC;IAC9D,MAAM,sBAAsB,GAC1B,4BAA4B,CAAC,mBAAmB,CAAC,CAAC;IAEpD,sBAAsB,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;IAE9D,MAAM,eAAe,GAAG,IAAA,uDAA4B,EAAC,kBAAkB,CAAC,CAAC;IACzE,MAAM,cAAc,GAAG,IAAA,sDAA2B,EAAC,iBAAiB,CAAC,CAAC;IACtE,MAAM,gBAAgB,GAAG,IAAA,wDAA6B,EACpD,sBAAsB,CACvB,CAAC;IAEF,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,gBAAgB,EAAE,CAAC;AAC/D,CAAC,CAAC;AA5DW,QAAA,sBAAsB,0BA4DjC;AAEF,MAAM,4BAA4B,GAAG,CACnC,oBAAyC,EACf,EAAE;IAC5B,MAAM,kBAAkB,GAAoC,EAAE,CAAC;IAC/D,KAAK,MAAM,UAAU,IAAI,oBAAoB,EAAE;QAC7C,MAAM,aAAa,GAAG,UAAU,CAAC,sBAAsB,CAAC;QACxD,MAAM,aAAa,GAAG,kBAAkB,CAAC,aAAa,CAAC,CAAC;QACxD,IAAI,IAAA,yBAAS,EAAC,aAAa,CAAC,EAAE;YAC5B,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC5C;aAAM;YACL,kBAAkB,CAAC,UAAU,CAAC,sBAAsB,CAAC,GAAG;gBACtD,WAAW,EAAE,CAAC,UAAU,CAAC;gBACzB,eAAe,EAAE,UAAU,CAAC,eAAe;gBAC3C,UAAU,EAAE,UAAU,CAAC,UAAU;gBACjC,aAAa,EAAE,UAAU,CAAC,sBAAsB;gBAChD,WAAW,EAAE,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;aAC5C,CAAC;SACH;KACF;IACD,OAAO,IAAA,gCAAgB,EAAC,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC;AAEF,MAAM,gCAAgC,GAAG,CACvC,CAAyB,EACzB,CAAyB,EACzB,EAAE;IACF,IAAI,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,EAAE;QAC/B,OAAO,CAAC,CAAC,CAAC;KACX;IACD,IAAI,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,EAAE;QAC/B,OAAO,CAAC,CAAC;KACV;IACD,IAAI,CAAC,CAAC,aAAa,GAAG,CAAC,CAAC,aAAa,EAAE;QACrC,OAAO,CAAC,CAAC,CAAC;KACX;IACD,IAAI,CAAC,CAAC,aAAa,GAAG,CAAC,CAAC,aAAa,EAAE;QACrC,OAAO,CAAC,CAAC;KACV;IACD,OAAO,CAAC,CAAC;AACX,CAAC,CAAC;AAEF,MAAM,mBAAmB,GAAG,KAAK,EAC/B,WAAwB,EACD,EAAE;IACzB,MAAM,cAAc,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;IAC3C,IAAI,IAAA,yBAAS,EAAC,cAAc,CAAC,EAAE;QAC7B,OAAO,cAAc,CAAC;KACvB;IACD,MAAM,UAAU,GAAG,oBAAoB,CAAC,WAAW,CAAC,CAAC;IACrD,MAAM,WAAW,GAAG,MAAM,IAAA,wBAAc,GAAE,CAAC;IAC3C,MAAM,eAAe,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;QAC1D,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC;IACpC,CAAC,CAAC,CAAC;IACH,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE;QAChC,MAAM,IAAI,KAAK,CACb,2CAA2C,WAAW,WAAW,eAAe,CAAC,MAAM,EAAE,CAC1F,CAAC;KACH;IACD,WAAW,CAAC,OAAO,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C,MAAM,IAAI,GAAG,MAAM,IAAA,iBAAO,EAAC,WAAW,CAAC,CAAC;IACxC,MAAM,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;IAC3B,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,GAAG,EAAE;QAC/C,MAAM,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;QAChC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IACH,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,gBAAgB,GAAG,CACvB,WAAwB,EACxB,aAA8B,EAC9B,EAAE;IACF,MAAM,aAAa,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC,IAAI,CACzD,CAAC,EAAE,mBAAmB,EAAE,EAAE,EAAE,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAChE,CAAC;IACF,OAAO,IAAA,gBAAM,EAAoC,CAAC,GAAG,IAAI,EAAE,EAAE,CAC3D,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,CAAC,CAC1D,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { AccumulatedEvents, Chain } from '@railgun-community/engine';\nimport {\n  NetworkName,\n  delay,\n  isDefined,\n  networkForChain,\n  removeUndefineds,\n} from '@railgun-community/shared-models';\nimport { getMeshOptions, getSdk } from './graphql';\nimport { MeshInstance, getMesh } from '@graphql-mesh/runtime';\nimport {\n  GraphCommitmentV2,\n  GraphCommitmentBatchV2,\n  formatGraphCommitmentEventsV2,\n  formatGraphNullifierEventsV2,\n  formatGraphUnshieldEventsV2,\n} from './graph-type-formatters-v2';\nimport { removeDuplicatesByID } from '../../util/graph-util';\nimport { EMPTY_EVENTS, autoPaginatingQuery } from '../graph-query';\n\nconst meshes: MapType<MeshInstance> = {};\n\n// 1.5 full trees of commitments\n// TODO: This will have to change when we have more than 100k commitments.\nconst MAX_QUERY_RESULTS = 100000;\n\nconst sourceNameForNetwork = (networkName: NetworkName): string => {\n  switch (networkName) {\n    case NetworkName.Ethereum:\n      return 'ethereum';\n    case NetworkName.EthereumSepolia:\n      return 'sepolia';\n    case NetworkName.BNBChain:\n      return 'bsc';\n    case NetworkName.Polygon:\n      return 'matic';\n    case NetworkName.Arbitrum:\n      return 'arbitrum-one';\n    case NetworkName.PolygonAmoy:\n    case NetworkName.ArbitrumGoerli_DEPRECATED:\n    case NetworkName.EthereumGoerli_DEPRECATED:\n    case NetworkName.EthereumRopsten_DEPRECATED:\n    case NetworkName.PolygonMumbai_DEPRECATED:\n    case NetworkName.Hardhat:\n    default:\n      throw new Error('No Graph API hosted service for this network');\n  }\n};\n\nconst isSupportedByNetwork = (networkName: NetworkName) => {\n  try {\n    sourceNameForNetwork(networkName);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nexport const quickSyncEventsGraphV2 = async (\n  chain: Chain,\n  startingBlock: number,\n): Promise<AccumulatedEvents> => {\n  const network = networkForChain(chain);\n  if (!network || !isSupportedByNetwork(network.name)) {\n    // Return empty logs, Engine will default to full scan.\n    return EMPTY_EVENTS;\n  }\n\n  const sdk = getBuiltGraphSDK(network.name);\n\n  const nullifiers = await autoPaginatingQuery(\n    async (blockNumber: string) =>\n      (\n        await sdk.Nullifiers({\n          blockNumber,\n        })\n      ).nullifiers,\n    startingBlock.toString(),\n    MAX_QUERY_RESULTS,\n  );\n  await delay(100);\n  const unshields = await autoPaginatingQuery(\n    async (blockNumber: string) =>\n      (\n        await sdk.Unshields({\n          blockNumber,\n        })\n      ).unshields,\n    startingBlock.toString(),\n    MAX_QUERY_RESULTS,\n  );\n  await delay(100);\n  const commitments = await autoPaginatingQuery(\n    async (blockNumber: string) =>\n      (\n        await sdk.Commitments({\n          blockNumber,\n        })\n      ).commitments,\n    startingBlock.toString(),\n    MAX_QUERY_RESULTS,\n  );\n\n  const filteredNullifiers = removeDuplicatesByID(nullifiers);\n  const filteredUnshields = removeDuplicatesByID(unshields);\n  const filteredCommitments = removeDuplicatesByID(commitments);\n  const graphCommitmentBatches =\n    createGraphCommitmentBatches(filteredCommitments);\n\n  graphCommitmentBatches.sort(sortByTreeNumberAndStartPosition);\n\n  const nullifierEvents = formatGraphNullifierEventsV2(filteredNullifiers);\n  const unshieldEvents = formatGraphUnshieldEventsV2(filteredUnshields);\n  const commitmentEvents = formatGraphCommitmentEventsV2(\n    graphCommitmentBatches,\n  );\n\n  return { nullifierEvents, unshieldEvents, commitmentEvents };\n};\n\nconst createGraphCommitmentBatches = (\n  flattenedCommitments: GraphCommitmentV2[],\n): GraphCommitmentBatchV2[] => {\n  const graphCommitmentMap: MapType<GraphCommitmentBatchV2> = {};\n  for (const commitment of flattenedCommitments) {\n    const startPosition = commitment.batchStartTreePosition;\n    const existingBatch = graphCommitmentMap[startPosition];\n    if (isDefined(existingBatch)) {\n      existingBatch.commitments.push(commitment);\n    } else {\n      graphCommitmentMap[commitment.batchStartTreePosition] = {\n        commitments: [commitment],\n        transactionHash: commitment.transactionHash,\n        treeNumber: commitment.treeNumber,\n        startPosition: commitment.batchStartTreePosition,\n        blockNumber: Number(commitment.blockNumber),\n      };\n    }\n  }\n  return removeUndefineds(Object.values(graphCommitmentMap));\n};\n\nconst sortByTreeNumberAndStartPosition = (\n  a: GraphCommitmentBatchV2,\n  b: GraphCommitmentBatchV2,\n) => {\n  if (a.treeNumber < b.treeNumber) {\n    return -1;\n  }\n  if (a.treeNumber > b.treeNumber) {\n    return 1;\n  }\n  if (a.startPosition < b.startPosition) {\n    return -1;\n  }\n  if (a.startPosition > b.startPosition) {\n    return 1;\n  }\n  return 0;\n};\n\nconst getBuiltGraphClient = async (\n  networkName: NetworkName,\n): Promise<MeshInstance> => {\n  const meshForNetwork = meshes[networkName];\n  if (isDefined(meshForNetwork)) {\n    return meshForNetwork;\n  }\n  const sourceName = sourceNameForNetwork(networkName);\n  const meshOptions = await getMeshOptions();\n  const filteredSources = meshOptions.sources.filter(source => {\n    return source.name === sourceName;\n  });\n  if (filteredSources.length !== 1) {\n    throw new Error(\n      `Expected exactly one source for network ${networkName}, found ${filteredSources.length}`,\n    );\n  }\n  meshOptions.sources = [filteredSources[0]];\n  const mesh = await getMesh(meshOptions);\n  meshes[networkName] = mesh;\n  const id = mesh.pubsub.subscribe('destroy', () => {\n    meshes[networkName] = undefined;\n    mesh.pubsub.unsubscribe(id);\n  });\n  return mesh;\n};\n\nconst getBuiltGraphSDK = <TGlobalContext, TOperationContext>(\n  networkName: NetworkName,\n  globalContext?: TGlobalContext,\n) => {\n  const sdkRequester$ = getBuiltGraphClient(networkName).then(\n    ({ sdkRequesterFactory }) => sdkRequesterFactory(globalContext),\n  );\n  return getSdk<TOperationContext, TGlobalContext>((...args) =>\n    sdkRequester$.then(sdkRequester => sdkRequester(...args)),\n  );\n};\n"]}