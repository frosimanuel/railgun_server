{"version":3,"file":"graph-type-formatters-v2.js","sourceRoot":"","sources":["../../../../../src/services/railgun/quick-sync/V2/graph-type-formatters-v2.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Nullifier,\n  UnshieldStoredEvent,\n  CommitmentEvent,\n  Commitment,\n  LegacyGeneratedCommitment,\n  CommitmentType,\n  LegacyEncryptedCommitment,\n  ShieldCommitment,\n  TransactCommitmentV2,\n  CommitmentCiphertextV2,\n  Ciphertext,\n  LegacyCommitmentCiphertext,\n} from '@railgun-community/engine';\nimport {\n  Nullifier as GraphNullifierV2,\n  Unshield as GraphUnshieldV2,\n  LegacyGeneratedCommitment as GraphLegacyGeneratedCommitmentV2,\n  LegacyEncryptedCommitment as GraphLegacyEncryptedCommitmentV2,\n  ShieldCommitment as GraphShieldCommitmentV2,\n  TransactCommitment as GraphTransactCommitmentV2,\n  LegacyCommitmentCiphertext as GraphLegacyCommitmentCiphertextV2,\n  CommitmentCiphertext as GraphCommitmentCiphertextV2,\n  Ciphertext as GraphCiphertextV2,\n} from './graphql';\nimport { getAddress } from 'ethers';\nimport { isDefined } from '@railgun-community/shared-models';\nimport {\n  formatTo32Bytes,\n  bigIntStringToHex,\n  formatTo16Bytes,\n  formatPreImage,\n  graphTokenTypeToEngineTokenType,\n} from '../shared-formatters';\n\nexport type GraphCommitmentV2 =\n  | GraphLegacyEncryptedCommitmentV2\n  | GraphLegacyGeneratedCommitmentV2\n  | GraphShieldCommitmentV2\n  | GraphTransactCommitmentV2;\n\nexport type GraphCommitmentBatchV2 = {\n  transactionHash: string;\n  commitments: GraphCommitmentV2[];\n  treeNumber: number;\n  startPosition: number;\n  blockNumber: number;\n};\n\nexport const formatGraphNullifierEventsV2 = (\n  nullifiers: GraphNullifierV2[],\n): Nullifier[] => {\n  return nullifiers.map(nullifier => {\n    return {\n      txid: formatTo32Bytes(nullifier.transactionHash, false),\n      nullifier: formatTo32Bytes(nullifier.nullifier, false),\n      treeNumber: nullifier.treeNumber,\n      blockNumber: Number(nullifier.blockNumber),\n      spentRailgunTxid: undefined,\n    };\n  });\n};\n\nexport const formatGraphUnshieldEventsV2 = (\n  unshields: GraphUnshieldV2[],\n): UnshieldStoredEvent[] => {\n  return unshields.map(unshield => {\n    return {\n      txid: formatTo32Bytes(unshield.transactionHash, false),\n      timestamp: Number(unshield.blockTimestamp),\n      eventLogIndex: Number(unshield.eventLogIndex),\n      toAddress: getAddress(unshield.to),\n      tokenType: graphTokenTypeToEngineTokenType(unshield.token.tokenType),\n      tokenAddress: getAddress(unshield.token.tokenAddress),\n      tokenSubID: unshield.token.tokenSubID,\n      amount: bigIntStringToHex(unshield.amount),\n      fee: bigIntStringToHex(unshield.fee),\n      blockNumber: Number(unshield.blockNumber),\n      railgunTxid: undefined,\n      poisPerList: undefined,\n      blindedCommitment: undefined,\n    };\n  });\n};\n\nexport const formatGraphCommitmentEventsV2 = (\n  graphCommitmentBatches: GraphCommitmentBatchV2[],\n): CommitmentEvent[] => {\n  return graphCommitmentBatches.map(graphCommitmentBatch => {\n    return {\n      txid: formatTo32Bytes(graphCommitmentBatch.transactionHash, false),\n      commitments: graphCommitmentBatch.commitments.map(formatCommitment),\n      treeNumber: graphCommitmentBatch.treeNumber,\n      startPosition: graphCommitmentBatch.startPosition,\n      blockNumber: graphCommitmentBatch.blockNumber,\n    };\n  });\n};\n\nconst formatCommitment = (commitment: GraphCommitmentV2): Commitment => {\n  switch (commitment.commitmentType) {\n    case 'LegacyGeneratedCommitment':\n      return formatLegacyGeneratedCommitment(\n        commitment as GraphLegacyGeneratedCommitmentV2,\n      );\n    case 'LegacyEncryptedCommitment':\n      return formatLegacyEncryptedCommitment(\n        commitment as GraphLegacyEncryptedCommitmentV2,\n      );\n    case 'ShieldCommitment':\n      return formatShieldCommitment(commitment as GraphShieldCommitmentV2);\n    case 'TransactCommitment':\n      return formatTransactCommitment(commitment as GraphTransactCommitmentV2);\n  }\n};\n\nconst formatCiphertext = (graphCiphertext: GraphCiphertextV2): Ciphertext => {\n  return {\n    iv: formatTo16Bytes(graphCiphertext.iv, false),\n    tag: formatTo16Bytes(graphCiphertext.tag, false),\n    data: graphCiphertext.data.map(d => formatTo32Bytes(d, false)),\n  };\n};\n\nconst formatLegacyCommitmentCiphertext = (\n  graphLegacyCommitmentCiphertext: GraphLegacyCommitmentCiphertextV2,\n): LegacyCommitmentCiphertext => {\n  return {\n    ciphertext: formatCiphertext(graphLegacyCommitmentCiphertext.ciphertext),\n    ephemeralKeys: graphLegacyCommitmentCiphertext.ephemeralKeys.map(\n      ephemeralKey => formatTo32Bytes(ephemeralKey, false),\n    ),\n    memo: graphLegacyCommitmentCiphertext.memo.map(m =>\n      formatTo32Bytes(m, false),\n    ),\n  };\n};\n\nconst formatCommitmentCiphertext = (\n  graphCommitmentCiphertext: GraphCommitmentCiphertextV2,\n): CommitmentCiphertextV2 => {\n  return {\n    ciphertext: formatCiphertext(graphCommitmentCiphertext.ciphertext),\n    blindedReceiverViewingKey: formatTo32Bytes(\n      graphCommitmentCiphertext.blindedReceiverViewingKey,\n      false,\n    ),\n    blindedSenderViewingKey: formatTo32Bytes(\n      graphCommitmentCiphertext.blindedSenderViewingKey,\n      false,\n    ),\n    memo: graphCommitmentCiphertext.memo,\n    annotationData: graphCommitmentCiphertext.annotationData,\n  };\n};\n\nconst formatLegacyGeneratedCommitment = (\n  commitment: GraphLegacyGeneratedCommitmentV2,\n): LegacyGeneratedCommitment => {\n  return {\n    txid: formatTo32Bytes(commitment.transactionHash, false),\n    timestamp: Number(commitment.blockTimestamp),\n    commitmentType: CommitmentType.LegacyGeneratedCommitment,\n    hash: formatTo32Bytes(bigIntStringToHex(commitment.hash), false),\n    preImage: formatPreImage(commitment.preimage),\n    encryptedRandom: [\n      formatTo32Bytes(commitment.encryptedRandom[0], false),\n      formatTo16Bytes(commitment.encryptedRandom[1], false),\n    ] as [string, string],\n    blockNumber: Number(commitment.blockNumber),\n    utxoTree: commitment.treeNumber,\n    utxoIndex: commitment.treePosition,\n  };\n};\n\nconst formatLegacyEncryptedCommitment = (\n  commitment: GraphLegacyEncryptedCommitmentV2,\n): LegacyEncryptedCommitment => {\n  return {\n    txid: formatTo32Bytes(commitment.transactionHash, false),\n    timestamp: Number(commitment.blockTimestamp),\n    commitmentType: CommitmentType.LegacyEncryptedCommitment,\n    hash: formatTo32Bytes(bigIntStringToHex(commitment.hash), false),\n    ciphertext: formatLegacyCommitmentCiphertext(commitment.legacyCiphertext),\n    blockNumber: Number(commitment.blockNumber),\n    utxoTree: commitment.treeNumber,\n    utxoIndex: commitment.treePosition,\n    railgunTxid: undefined,\n  };\n};\n\nconst formatShieldCommitment = (\n  commitment: GraphShieldCommitmentV2,\n): ShieldCommitment => {\n  const shieldCommitment: ShieldCommitment = {\n    txid: formatTo32Bytes(commitment.transactionHash, false),\n    timestamp: Number(commitment.blockTimestamp),\n    commitmentType: CommitmentType.ShieldCommitment,\n    hash: formatTo32Bytes(bigIntStringToHex(commitment.hash), false),\n    preImage: formatPreImage(commitment.preimage),\n    blockNumber: Number(commitment.blockNumber),\n    encryptedBundle: commitment.encryptedBundle as [string, string, string],\n    shieldKey: commitment.shieldKey,\n    fee: isDefined(commitment.fee) ? commitment.fee.toString() : undefined,\n    utxoTree: commitment.treeNumber,\n    utxoIndex: commitment.treePosition,\n    from: undefined,\n  };\n  if (!isDefined(shieldCommitment.fee)) {\n    delete shieldCommitment.fee;\n  }\n  return shieldCommitment;\n};\n\nconst formatTransactCommitment = (\n  commitment: GraphTransactCommitmentV2,\n): TransactCommitmentV2 => {\n  return {\n    txid: formatTo32Bytes(commitment.transactionHash, false),\n    timestamp: Number(commitment.blockTimestamp),\n    commitmentType: CommitmentType.TransactCommitmentV2,\n    hash: formatTo32Bytes(bigIntStringToHex(commitment.hash), false),\n    ciphertext: formatCommitmentCiphertext(commitment.ciphertext),\n    blockNumber: Number(commitment.blockNumber),\n    utxoTree: commitment.treeNumber,\n    utxoIndex: commitment.treePosition,\n    railgunTxid: undefined,\n  };\n};\n"]}