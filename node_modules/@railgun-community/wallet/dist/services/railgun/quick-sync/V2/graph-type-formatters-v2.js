"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatGraphCommitmentEventsV2 = exports.formatGraphUnshieldEventsV2 = exports.formatGraphNullifierEventsV2 = void 0;
const engine_1 = require("@railgun-community/engine");
const ethers_1 = require("ethers");
const shared_models_1 = require("@railgun-community/shared-models");
const shared_formatters_1 = require("../shared-formatters");
const formatGraphNullifierEventsV2 = (nullifiers) => {
    return nullifiers.map(nullifier => {
        return {
            txid: (0, shared_formatters_1.formatTo32Bytes)(nullifier.transactionHash, false),
            nullifier: (0, shared_formatters_1.formatTo32Bytes)(nullifier.nullifier, false),
            treeNumber: nullifier.treeNumber,
            blockNumber: Number(nullifier.blockNumber),
            spentRailgunTxid: undefined,
        };
    });
};
exports.formatGraphNullifierEventsV2 = formatGraphNullifierEventsV2;
const formatGraphUnshieldEventsV2 = (unshields) => {
    return unshields.map(unshield => {
        return {
            txid: (0, shared_formatters_1.formatTo32Bytes)(unshield.transactionHash, false),
            timestamp: Number(unshield.blockTimestamp),
            eventLogIndex: Number(unshield.eventLogIndex),
            toAddress: (0, ethers_1.getAddress)(unshield.to),
            tokenType: (0, shared_formatters_1.graphTokenTypeToEngineTokenType)(unshield.token.tokenType),
            tokenAddress: (0, ethers_1.getAddress)(unshield.token.tokenAddress),
            tokenSubID: unshield.token.tokenSubID,
            amount: (0, shared_formatters_1.bigIntStringToHex)(unshield.amount),
            fee: (0, shared_formatters_1.bigIntStringToHex)(unshield.fee),
            blockNumber: Number(unshield.blockNumber),
            railgunTxid: undefined,
            poisPerList: undefined,
            blindedCommitment: undefined,
        };
    });
};
exports.formatGraphUnshieldEventsV2 = formatGraphUnshieldEventsV2;
const formatGraphCommitmentEventsV2 = (graphCommitmentBatches) => {
    return graphCommitmentBatches.map(graphCommitmentBatch => {
        return {
            txid: (0, shared_formatters_1.formatTo32Bytes)(graphCommitmentBatch.transactionHash, false),
            commitments: graphCommitmentBatch.commitments.map(formatCommitment),
            treeNumber: graphCommitmentBatch.treeNumber,
            startPosition: graphCommitmentBatch.startPosition,
            blockNumber: graphCommitmentBatch.blockNumber,
        };
    });
};
exports.formatGraphCommitmentEventsV2 = formatGraphCommitmentEventsV2;
const formatCommitment = (commitment) => {
    switch (commitment.commitmentType) {
        case 'LegacyGeneratedCommitment':
            return formatLegacyGeneratedCommitment(commitment);
        case 'LegacyEncryptedCommitment':
            return formatLegacyEncryptedCommitment(commitment);
        case 'ShieldCommitment':
            return formatShieldCommitment(commitment);
        case 'TransactCommitment':
            return formatTransactCommitment(commitment);
    }
};
const formatCiphertext = (graphCiphertext) => {
    return {
        iv: (0, shared_formatters_1.formatTo16Bytes)(graphCiphertext.iv, false),
        tag: (0, shared_formatters_1.formatTo16Bytes)(graphCiphertext.tag, false),
        data: graphCiphertext.data.map(d => (0, shared_formatters_1.formatTo32Bytes)(d, false)),
    };
};
const formatLegacyCommitmentCiphertext = (graphLegacyCommitmentCiphertext) => {
    return {
        ciphertext: formatCiphertext(graphLegacyCommitmentCiphertext.ciphertext),
        ephemeralKeys: graphLegacyCommitmentCiphertext.ephemeralKeys.map(ephemeralKey => (0, shared_formatters_1.formatTo32Bytes)(ephemeralKey, false)),
        memo: graphLegacyCommitmentCiphertext.memo.map(m => (0, shared_formatters_1.formatTo32Bytes)(m, false)),
    };
};
const formatCommitmentCiphertext = (graphCommitmentCiphertext) => {
    return {
        ciphertext: formatCiphertext(graphCommitmentCiphertext.ciphertext),
        blindedReceiverViewingKey: (0, shared_formatters_1.formatTo32Bytes)(graphCommitmentCiphertext.blindedReceiverViewingKey, false),
        blindedSenderViewingKey: (0, shared_formatters_1.formatTo32Bytes)(graphCommitmentCiphertext.blindedSenderViewingKey, false),
        memo: graphCommitmentCiphertext.memo,
        annotationData: graphCommitmentCiphertext.annotationData,
    };
};
const formatLegacyGeneratedCommitment = (commitment) => {
    return {
        txid: (0, shared_formatters_1.formatTo32Bytes)(commitment.transactionHash, false),
        timestamp: Number(commitment.blockTimestamp),
        commitmentType: engine_1.CommitmentType.LegacyGeneratedCommitment,
        hash: (0, shared_formatters_1.formatTo32Bytes)((0, shared_formatters_1.bigIntStringToHex)(commitment.hash), false),
        preImage: (0, shared_formatters_1.formatPreImage)(commitment.preimage),
        encryptedRandom: [
            (0, shared_formatters_1.formatTo32Bytes)(commitment.encryptedRandom[0], false),
            (0, shared_formatters_1.formatTo16Bytes)(commitment.encryptedRandom[1], false),
        ],
        blockNumber: Number(commitment.blockNumber),
        utxoTree: commitment.treeNumber,
        utxoIndex: commitment.treePosition,
    };
};
const formatLegacyEncryptedCommitment = (commitment) => {
    return {
        txid: (0, shared_formatters_1.formatTo32Bytes)(commitment.transactionHash, false),
        timestamp: Number(commitment.blockTimestamp),
        commitmentType: engine_1.CommitmentType.LegacyEncryptedCommitment,
        hash: (0, shared_formatters_1.formatTo32Bytes)((0, shared_formatters_1.bigIntStringToHex)(commitment.hash), false),
        ciphertext: formatLegacyCommitmentCiphertext(commitment.legacyCiphertext),
        blockNumber: Number(commitment.blockNumber),
        utxoTree: commitment.treeNumber,
        utxoIndex: commitment.treePosition,
        railgunTxid: undefined,
    };
};
const formatShieldCommitment = (commitment) => {
    const shieldCommitment = {
        txid: (0, shared_formatters_1.formatTo32Bytes)(commitment.transactionHash, false),
        timestamp: Number(commitment.blockTimestamp),
        commitmentType: engine_1.CommitmentType.ShieldCommitment,
        hash: (0, shared_formatters_1.formatTo32Bytes)((0, shared_formatters_1.bigIntStringToHex)(commitment.hash), false),
        preImage: (0, shared_formatters_1.formatPreImage)(commitment.preimage),
        blockNumber: Number(commitment.blockNumber),
        encryptedBundle: commitment.encryptedBundle,
        shieldKey: commitment.shieldKey,
        fee: (0, shared_models_1.isDefined)(commitment.fee) ? commitment.fee.toString() : undefined,
        utxoTree: commitment.treeNumber,
        utxoIndex: commitment.treePosition,
        from: undefined,
    };
    if (!(0, shared_models_1.isDefined)(shieldCommitment.fee)) {
        delete shieldCommitment.fee;
    }
    return shieldCommitment;
};
const formatTransactCommitment = (commitment) => {
    return {
        txid: (0, shared_formatters_1.formatTo32Bytes)(commitment.transactionHash, false),
        timestamp: Number(commitment.blockTimestamp),
        commitmentType: engine_1.CommitmentType.TransactCommitmentV2,
        hash: (0, shared_formatters_1.formatTo32Bytes)((0, shared_formatters_1.bigIntStringToHex)(commitment.hash), false),
        ciphertext: formatCommitmentCiphertext(commitment.ciphertext),
        blockNumber: Number(commitment.blockNumber),
        utxoTree: commitment.treeNumber,
        utxoIndex: commitment.treePosition,
        railgunTxid: undefined,
    };
};
//# sourceMappingURL=graph-type-formatters-v2.js.map