{"version":3,"file":"quick-sync-events-graph-v2.test.js","sourceRoot":"","sources":["../../../../../../src/services/railgun/quick-sync/V2/__tests__/quick-sync-events-graph-v2.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-bitwise */\nimport { Chain, CommitmentEvent, TXIDVersion } from '@railgun-community/engine';\nimport { NetworkName, NETWORK_CONFIG } from '@railgun-community/shared-models';\nimport chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport { quickSyncEventsGraph } from '../../quick-sync-events';\nimport { isV2Test } from '../../../../../tests/helper.test';\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\nconst txidVersion = TXIDVersion.V2_PoseidonMerkle;\n\nconst ETH_CHAIN: Chain = NETWORK_CONFIG[NetworkName.Ethereum].chain;\nconst EXPECTED_COMMITMENT_GROUP_EVENTS_ETH = 20_000;\nconst EXPECTED_NULLIFIER_EVENTS_ETH = 27_000;\nconst EXPECTED_UNSHIELD_EVENTS_ETH = 10_000;\n\nconst POLYGON_CHAIN: Chain = NETWORK_CONFIG[NetworkName.Polygon].chain;\nconst EXPECTED_COMMITMENT_GROUP_EVENTS_POLYGON = 20_000;\nconst EXPECTED_NULLIFIER_EVENTS_POLYGON = 30_000;\nconst EXPECTED_UNSHIELD_EVENTS_POLYGON = 10_000;\n\nconst BNB_CHAIN: Chain = NETWORK_CONFIG[NetworkName.BNBChain].chain;\nconst EXPECTED_COMMITMENT_GROUP_EVENTS_BNB = 9_000;\nconst EXPECTED_NULLIFIER_EVENTS_BNB = 12_000;\nconst EXPECTED_UNSHIELD_EVENTS_BNB = 4_000;\n\nconst ARBITRUM_CHAIN: Chain = NETWORK_CONFIG[NetworkName.Arbitrum].chain;\nconst EXPECTED_COMMITMENT_GROUP_EVENTS_ARBITRUM = 17_000;\nconst EXPECTED_NULLIFIER_EVENTS_ARBITRUM = 22_000;\nconst EXPECTED_UNSHIELD_EVENTS_ARBITRUM = 9_000;\n\nconst SEPOLIA_CHAIN: Chain = NETWORK_CONFIG[NetworkName.EthereumSepolia].chain;\nconst EXPECTED_COMMITMENT_GROUP_EVENTS_SEPOLIA = 1;\nconst EXPECTED_NULLIFIER_EVENTS_SEPOLIA = 1;\nconst EXPECTED_UNSHIELD_EVENTS_SEPOLIA = 1;\n\nconst assertContiguousCommitmentEvents = (\n  commitmentEvents: CommitmentEvent[],\n  shouldThrow: boolean,\n) => {\n  // Track unique events by their actual start positions\n  const positionMap = new Map<number, Set<number>>();\n\n  // Build map of positions to their commitment indices\n  for (const event of commitmentEvents) {\n    const uniqueIndices = new Set(event.commitments.map(c => c.utxoIndex));\n    positionMap.set(event.startPosition, uniqueIndices);\n  }\n\n  // Get sorted positions\n  const positions = Array.from(positionMap.keys()).sort((a, b) => a - b);\n\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < positions.length - 1; i++) {\n    const currentPos = positions[i];\n    const nextPos = positions[i + 1];\n    \n    const currentIndices = positionMap.get(currentPos);\n\n    // Check if current position's indices bridge the gap\n    const maxIndexInCurrent = Math.max(...Array.from(currentIndices || []));\n    const bridgesGap = maxIndexInCurrent >= nextPos - 1;\n\n    // Only throw if there's a gap AND the current indices don't bridge it\n    if (nextPos !== currentPos + 1 && !bridgesGap) {\n      if (shouldThrow) {\n        throw new Error(`Gap in sequence: found ${nextPos} after ${currentPos} (max index: ${maxIndexInCurrent})`);\n      }\n    }\n  }\n};\n\ndescribe('quick-sync-events-graph-v2', () => {\n  it('[V2] Should make sure Graph V2 query has no data gaps in commitments - Ethereum', async function run() {\n    if (!isV2Test()) {\n      this.skip();\n      return;\n    }\n    const eventLog = await quickSyncEventsGraph(\n      txidVersion,\n      ETH_CHAIN,\n      14858124,\n    );\n    expect(eventLog).to.be.an('object');\n    expect(eventLog.commitmentEvents).to.be.an('array');\n    expect(eventLog.commitmentEvents.length).to.be.at.least(\n      EXPECTED_COMMITMENT_GROUP_EVENTS_ETH,\n    );\n    expect(eventLog.nullifierEvents.length).to.be.at.least(\n      EXPECTED_NULLIFIER_EVENTS_ETH,\n    );\n    expect(eventLog.unshieldEvents.length).to.be.at.least(\n      EXPECTED_UNSHIELD_EVENTS_ETH,\n    );\n\n    const shouldThrow = true;\n    assertContiguousCommitmentEvents(eventLog.commitmentEvents, shouldThrow);\n  }).timeout(200_000);\n\n  it('[V2] Should make sure Graph V2 query has no data gaps in commitments - Polygon', async function run() {\n    if (!isV2Test()) {\n      this.skip();\n      return;\n    }\n\n    const eventLog = await quickSyncEventsGraph(txidVersion, POLYGON_CHAIN, 0);\n    expect(eventLog).to.be.an('object');\n    expect(eventLog.commitmentEvents).to.be.an('array');\n    expect(eventLog.commitmentEvents.length).to.be.at.least(\n      EXPECTED_COMMITMENT_GROUP_EVENTS_POLYGON,\n    );\n    expect(eventLog.nullifierEvents.length).to.be.at.least(\n      EXPECTED_NULLIFIER_EVENTS_POLYGON,\n    );\n    expect(eventLog.unshieldEvents.length).to.be.at.least(\n      EXPECTED_UNSHIELD_EVENTS_POLYGON,\n    );\n    expect(eventLog.unshieldEvents.length).to.be.at.least(\n      EXPECTED_UNSHIELD_EVENTS_POLYGON,\n    );\n\n    const shouldThrow = true;\n    assertContiguousCommitmentEvents(eventLog.commitmentEvents, shouldThrow);\n  }).timeout(200_000);\n\n  it('[V2] Should make sure Graph V2 query has no data gaps in commitments - BNB Smart Chain', async function run() {\n    if (!isV2Test()) {\n      this.skip();\n      return;\n    }\n\n    const eventLog = await quickSyncEventsGraph(txidVersion, BNB_CHAIN, 0);\n    expect(eventLog).to.be.an('object');\n    expect(eventLog.commitmentEvents).to.be.an('array');\n    expect(eventLog.commitmentEvents.length).to.be.at.least(\n      EXPECTED_COMMITMENT_GROUP_EVENTS_BNB,\n    );\n    expect(eventLog.nullifierEvents.length).to.be.at.least(\n      EXPECTED_NULLIFIER_EVENTS_BNB,\n    );\n    expect(eventLog.unshieldEvents.length).to.be.at.least(\n      EXPECTED_UNSHIELD_EVENTS_BNB,\n    );\n\n    const shouldThrow = true;\n    assertContiguousCommitmentEvents(eventLog.commitmentEvents, shouldThrow);\n  }).timeout(200_000);\n\n  it('[V2] Should make sure Graph V2 query has no data gaps in commitments - Arbitrum', async function run() {\n    if (!isV2Test()) {\n      this.skip();\n      return;\n    }\n\n    const eventLog = await quickSyncEventsGraph(txidVersion, ARBITRUM_CHAIN, 0);\n    expect(eventLog).to.be.an('object');\n    expect(eventLog.commitmentEvents).to.be.an('array');\n    expect(eventLog.commitmentEvents.length).to.be.at.least(\n      EXPECTED_COMMITMENT_GROUP_EVENTS_ARBITRUM,\n    );\n    expect(eventLog.nullifierEvents.length).to.be.at.least(\n      EXPECTED_NULLIFIER_EVENTS_ARBITRUM,\n    );\n    expect(eventLog.unshieldEvents.length).to.be.at.least(\n      EXPECTED_UNSHIELD_EVENTS_ARBITRUM,\n    );\n\n    const shouldThrow = true;\n    assertContiguousCommitmentEvents(eventLog.commitmentEvents, shouldThrow);\n  }).timeout(200_000);\n\n  it('[V2] Should make sure Graph V2 query has no data gaps in commitments - Sepolia', async function run() {\n    if (!isV2Test()) {\n      this.skip();\n      return;\n    }\n\n    const eventLog = await quickSyncEventsGraph(txidVersion, SEPOLIA_CHAIN, 0);\n    expect(eventLog).to.be.an('object');\n    expect(eventLog.commitmentEvents).to.be.an('array');\n    expect(eventLog.commitmentEvents.length).to.be.at.least(\n      EXPECTED_COMMITMENT_GROUP_EVENTS_SEPOLIA,\n    );\n    expect(eventLog.nullifierEvents.length).to.be.at.least(\n      EXPECTED_NULLIFIER_EVENTS_SEPOLIA,\n    );\n    expect(eventLog.unshieldEvents.length).to.be.at.least(\n      EXPECTED_UNSHIELD_EVENTS_SEPOLIA,\n    );\n\n    const shouldThrow = true;\n    assertContiguousCommitmentEvents(eventLog.commitmentEvents, shouldThrow);\n  }).timeout(90_000);\n\n  it('[V2] Should run live Railgun Event Log fetch for Polygon with high starting block', async function run() {\n    if (!isV2Test()) {\n      this.skip();\n      return;\n    }\n\n    const eventLog = await quickSyncEventsGraph(\n      txidVersion,\n      POLYGON_CHAIN,\n      100000000,\n    );\n    expect(eventLog).to.be.an('object');\n    expect(eventLog.commitmentEvents).to.be.an('array');\n    expect(eventLog.nullifierEvents).to.be.an('array');\n    expect(eventLog.commitmentEvents.length).to.equal(0);\n    expect(eventLog.nullifierEvents.length).to.equal(0);\n    expect(eventLog.unshieldEvents.length).to.equal(0);\n  }).timeout(200_000);\n});\n"]}