import { TransactionStructV2, TransactionStructV3 } from '@railgun-community/engine';
import { NetworkName, TransactionGasDetails, RailgunERC20Amount, RailgunTransactionGasEstimateResponse, FeeTokenDetails, RailgunERC20AmountRecipient, TXIDVersion } from '@railgun-community/shared-models';
import { ContractTransaction } from 'ethers';
export declare const calculateBroadcasterFeeERC20Amount: (feeTokenDetails: FeeTokenDetails, gasDetails: TransactionGasDetails) => RailgunERC20Amount;
export declare const gasEstimateResponseDummyProofIterativeBroadcasterFee: (generateDummyTransactionStructsWithBroadcasterFee: (broadcasterFeeERC20Amount: Optional<RailgunERC20Amount>) => Promise<(TransactionStructV2 | TransactionStructV3)[]>, generateTransaction: (serializedTransactions: (TransactionStructV2 | TransactionStructV3)[]) => Promise<ContractTransaction>, txidVersion: TXIDVersion, networkName: NetworkName, railgunWalletID: string, erc20AmountRecipients: RailgunERC20AmountRecipient[], originalGasDetails: TransactionGasDetails, feeTokenDetails: Optional<FeeTokenDetails>, sendWithPublicWallet: boolean, isCrossContractCall: boolean) => Promise<RailgunTransactionGasEstimateResponse>;
