{"version":3,"file":"tx-cross-contract-calls.js","sourceRoot":"","sources":["../../../src/services/transactions/tx-cross-contract-calls.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RailgunPopulateTransactionResponse,\n  RailgunTransactionGasEstimateResponse,\n  RailgunERC20Amount,\n  NetworkName,\n  ProofType,\n  TransactionReceiptLog,\n  FeeTokenDetails,\n  RailgunERC20AmountRecipient,\n  RailgunNFTAmountRecipient,\n  RailgunNFTAmount,\n  TransactionGasDetails,\n  isDefined,\n  RailgunERC20Recipient,\n  TXIDVersion,\n  NETWORK_CONFIG,\n} from '@railgun-community/shared-models';\nimport {\n  GenerateTransactionsProgressCallback,\n  generateDummyProofTransactions,\n  generateProofTransactions,\n  nullifiersForTransactions,\n} from './tx-generator';\nimport {\n  populateProvedTransaction,\n  setCachedProvedTransaction,\n} from './proof-cache';\nimport { sendErrorMessage } from '../../utils/logger';\nimport {\n  RelayAdaptHelper,\n  AdaptID,\n  NFTTokenData,\n  ByteUtils,\n  ByteLength,\n  MINIMUM_RELAY_ADAPT_CROSS_CONTRACT_CALLS_GAS_LIMIT_V2,\n  RelayAdaptShieldNFTRecipient,\n  TransactionStructV2,\n  TransactionStructV3,\n  RelayAdaptVersionedSmartContracts,\n} from '@railgun-community/engine';\nimport { assertNotBlockedAddress } from '../../utils/blocked-address';\nimport { gasEstimateResponseDummyProofIterativeBroadcasterFee } from './tx-gas-broadcaster-fee-estimator';\nimport { reportAndSanitizeError } from '../../utils/error';\nimport { ContractTransaction } from 'ethers';\nimport { isDecimalStr } from '../../utils';\nimport { bigIntStringToHex } from '../railgun/quick-sync/shared-formatters';\n\nconst createValidCrossContractCalls = (\n  crossContractCalls: ContractTransaction[],\n): ContractTransaction[] => {\n  if (!crossContractCalls.length) {\n    throw new Error('No cross contract calls in transaction.');\n  }\n  try {\n    return crossContractCalls.map(transactionRequest => {\n      if (!transactionRequest.to || !transactionRequest.data) {\n        throw new Error(`Cross-contract calls require 'to' and 'data' fields.`);\n      }\n      const transaction: ContractTransaction = {\n        to: transactionRequest.to,\n        value: transactionRequest.value,\n        data: ByteUtils.hexlify(transactionRequest.data, true),\n      };\n      assertNotBlockedAddress(transaction.to);\n      return transaction;\n    });\n  } catch (cause) {\n    if (!(cause instanceof Error)) {\n      throw new Error('Non-error thrown from createValidCrossContractCalls', {\n        cause,\n      });\n    }\n    throw reportAndSanitizeError(createValidCrossContractCalls.name, cause);\n  }\n};\n\nexport const createRelayAdaptUnshieldERC20AmountRecipients = (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  unshieldERC20Amounts: RailgunERC20Amount[],\n): RailgunERC20AmountRecipient[] => {\n  const chain = NETWORK_CONFIG[networkName].chain;\n  const relayAdaptContract =\n    RelayAdaptVersionedSmartContracts.getRelayAdaptContract(txidVersion, chain);\n  const unshieldERC20AmountRecipients: RailgunERC20AmountRecipient[] =\n    unshieldERC20Amounts.map(unshieldERC20Amount => ({\n      ...unshieldERC20Amount,\n      recipientAddress: relayAdaptContract.address,\n    }));\n  return unshieldERC20AmountRecipients;\n};\n\nexport const createRelayAdaptUnshieldNFTAmountRecipients = (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  unshieldNFTAmounts: RailgunNFTAmount[],\n): RailgunNFTAmountRecipient[] => {\n  const chain = NETWORK_CONFIG[networkName].chain;\n  const relayAdaptContract =\n    RelayAdaptVersionedSmartContracts.getRelayAdaptContract(txidVersion, chain);\n  const unshieldNFTAmountRecipients: RailgunNFTAmountRecipient[] =\n    unshieldNFTAmounts.map(unshieldNFTAmount => ({\n      ...unshieldNFTAmount,\n      recipientAddress: relayAdaptContract.address,\n    }));\n  return unshieldNFTAmountRecipients;\n};\n\nexport const createNFTTokenDataFromRailgunNFTAmount = (\n  nftAmount: RailgunNFTAmount,\n): NFTTokenData => {\n  const tokenSubIDHex = isDecimalStr(nftAmount.tokenSubID)\n    ? bigIntStringToHex(nftAmount.tokenSubID)\n    : nftAmount.tokenSubID;\n\n  return {\n    tokenAddress: ByteUtils.formatToByteLength(\n      nftAmount.nftAddress,\n      ByteLength.Address,\n      true,\n    ),\n    tokenType: nftAmount.nftTokenType as 1 | 2,\n    tokenSubID: ByteUtils.formatToByteLength(\n      tokenSubIDHex,\n      ByteLength.UINT_256,\n      true,\n    ),\n  };\n};\n\nconst createRelayAdaptShieldNFTRecipients = (\n  relayAdaptShieldNFTRecipients: RailgunNFTAmountRecipient[],\n): RelayAdaptShieldNFTRecipient[] => {\n  return relayAdaptShieldNFTRecipients.map(\n    (nftRecipient: RailgunNFTAmountRecipient) => ({\n      nftTokenData: createNFTTokenDataFromRailgunNFTAmount(nftRecipient),\n      recipientAddress: nftRecipient.recipientAddress,\n    }),\n  );\n};\n\nexport const populateProvedCrossContractCalls = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  relayAdaptUnshieldERC20Amounts: RailgunERC20Amount[],\n  relayAdaptUnshieldNFTAmounts: RailgunNFTAmount[],\n  relayAdaptShieldERC20Recipients: RailgunERC20Recipient[],\n  relayAdaptShieldNFTRecipients: RailgunNFTAmountRecipient[],\n  crossContractCalls: ContractTransaction[],\n  broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>,\n  sendWithPublicWallet: boolean,\n  overallBatchMinGasPrice: Optional<bigint>,\n  gasDetails: TransactionGasDetails,\n): Promise<RailgunPopulateTransactionResponse> => {\n  try {\n    const { transaction, nullifiers, preTransactionPOIsPerTxidLeafPerList } =\n      await populateProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.CrossContractCalls,\n        railgunWalletID,\n        false, // showSenderAddressToRecipient\n        undefined, // memoText\n        [], // erc20AmountRecipients\n        [], // nftAmountRecipients\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n        gasDetails,\n      );\n    delete transaction.from;\n\n    return {\n      nullifiers,\n      transaction,\n      preTransactionPOIsPerTxidLeafPerList,\n    };\n  } catch (err) {\n    throw reportAndSanitizeError(populateProvedCrossContractCalls.name, err);\n  }\n};\n\nexport const gasEstimateForUnprovenCrossContractCalls = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  encryptionKey: string,\n  relayAdaptUnshieldERC20Amounts: RailgunERC20Amount[],\n  relayAdaptUnshieldNFTAmounts: RailgunNFTAmount[],\n  relayAdaptShieldERC20Recipients: RailgunERC20Recipient[],\n  relayAdaptShieldNFTRecipients: RailgunNFTAmountRecipient[],\n  crossContractCalls: ContractTransaction[],\n  originalGasDetails: TransactionGasDetails,\n  feeTokenDetails: Optional<FeeTokenDetails>,\n  sendWithPublicWallet: boolean,\n  minGasLimit: Optional<bigint>,\n): Promise<RailgunTransactionGasEstimateResponse> => {\n  try {\n    setCachedProvedTransaction(undefined);\n\n    const overallBatchMinGasPrice = 0n;\n\n    const validCrossContractCalls =\n      createValidCrossContractCalls(crossContractCalls);\n\n    const chain = NETWORK_CONFIG[networkName].chain;\n\n    const relayAdaptUnshieldERC20AmountRecipients: RailgunERC20AmountRecipient[] =\n      createRelayAdaptUnshieldERC20AmountRecipients(\n        txidVersion,\n        networkName,\n        relayAdaptUnshieldERC20Amounts,\n      );\n    const relayAdaptUnshieldNFTAmountRecipients: RailgunNFTAmountRecipient[] =\n      createRelayAdaptUnshieldNFTAmountRecipients(\n        txidVersion,\n        networkName,\n        relayAdaptUnshieldNFTAmounts,\n      );\n\n    const shieldRandom = ByteUtils.randomHex(16);\n    const relayShieldRequests =\n      await RelayAdaptHelper.generateRelayShieldRequests(\n        shieldRandom,\n        relayAdaptShieldERC20Recipients,\n        createRelayAdaptShieldNFTRecipients(relayAdaptShieldNFTRecipients),\n      );\n\n    // TODO-V3: Needs modification\n    const minimumGasLimit =\n      minGasLimit ?? MINIMUM_RELAY_ADAPT_CROSS_CONTRACT_CALLS_GAS_LIMIT_V2;\n\n    const response = await gasEstimateResponseDummyProofIterativeBroadcasterFee(\n      (broadcasterFeeERC20Amount: Optional<RailgunERC20Amount>) =>\n        generateDummyProofTransactions(\n          ProofType.CrossContractCalls,\n          networkName,\n          railgunWalletID,\n          txidVersion,\n          encryptionKey,\n          false, // showSenderAddressToRecipient\n          undefined, // memoText\n          relayAdaptUnshieldERC20AmountRecipients,\n          relayAdaptUnshieldNFTAmountRecipients,\n          broadcasterFeeERC20Amount,\n          sendWithPublicWallet,\n          overallBatchMinGasPrice,\n        ),\n      async (txs: (TransactionStructV2 | TransactionStructV3)[]) => {\n        const relayAdaptParamsRandom = ByteUtils.randomHex(31);\n\n        // TODO: We should add the relay adapt contract gas limit here.\n        const transaction =\n          await RelayAdaptVersionedSmartContracts.populateCrossContractCalls(\n            txidVersion,\n            chain,\n            txs,\n            validCrossContractCalls,\n            relayShieldRequests,\n            relayAdaptParamsRandom,\n            true, // isGasEstimate\n            !sendWithPublicWallet, // isBroadcasterTransaction\n            minimumGasLimit,\n          );\n        // Remove gasLimit, we'll set to the minimum below.\n        // TODO: Remove after callbacks upgrade.\n        delete transaction.gasLimit;\n        return transaction;\n      },\n      txidVersion,\n      networkName,\n      railgunWalletID,\n      relayAdaptUnshieldERC20AmountRecipients,\n      originalGasDetails,\n      feeTokenDetails,\n      sendWithPublicWallet,\n      true, // isCrossContractCall\n    );\n\n    // TODO: Remove this after callbacks upgrade.\n    // If gas estimate is under the cross-contract-minimum, replace it with the minimum.\n    if (response.gasEstimate) {\n      if (response.gasEstimate < minimumGasLimit) {\n        response.gasEstimate = minimumGasLimit;\n      }\n    }\n\n    return response;\n  } catch (err) {\n    throw reportAndSanitizeError(\n      gasEstimateForUnprovenCrossContractCalls.name,\n      err,\n    );\n  }\n};\n\nexport const generateCrossContractCallsProof = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  encryptionKey: string,\n  relayAdaptUnshieldERC20Amounts: RailgunERC20Amount[],\n  relayAdaptUnshieldNFTAmounts: RailgunNFTAmount[],\n  relayAdaptShieldERC20Recipients: RailgunERC20Recipient[],\n  relayAdaptShieldNFTRecipients: RailgunNFTAmountRecipient[],\n  crossContractCalls: ContractTransaction[],\n  broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>,\n  sendWithPublicWallet: boolean,\n  overallBatchMinGasPrice: Optional<bigint>,\n  minGasLimit: Optional<bigint>,\n  progressCallback: GenerateTransactionsProgressCallback,\n): Promise<void> => {\n  try {\n    setCachedProvedTransaction(undefined);\n\n    const validCrossContractCalls =\n      createValidCrossContractCalls(crossContractCalls);\n\n    const relayAdaptUnshieldERC20AmountRecipients: RailgunERC20AmountRecipient[] =\n      createRelayAdaptUnshieldERC20AmountRecipients(\n        txidVersion,\n        networkName,\n        relayAdaptUnshieldERC20Amounts,\n      );\n    const relayAdaptUnshieldNFTAmountRecipients: RailgunNFTAmountRecipient[] =\n      createRelayAdaptUnshieldNFTAmountRecipients(\n        txidVersion,\n        networkName,\n        relayAdaptUnshieldNFTAmounts,\n      );\n\n    // Generate dummy txs for relay adapt params.\n    const dummyUnshieldTxs = await generateDummyProofTransactions(\n      ProofType.CrossContractCalls,\n      networkName,\n      railgunWalletID,\n      txidVersion,\n      encryptionKey,\n      false, // showSenderAddressToRecipient\n      undefined, // memoText\n      relayAdaptUnshieldERC20AmountRecipients,\n      relayAdaptUnshieldNFTAmountRecipients,\n      broadcasterFeeERC20AmountRecipient,\n      sendWithPublicWallet,\n      overallBatchMinGasPrice,\n    );\n\n    // Generate relay adapt params from dummy transactions.\n    const shieldRandom = ByteUtils.randomHex(16);\n\n    const relayShieldRequests =\n      await RelayAdaptHelper.generateRelayShieldRequests(\n        shieldRandom,\n        relayAdaptShieldERC20Recipients,\n        createRelayAdaptShieldNFTRecipients(relayAdaptShieldNFTRecipients),\n      );\n\n    // TODO-V3: Needs modification\n    const minimumGasLimit =\n      minGasLimit ?? MINIMUM_RELAY_ADAPT_CROSS_CONTRACT_CALLS_GAS_LIMIT_V2;\n\n    const { chain } = NETWORK_CONFIG[networkName];\n\n    const isBroadcasterTransaction = !sendWithPublicWallet;\n    const relayAdaptParamsRandom = ByteUtils.randomHex(31);\n    const relayAdaptParams =\n      await RelayAdaptVersionedSmartContracts.getRelayAdaptParamsCrossContractCalls(\n        txidVersion,\n        chain,\n        dummyUnshieldTxs,\n        validCrossContractCalls,\n        relayShieldRequests,\n        relayAdaptParamsRandom,\n        isBroadcasterTransaction,\n        minimumGasLimit,\n      );\n    const relayAdaptContract =\n      RelayAdaptVersionedSmartContracts.getRelayAdaptContract(\n        txidVersion,\n        chain,\n      );\n    const relayAdaptID: AdaptID = {\n      contract: relayAdaptContract.address,\n      parameters: relayAdaptParams,\n    };\n\n    // Create real transactions with relay adapt params.\n    const { provedTransactions, preTransactionPOIsPerTxidLeafPerList } =\n      await generateProofTransactions(\n        ProofType.CrossContractCalls,\n        networkName,\n        railgunWalletID,\n        txidVersion,\n        encryptionKey,\n        false, // showSenderAddressToRecipient\n        undefined, // memoText\n        relayAdaptUnshieldERC20AmountRecipients,\n        relayAdaptUnshieldNFTAmountRecipients,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        relayAdaptID,\n        false, // useDummyProof\n        overallBatchMinGasPrice,\n        progressCallback,\n      );\n\n    const nullifiers = nullifiersForTransactions(provedTransactions);\n\n    const transaction =\n      await RelayAdaptVersionedSmartContracts.populateCrossContractCalls(\n        txidVersion,\n        chain,\n        provedTransactions,\n        validCrossContractCalls,\n        relayShieldRequests,\n        relayAdaptParamsRandom,\n        false, // isGasEstimate\n        isBroadcasterTransaction,\n        minimumGasLimit,\n      );\n    delete transaction.from;\n\n    setCachedProvedTransaction({\n      proofType: ProofType.CrossContractCalls,\n      txidVersion,\n      railgunWalletID,\n      showSenderAddressToRecipient: false,\n      memoText: undefined,\n      erc20AmountRecipients: [],\n      nftAmountRecipients: [],\n      relayAdaptUnshieldERC20Amounts,\n      relayAdaptUnshieldNFTAmounts,\n      relayAdaptShieldERC20Recipients,\n      relayAdaptShieldNFTRecipients,\n      crossContractCalls: validCrossContractCalls,\n      broadcasterFeeERC20AmountRecipient,\n      sendWithPublicWallet,\n      transaction,\n      preTransactionPOIsPerTxidLeafPerList,\n      overallBatchMinGasPrice,\n      nullifiers,\n    });\n  } catch (err) {\n    throw reportAndSanitizeError(generateCrossContractCallsProof.name, err);\n  }\n};\n\nexport const getRelayAdaptTransactionError = (\n  txidVersion: TXIDVersion,\n  receiptLogs: TransactionReceiptLog[],\n  // receiptLogs: TransactionReceiptLog[] | readonly Log[],\n): Optional<string> => {\n  try {\n    const relayAdaptError =\n      RelayAdaptVersionedSmartContracts.getRelayAdaptCallError(\n        txidVersion,\n        receiptLogs,\n      );\n    if (isDefined(relayAdaptError)) {\n      sendErrorMessage(relayAdaptError);\n      return relayAdaptError;\n    }\n    return undefined;\n  } catch (err) {\n    throw reportAndSanitizeError(getRelayAdaptTransactionError.name, err);\n  }\n};\n\nexport const parseRelayAdaptReturnValue = (\n  txidVersion: TXIDVersion,\n  data: string,\n): Optional<string> => {\n  try {\n    const relayAdaptErrorParsed =\n      RelayAdaptVersionedSmartContracts.parseRelayAdaptReturnValue(\n        txidVersion,\n        data,\n      );\n    if (isDefined(relayAdaptErrorParsed)) {\n      sendErrorMessage(relayAdaptErrorParsed.error);\n      return relayAdaptErrorParsed.error;\n    }\n    return undefined;\n  } catch (err) {\n    throw reportAndSanitizeError(getRelayAdaptTransactionError.name, err);\n  }\n};\n"]}