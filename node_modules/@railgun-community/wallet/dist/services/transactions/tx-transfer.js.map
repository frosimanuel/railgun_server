{"version":3,"file":"tx-transfer.js","sourceRoot":"","sources":["../../../src/services/transactions/tx-transfer.ts"],"names":[],"mappings":";;;AAAA,oEAW0C;AAC1C,iDAGwB;AACxB,+CAA0D;AAK1D,yFAA0G;AAC1G,6CAA2D;AAEpD,MAAM,sBAAsB,GAAG,KAAK,EACzC,WAAwB,EACxB,WAAwB,EACxB,eAAuB,EACvB,4BAAqC,EACrC,QAA0B,EAC1B,qBAAoD,EACpD,mBAAgD,EAChD,kCAAyE,EACzE,oBAA6B,EAC7B,uBAAyC,EACzC,UAAiC,EACY,EAAE;IAC/C,IAAI;QACF,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,oCAAoC,EAAE,GACrE,MAAM,IAAA,uCAAyB,EAC7B,WAAW,EACX,WAAW,EACX,yBAAS,CAAC,QAAQ,EAClB,eAAe,EACf,4BAA4B,EAC5B,QAAQ,EACR,qBAAqB,EACrB,mBAAmB,EACnB,SAAS,EAAE,0CAA0C;QACrD,SAAS,EAAE,+BAA+B;QAC1C,SAAS,EAAE,kCAAkC;QAC7C,SAAS,EAAE,gCAAgC;QAC3C,SAAS,EAAE,qBAAqB;QAChC,kCAAkC,EAClC,oBAAoB,EACpB,uBAAuB,EACvB,UAAU,CACX,CAAC;QACJ,OAAO;YACL,UAAU;YACV,WAAW;YACX,oCAAoC;SACrC,CAAC;KACH;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAA,8BAAsB,EAAC,8BAAsB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KAChE;AACH,CAAC,CAAC;AA1CW,QAAA,sBAAsB,0BA0CjC;AAEK,MAAM,8BAA8B,GAAG,KAAK,EACjD,WAAwB,EACxB,WAAwB,EACxB,eAAuB,EACvB,aAAqB,EACrB,QAA0B,EAC1B,qBAAoD,EACpD,mBAAgD,EAChD,kBAAyC,EACzC,eAA0C,EAC1C,oBAA6B,EACmB,EAAE;IAClD,IAAI;QACF,MAAM,uBAAuB,GAAG,EAAE,CAAC;QAEnC,MAAM,QAAQ,GAAG,MAAM,IAAA,uFAAoD,EACzE,CAAC,yBAAuD,EAAE,EAAE,CAC1D,IAAA,6CAA8B,EAC5B,yBAAS,CAAC,QAAQ,EAClB,WAAW,EACX,eAAe,EACf,WAAW,EACX,aAAa,EACb,KAAK,EAAE,kEAAkE;QACzE,QAAQ,EACR,qBAAqB,EACrB,mBAAmB,EACnB,yBAAyB,EACzB,oBAAoB,EACpB,uBAAuB,CACxB,EACH,CAAC,GAAkD,EAAE,EAAE,CACrD,IAAA,+BAAgB,EACd,WAAW,EACX,GAAG,EACH,WAAW,EACX,IAAI,CACL,EACH,WAAW,EACX,WAAW,EACX,eAAe,EACf,qBAAqB,EACrB,kBAAkB,EAClB,eAAe,EACf,oBAAoB,EACpB,KAAK,CACN,CAAC;QACF,OAAO,QAAQ,CAAC;KACjB;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAA,8BAAsB,EAAC,sCAA8B,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KACxE;AACH,CAAC,CAAC;AAnDW,QAAA,8BAA8B,kCAmDzC","sourcesContent":["import {\n  RailgunPopulateTransactionResponse,\n  RailgunTransactionGasEstimateResponse,\n  RailgunERC20Amount,\n  NetworkName,\n  ProofType,\n  FeeTokenDetails,\n  RailgunERC20AmountRecipient,\n  RailgunNFTAmountRecipient,\n  TransactionGasDetails,\n  TXIDVersion,\n} from '@railgun-community/shared-models';\nimport {\n  generateDummyProofTransactions,\n  generateTransact,\n} from './tx-generator';\nimport { populateProvedTransaction } from './proof-cache';\nimport {\n  TransactionStructV2,\n  TransactionStructV3,\n} from '@railgun-community/engine';\nimport { gasEstimateResponseDummyProofIterativeBroadcasterFee } from './tx-gas-broadcaster-fee-estimator';\nimport { reportAndSanitizeError } from '../../utils/error';\n\nexport const populateProvedTransfer = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  showSenderAddressToRecipient: boolean,\n  memoText: Optional<string>,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>,\n  sendWithPublicWallet: boolean,\n  overallBatchMinGasPrice: Optional<bigint>,\n  gasDetails: TransactionGasDetails,\n): Promise<RailgunPopulateTransactionResponse> => {\n  try {\n    const { transaction, nullifiers, preTransactionPOIsPerTxidLeafPerList } =\n      await populateProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.Transfer,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        undefined, // relayAdaptUnshieldERC20AmountRecipients\n        undefined, // relayAdaptUnshieldNFTAmounts\n        undefined, // relayAdaptShieldERC20Recipients\n        undefined, // relayAdaptShieldNFTRecipients\n        undefined, // crossContractCalls\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n        gasDetails,\n      );\n    return {\n      nullifiers,\n      transaction,\n      preTransactionPOIsPerTxidLeafPerList,\n    };\n  } catch (err) {\n    throw reportAndSanitizeError(populateProvedTransfer.name, err);\n  }\n};\n\nexport const gasEstimateForUnprovenTransfer = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  encryptionKey: string,\n  memoText: Optional<string>,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  originalGasDetails: TransactionGasDetails,\n  feeTokenDetails: Optional<FeeTokenDetails>,\n  sendWithPublicWallet: boolean,\n): Promise<RailgunTransactionGasEstimateResponse> => {\n  try {\n    const overallBatchMinGasPrice = 0n;\n\n    const response = await gasEstimateResponseDummyProofIterativeBroadcasterFee(\n      (broadcasterFeeERC20Amount: Optional<RailgunERC20Amount>) =>\n        generateDummyProofTransactions(\n          ProofType.Transfer,\n          networkName,\n          railgunWalletID,\n          txidVersion,\n          encryptionKey,\n          false, // showSenderAddressToRecipient - doesn't matter for gas estimate.\n          memoText,\n          erc20AmountRecipients,\n          nftAmountRecipients,\n          broadcasterFeeERC20Amount,\n          sendWithPublicWallet,\n          overallBatchMinGasPrice,\n        ),\n      (txs: (TransactionStructV2 | TransactionStructV3)[]) =>\n        generateTransact(\n          txidVersion,\n          txs,\n          networkName,\n          true, // useDummyProof\n        ),\n      txidVersion,\n      networkName,\n      railgunWalletID,\n      erc20AmountRecipients,\n      originalGasDetails,\n      feeTokenDetails,\n      sendWithPublicWallet,\n      false, // isCrossContractCall\n    );\n    return response;\n  } catch (err) {\n    throw reportAndSanitizeError(gasEstimateForUnprovenTransfer.name, err);\n  }\n};\n"]}