"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTransferProof = void 0;
const shared_models_1 = require("@railgun-community/shared-models");
const tx_generator_1 = require("./tx-generator");
const proof_cache_1 = require("./proof-cache");
const error_1 = require("../../utils/error");
const generateTransferProof = async (txidVersion, networkName, railgunWalletID, encryptionKey, showSenderAddressToRecipient, memoText, erc20AmountRecipients, nftAmountRecipients, broadcasterFeeERC20AmountRecipient, sendWithPublicWallet, overallBatchMinGasPrice, progressCallback) => {
    try {
        (0, proof_cache_1.setCachedProvedTransaction)(undefined);
        const { provedTransactions, preTransactionPOIsPerTxidLeafPerList } = await (0, tx_generator_1.generateProofTransactions)(shared_models_1.ProofType.Transfer, networkName, railgunWalletID, txidVersion, encryptionKey, showSenderAddressToRecipient, memoText, erc20AmountRecipients, nftAmountRecipients, broadcasterFeeERC20AmountRecipient, sendWithPublicWallet, undefined, // relayAdaptID
        false, // useDummyProof
        overallBatchMinGasPrice, progressCallback);
        const transaction = await (0, tx_generator_1.generateTransact)(txidVersion, provedTransactions, networkName);
        const nullifiers = (0, tx_generator_1.nullifiersForTransactions)(provedTransactions);
        (0, proof_cache_1.setCachedProvedTransaction)({
            proofType: shared_models_1.ProofType.Transfer,
            txidVersion,
            railgunWalletID,
            showSenderAddressToRecipient,
            memoText,
            erc20AmountRecipients,
            nftAmountRecipients,
            relayAdaptUnshieldERC20Amounts: undefined,
            relayAdaptUnshieldNFTAmounts: undefined,
            relayAdaptShieldERC20Recipients: undefined,
            relayAdaptShieldNFTRecipients: undefined,
            crossContractCalls: undefined,
            broadcasterFeeERC20AmountRecipient,
            sendWithPublicWallet,
            transaction,
            preTransactionPOIsPerTxidLeafPerList,
            overallBatchMinGasPrice,
            nullifiers,
        });
    }
    catch (err) {
        throw (0, error_1.reportAndSanitizeError)(exports.generateTransferProof.name, err);
    }
};
exports.generateTransferProof = generateTransferProof;
//# sourceMappingURL=tx-proof-transfer.js.map