import { RailgunPopulateTransactionResponse, RailgunTransactionGasEstimateResponse, RailgunERC20Amount, NetworkName, FeeTokenDetails, RailgunERC20AmountRecipient, RailgunNFTAmountRecipient, TransactionGasDetails, TXIDVersion } from '@railgun-community/shared-models';
export declare const populateProvedUnshield: (txidVersion: TXIDVersion, networkName: NetworkName, railgunWalletID: string, erc20AmountRecipients: RailgunERC20AmountRecipient[], nftAmountRecipients: RailgunNFTAmountRecipient[], broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>, sendWithPublicWallet: boolean, overallBatchMinGasPrice: Optional<bigint>, gasDetails: TransactionGasDetails) => Promise<RailgunPopulateTransactionResponse>;
export declare const populateProvedUnshieldBaseToken: (txidVersion: TXIDVersion, networkName: NetworkName, publicWalletAddress: string, railgunWalletID: string, wrappedERC20Amount: RailgunERC20Amount, broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>, sendWithPublicWallet: boolean, overallBatchMinGasPrice: Optional<bigint>, gasDetails: TransactionGasDetails) => Promise<RailgunPopulateTransactionResponse>;
export declare const gasEstimateForUnprovenUnshield: (txidVersion: TXIDVersion, networkName: NetworkName, railgunWalletID: string, encryptionKey: string, erc20AmountRecipients: RailgunERC20AmountRecipient[], nftAmountRecipients: RailgunNFTAmountRecipient[], originalGasDetails: TransactionGasDetails, feeTokenDetails: Optional<FeeTokenDetails>, sendWithPublicWallet: boolean) => Promise<RailgunTransactionGasEstimateResponse>;
export declare const gasEstimateForUnprovenUnshieldBaseToken: (txidVersion: TXIDVersion, networkName: NetworkName, publicWalletAddress: string, railgunWalletID: string, encryptionKey: string, wrappedERC20Amount: RailgunERC20Amount, originalGasDetails: TransactionGasDetails, feeTokenDetails: Optional<FeeTokenDetails>, sendWithPublicWallet: boolean) => Promise<RailgunTransactionGasEstimateResponse>;
export declare const getERC20AndNFTAmountRecipientsForUnshieldToOrigin: (txidVersion: TXIDVersion, networkName: NetworkName, railgunWalletID: string, originalShieldTxid: string) => Promise<{
    erc20AmountRecipients: RailgunERC20AmountRecipient[];
    nftAmountRecipients: RailgunNFTAmountRecipient[];
}>;
export declare const populateProvedUnshieldToOrigin: (txidVersion: TXIDVersion, networkName: NetworkName, railgunWalletID: string, erc20AmountRecipients: RailgunERC20AmountRecipient[], nftAmountRecipients: RailgunNFTAmountRecipient[], gasDetails: TransactionGasDetails) => Promise<RailgunPopulateTransactionResponse>;
export declare const gasEstimateForUnprovenUnshieldToOrigin: (originalShieldTxid: string, txidVersion: TXIDVersion, networkName: NetworkName, railgunWalletID: string, encryptionKey: string, erc20AmountRecipients: RailgunERC20AmountRecipient[], nftAmountRecipients: RailgunNFTAmountRecipient[]) => Promise<RailgunTransactionGasEstimateResponse>;
