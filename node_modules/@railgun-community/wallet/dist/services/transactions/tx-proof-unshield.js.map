{"version":3,"file":"tx-proof-unshield.js","sourceRoot":"","sources":["../../../src/services/transactions/tx-proof-unshield.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RailgunERC20Amount,\n  NetworkName,\n  ProofType,\n  RailgunERC20AmountRecipient,\n  RailgunNFTAmountRecipient,\n  TXIDVersion,\n  NETWORK_CONFIG,\n} from '@railgun-community/shared-models';\nimport {\n  GenerateTransactionsProgressCallback,\n  generateDummyProofTransactions,\n  generateProofTransactions,\n  generateTransact,\n  generateUnshieldBaseToken,\n  nullifiersForTransactions,\n} from './tx-generator';\nimport { assertValidEthAddress } from '../railgun/wallets/wallets';\nimport { setCachedProvedTransaction } from './proof-cache';\nimport {\n  AdaptID,\n  RelayAdaptVersionedSmartContracts,\n  ByteUtils,\n} from '@railgun-community/engine';\nimport { assertNotBlockedAddress } from '../../utils/blocked-address';\nimport { createRelayAdaptUnshieldERC20AmountRecipients } from './tx-cross-contract-calls';\nimport { reportAndSanitizeError } from '../../utils/error';\n\nexport const generateUnshieldProof = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  encryptionKey: string,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>,\n  sendWithPublicWallet: boolean,\n  overallBatchMinGasPrice: Optional<bigint>,\n  progressCallback: GenerateTransactionsProgressCallback,\n): Promise<void> => {\n  try {\n    setCachedProvedTransaction(undefined);\n\n    const { provedTransactions, preTransactionPOIsPerTxidLeafPerList } =\n      await generateProofTransactions(\n        ProofType.Unshield,\n        networkName,\n        railgunWalletID,\n        txidVersion,\n        encryptionKey,\n        false, // showSenderAddressToRecipient\n        undefined, // memoText\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        undefined, // relayAdaptID\n        false, // useDummyProof\n        overallBatchMinGasPrice,\n        progressCallback,\n      );\n    const transaction = await generateTransact(\n      txidVersion,\n      provedTransactions,\n      networkName,\n    );\n\n    const nullifiers = nullifiersForTransactions(provedTransactions);\n\n    setCachedProvedTransaction({\n      proofType: ProofType.Unshield,\n      txidVersion,\n      railgunWalletID,\n      showSenderAddressToRecipient: false,\n      memoText: undefined,\n      erc20AmountRecipients,\n      nftAmountRecipients,\n      relayAdaptUnshieldERC20Amounts: undefined,\n      relayAdaptUnshieldNFTAmounts: undefined,\n      relayAdaptShieldERC20Recipients: undefined,\n      relayAdaptShieldNFTRecipients: undefined,\n      crossContractCalls: undefined,\n      broadcasterFeeERC20AmountRecipient,\n      transaction,\n      sendWithPublicWallet,\n      preTransactionPOIsPerTxidLeafPerList,\n      overallBatchMinGasPrice,\n      nullifiers,\n    });\n  } catch (err) {\n    throw reportAndSanitizeError(generateUnshieldProof.name, err);\n  }\n};\n\nexport const generateUnshieldToOriginProof = async (\n  originalShieldTxid: string,\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  encryptionKey: string,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  progressCallback: GenerateTransactionsProgressCallback,\n): Promise<void> => {\n  try {\n    setCachedProvedTransaction(undefined);\n\n    const { provedTransactions, preTransactionPOIsPerTxidLeafPerList } =\n      await generateProofTransactions(\n        ProofType.Unshield,\n        networkName,\n        railgunWalletID,\n        txidVersion,\n        encryptionKey,\n        false, // showSenderAddressToRecipient\n        undefined, // memoText\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        undefined, // broadcasterFeeERC20AmountRecipient\n        true, // sendWithPublicWallet\n        undefined, // relayAdaptID\n        false, // useDummyProof\n        undefined, // overallBatchMinGasPrice\n        progressCallback,\n        originalShieldTxid,\n      );\n    const transaction = await generateTransact(\n      txidVersion,\n      provedTransactions,\n      networkName,\n    );\n\n    const nullifiers = nullifiersForTransactions(provedTransactions);\n\n    setCachedProvedTransaction({\n      proofType: ProofType.Unshield,\n      txidVersion,\n      railgunWalletID,\n      showSenderAddressToRecipient: false,\n      memoText: undefined,\n      erc20AmountRecipients,\n      nftAmountRecipients,\n      relayAdaptUnshieldERC20Amounts: undefined,\n      relayAdaptUnshieldNFTAmounts: undefined,\n      relayAdaptShieldERC20Recipients: undefined,\n      relayAdaptShieldNFTRecipients: undefined,\n      crossContractCalls: undefined,\n      broadcasterFeeERC20AmountRecipient: undefined,\n      transaction,\n      sendWithPublicWallet: true,\n      preTransactionPOIsPerTxidLeafPerList,\n      overallBatchMinGasPrice: undefined,\n      nullifiers,\n    });\n  } catch (err) {\n    throw reportAndSanitizeError(generateUnshieldProof.name, err);\n  }\n};\n\nexport const generateUnshieldBaseTokenProof = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  publicWalletAddress: string,\n  railgunWalletID: string,\n  encryptionKey: string,\n  wrappedERC20Amount: RailgunERC20Amount,\n  broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>,\n  sendWithPublicWallet: boolean,\n  overallBatchMinGasPrice: Optional<bigint>,\n  progressCallback: GenerateTransactionsProgressCallback,\n): Promise<void> => {\n  try {\n    assertNotBlockedAddress(publicWalletAddress);\n    assertValidEthAddress(publicWalletAddress);\n\n    setCachedProvedTransaction(undefined);\n\n    const erc20AmountRecipients: RailgunERC20AmountRecipient[] = [\n      {\n        ...wrappedERC20Amount,\n        recipientAddress: publicWalletAddress,\n      },\n    ];\n\n    const relayAdaptUnshieldERC20Amounts: RailgunERC20Amount[] = [\n      wrappedERC20Amount,\n    ];\n\n    const relayAdaptUnshieldERC20AmountRecipients: RailgunERC20AmountRecipient[] =\n      createRelayAdaptUnshieldERC20AmountRecipients(txidVersion, networkName, [\n        wrappedERC20Amount,\n      ]);\n\n    // Empty NFT recipients.\n    const nftAmountRecipients: RailgunNFTAmountRecipient[] = [];\n    const relayAdaptUnshieldNFTAmountRecipients: RailgunNFTAmountRecipient[] =\n      [];\n\n    // Generate dummy txs for relay adapt params.\n    const dummyTxs = await generateDummyProofTransactions(\n      ProofType.UnshieldBaseToken,\n      networkName,\n      railgunWalletID,\n      txidVersion,\n      encryptionKey,\n      false, // showSenderAddressToRecipient\n      undefined, // memoText\n      relayAdaptUnshieldERC20AmountRecipients,\n      relayAdaptUnshieldNFTAmountRecipients,\n      broadcasterFeeERC20AmountRecipient,\n      sendWithPublicWallet,\n      overallBatchMinGasPrice,\n    );\n\n    const { chain } = NETWORK_CONFIG[networkName];\n\n    const relayAdaptParamsRandom = ByteUtils.randomHex(31);\n    const relayAdaptParams =\n      await RelayAdaptVersionedSmartContracts.getRelayAdaptParamsUnshieldBaseToken(\n        txidVersion,\n        chain,\n        dummyTxs,\n        publicWalletAddress,\n        relayAdaptParamsRandom,\n        sendWithPublicWallet,\n      );\n    const relayAdaptContract =\n      RelayAdaptVersionedSmartContracts.getRelayAdaptContract(\n        txidVersion,\n        chain,\n      );\n    const relayAdaptID: AdaptID = {\n      contract: relayAdaptContract.address,\n      parameters: relayAdaptParams,\n    };\n\n    const showSenderAddressToRecipient = false;\n    const memoText: Optional<string> = undefined;\n\n    // Generate final txs with relay adapt ID.\n    const { provedTransactions, preTransactionPOIsPerTxidLeafPerList } =\n      await generateProofTransactions(\n        ProofType.UnshieldBaseToken,\n        networkName,\n        railgunWalletID,\n        txidVersion,\n        encryptionKey,\n        showSenderAddressToRecipient,\n        memoText,\n        relayAdaptUnshieldERC20AmountRecipients,\n        relayAdaptUnshieldNFTAmountRecipients,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        relayAdaptID,\n        false, // useDummyProof\n        overallBatchMinGasPrice,\n        progressCallback,\n      );\n\n    const transaction = await generateUnshieldBaseToken(\n      txidVersion,\n      provedTransactions,\n      networkName,\n      publicWalletAddress,\n      relayAdaptParamsRandom,\n      sendWithPublicWallet, // useDummyProof\n    );\n\n    const nullifiers = nullifiersForTransactions(provedTransactions);\n\n    setCachedProvedTransaction({\n      proofType: ProofType.UnshieldBaseToken,\n      txidVersion,\n      railgunWalletID,\n      showSenderAddressToRecipient,\n      memoText,\n      erc20AmountRecipients,\n      nftAmountRecipients,\n      relayAdaptUnshieldERC20Amounts,\n      relayAdaptUnshieldNFTAmounts: undefined,\n      relayAdaptShieldERC20Recipients: undefined,\n      relayAdaptShieldNFTRecipients: undefined,\n      crossContractCalls: undefined,\n      broadcasterFeeERC20AmountRecipient,\n      sendWithPublicWallet,\n      transaction,\n      preTransactionPOIsPerTxidLeafPerList,\n      overallBatchMinGasPrice,\n      nullifiers,\n    });\n  } catch (err) {\n    throw reportAndSanitizeError(generateUnshieldBaseTokenProof.name, err);\n  }\n};\n"]}