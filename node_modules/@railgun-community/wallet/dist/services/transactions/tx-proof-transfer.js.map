{"version":3,"file":"tx-proof-transfer.js","sourceRoot":"","sources":["../../../src/services/transactions/tx-proof-transfer.ts"],"names":[],"mappings":";;;AAAA,oEAM0C;AAC1C,iDAKwB;AACxB,+CAA2D;AAC3D,6CAA2D;AAEpD,MAAM,qBAAqB,GAAG,KAAK,EACxC,WAAwB,EACxB,WAAwB,EACxB,eAAuB,EACvB,aAAqB,EACrB,4BAAqC,EACrC,QAA0B,EAC1B,qBAAoD,EACpD,mBAAgD,EAChD,kCAAyE,EACzE,oBAA6B,EAC7B,uBAAyC,EACzC,gBAAsD,EACvC,EAAE;IACjB,IAAI;QACF,IAAA,wCAA0B,EAAC,SAAS,CAAC,CAAC;QAEtC,MAAM,EAAE,kBAAkB,EAAE,oCAAoC,EAAE,GAChE,MAAM,IAAA,wCAAyB,EAC7B,yBAAS,CAAC,QAAQ,EAClB,WAAW,EACX,eAAe,EACf,WAAW,EACX,aAAa,EACb,4BAA4B,EAC5B,QAAQ,EACR,qBAAqB,EACrB,mBAAmB,EACnB,kCAAkC,EAClC,oBAAoB,EACpB,SAAS,EAAE,eAAe;QAC1B,KAAK,EAAE,gBAAgB;QACvB,uBAAuB,EACvB,gBAAgB,CACjB,CAAC;QACJ,MAAM,WAAW,GAAG,MAAM,IAAA,+BAAgB,EACxC,WAAW,EACX,kBAAkB,EAClB,WAAW,CACZ,CAAC;QAEF,MAAM,UAAU,GAAG,IAAA,wCAAyB,EAAC,kBAAkB,CAAC,CAAC;QAEjE,IAAA,wCAA0B,EAAC;YACzB,SAAS,EAAE,yBAAS,CAAC,QAAQ;YAC7B,WAAW;YACX,eAAe;YACf,4BAA4B;YAC5B,QAAQ;YACR,qBAAqB;YACrB,mBAAmB;YACnB,8BAA8B,EAAE,SAAS;YACzC,4BAA4B,EAAE,SAAS;YACvC,+BAA+B,EAAE,SAAS;YAC1C,6BAA6B,EAAE,SAAS;YACxC,kBAAkB,EAAE,SAAS;YAC7B,kCAAkC;YAClC,oBAAoB;YACpB,WAAW;YACX,oCAAoC;YACpC,uBAAuB;YACvB,UAAU;SACX,CAAC,CAAC;KACJ;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAA,8BAAsB,EAAC,6BAAqB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KAC/D;AACH,CAAC,CAAC;AAlEW,QAAA,qBAAqB,yBAkEhC","sourcesContent":["import {\n  NetworkName,\n  ProofType,\n  RailgunERC20AmountRecipient,\n  RailgunNFTAmountRecipient,\n  TXIDVersion,\n} from '@railgun-community/shared-models';\nimport {\n  GenerateTransactionsProgressCallback,\n  generateProofTransactions,\n  generateTransact,\n  nullifiersForTransactions,\n} from './tx-generator';\nimport { setCachedProvedTransaction } from './proof-cache';\nimport { reportAndSanitizeError } from '../../utils/error';\n\nexport const generateTransferProof = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  encryptionKey: string,\n  showSenderAddressToRecipient: boolean,\n  memoText: Optional<string>,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>,\n  sendWithPublicWallet: boolean,\n  overallBatchMinGasPrice: Optional<bigint>,\n  progressCallback: GenerateTransactionsProgressCallback,\n): Promise<void> => {\n  try {\n    setCachedProvedTransaction(undefined);\n\n    const { provedTransactions, preTransactionPOIsPerTxidLeafPerList } =\n      await generateProofTransactions(\n        ProofType.Transfer,\n        networkName,\n        railgunWalletID,\n        txidVersion,\n        encryptionKey,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        undefined, // relayAdaptID\n        false, // useDummyProof\n        overallBatchMinGasPrice,\n        progressCallback,\n      );\n    const transaction = await generateTransact(\n      txidVersion,\n      provedTransactions,\n      networkName,\n    );\n\n    const nullifiers = nullifiersForTransactions(provedTransactions);\n\n    setCachedProvedTransaction({\n      proofType: ProofType.Transfer,\n      txidVersion,\n      railgunWalletID,\n      showSenderAddressToRecipient,\n      memoText,\n      erc20AmountRecipients,\n      nftAmountRecipients,\n      relayAdaptUnshieldERC20Amounts: undefined,\n      relayAdaptUnshieldNFTAmounts: undefined,\n      relayAdaptShieldERC20Recipients: undefined,\n      relayAdaptShieldNFTRecipients: undefined,\n      crossContractCalls: undefined,\n      broadcasterFeeERC20AmountRecipient,\n      sendWithPublicWallet,\n      transaction,\n      preTransactionPOIsPerTxidLeafPerList,\n      overallBatchMinGasPrice,\n      nullifiers,\n    });\n  } catch (err) {\n    throw reportAndSanitizeError(generateTransferProof.name, err);\n  }\n};\n"]}