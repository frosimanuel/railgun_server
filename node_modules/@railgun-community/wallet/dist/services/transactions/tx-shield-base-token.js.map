{"version":3,"file":"tx-shield-base-token.js","sourceRoot":"","sources":["../../../src/services/transactions/tx-shield-base-token.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RailgunPopulateTransactionResponse,\n  RailgunTransactionGasEstimateResponse,\n  RailgunERC20Amount,\n  NetworkName,\n  TransactionGasDetails,\n  NETWORK_CONFIG,\n  TXIDVersion,\n} from '@railgun-community/shared-models';\nimport {\n  gasEstimateResponse,\n  getGasEstimate,\n  setGasDetailsForTransaction,\n} from './tx-gas-details';\nimport { assertNotBlockedAddress } from '../../utils/blocked-address';\nimport {\n  ShieldNoteERC20,\n  RailgunEngine,\n  ByteUtils,\n  RelayAdaptVersionedSmartContracts,\n} from '@railgun-community/engine';\nimport { reportAndSanitizeError } from '../../utils/error';\nimport { ContractTransaction } from 'ethers';\nimport { assertValidRailgunAddress } from '../railgun/wallets/wallets';\n\nconst generateShieldBaseTokenTransaction = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunAddress: string,\n  shieldPrivateKey: string,\n  wrappedERC20Amount: RailgunERC20Amount,\n): Promise<ContractTransaction> => {\n  try {\n    const { masterPublicKey, viewingPublicKey } =\n      RailgunEngine.decodeAddress(railgunAddress);\n    const random = ByteUtils.randomHex(16);\n\n    const { amount, tokenAddress } = wrappedERC20Amount;\n\n    const shield = new ShieldNoteERC20(\n      masterPublicKey,\n      random,\n      amount,\n      tokenAddress,\n    );\n\n    const shieldRequest = await shield.serialize(\n      ByteUtils.hexToBytes(shieldPrivateKey),\n      viewingPublicKey,\n    );\n\n    const { chain } = NETWORK_CONFIG[networkName];\n    const transaction =\n      await RelayAdaptVersionedSmartContracts.populateShieldBaseToken(\n        txidVersion,\n        chain,\n        shieldRequest,\n      );\n\n    return transaction;\n  } catch (err) {\n    throw reportAndSanitizeError(generateShieldBaseTokenTransaction.name, err);\n  }\n};\n\nexport const populateShieldBaseToken = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunAddress: string,\n  shieldPrivateKey: string,\n  wrappedERC20Amount: RailgunERC20Amount,\n  gasDetails?: TransactionGasDetails,\n): Promise<RailgunPopulateTransactionResponse> => {\n  try {\n    assertValidRailgunAddress(railgunAddress);\n\n    const transaction = await generateShieldBaseTokenTransaction(\n      txidVersion,\n      networkName,\n      railgunAddress,\n      shieldPrivateKey,\n      wrappedERC20Amount,\n    );\n\n    if (gasDetails) {\n      const sendWithPublicWallet = true;\n      setGasDetailsForTransaction(\n        networkName,\n        transaction,\n        gasDetails,\n        sendWithPublicWallet,\n      );\n    }\n\n    return {\n      transaction,\n      preTransactionPOIsPerTxidLeafPerList: {},\n    };\n  } catch (err) {\n    throw reportAndSanitizeError(populateShieldBaseToken.name, err);\n  }\n};\n\nexport const gasEstimateForShieldBaseToken = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunAddress: string,\n  shieldPrivateKey: string,\n  wrappedERC20Amount: RailgunERC20Amount,\n  fromWalletAddress: string,\n): Promise<RailgunTransactionGasEstimateResponse> => {\n  try {\n    assertValidRailgunAddress(railgunAddress);\n    assertNotBlockedAddress(fromWalletAddress);\n\n    const transaction = await generateShieldBaseTokenTransaction(\n      txidVersion,\n      networkName,\n      railgunAddress,\n      shieldPrivateKey,\n      wrappedERC20Amount,\n    );\n\n    const sendWithPublicWallet = true;\n    const isGasEstimateWithDummyProof = false;\n    return gasEstimateResponse(\n      await getGasEstimate(\n        txidVersion,\n        networkName,\n        transaction,\n        fromWalletAddress,\n        sendWithPublicWallet,\n        false, // isCrossContractCall\n      ),\n      undefined, // broadcasterFeeCommitment\n      isGasEstimateWithDummyProof,\n    );\n  } catch (err) {\n    throw reportAndSanitizeError(gasEstimateForShieldBaseToken.name, err);\n  }\n};\n"]}