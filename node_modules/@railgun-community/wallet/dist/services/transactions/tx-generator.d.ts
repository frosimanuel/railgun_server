import { AdaptID, PreTransactionPOIsPerTxidLeafPerList, TransactionStructV2, TransactionStructV3 } from '@railgun-community/engine';
import { RailgunERC20Amount, RailgunERC20AmountRecipient, NetworkName, ProofType, RailgunNFTAmountRecipient, TXIDVersion } from '@railgun-community/shared-models';
import { ContractTransaction } from 'ethers';
export declare const DUMMY_FROM_ADDRESS = "0x000000000000000000000000000000000000dEaD";
export type GenerateTransactionsProgressCallback = (progress: number, status: string) => void;
export declare const generateProofTransactions: (proofType: ProofType, networkName: NetworkName, railgunWalletID: string, txidVersion: TXIDVersion, encryptionKey: string, showSenderAddressToRecipient: boolean, memoText: Optional<string>, erc20AmountRecipients: RailgunERC20AmountRecipient[], nftAmountRecipients: RailgunNFTAmountRecipient[], broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>, sendWithPublicWallet: boolean, relayAdaptID: Optional<AdaptID>, useDummyProof: boolean, overallBatchMinGasPrice: Optional<bigint>, progressCallback: GenerateTransactionsProgressCallback, originShieldTxidForSpendabilityOverride?: string) => Promise<{
    provedTransactions: (TransactionStructV2 | TransactionStructV3)[];
    preTransactionPOIsPerTxidLeafPerList: PreTransactionPOIsPerTxidLeafPerList;
}>;
export declare const nullifiersForTransactions: (transactions: (TransactionStructV2 | TransactionStructV3)[]) => string[];
export declare const createDummyBroadcasterFeeERC20Amount: (feeTokenAddress: string) => RailgunERC20Amount;
export declare const generateDummyProofTransactions: (proofType: ProofType, networkName: NetworkName, railgunWalletID: string, txidVersion: TXIDVersion, encryptionKey: string, showSenderAddressToRecipient: boolean, memoText: Optional<string>, erc20AmountRecipients: RailgunERC20AmountRecipient[], nftAmountRecipients: RailgunNFTAmountRecipient[], broadcasterFeeERC20Amount: Optional<RailgunERC20Amount>, sendWithPublicWallet: boolean, overallBatchMinGasPrice: Optional<bigint>, originShieldTxidForSpendabilityOverride?: string) => Promise<(TransactionStructV2 | TransactionStructV3)[]>;
export declare const generateTransact: (txidVersion: TXIDVersion, txs: (TransactionStructV2 | TransactionStructV3)[], networkName: NetworkName, useDummyProof?: boolean) => Promise<ContractTransaction>;
export declare const generateUnshieldBaseToken: (txidVersion: TXIDVersion, txs: (TransactionStructV2 | TransactionStructV3)[], networkName: NetworkName, toWalletAddress: string, relayAdaptParamsRandom: string, useDummyProof?: boolean) => Promise<ContractTransaction>;
