import { RailgunERC20Amount, NetworkName, RailgunERC20AmountRecipient, RailgunNFTAmountRecipient, TXIDVersion } from '@railgun-community/shared-models';
import { GenerateTransactionsProgressCallback } from './tx-generator';
export declare const generateUnshieldProof: (txidVersion: TXIDVersion, networkName: NetworkName, railgunWalletID: string, encryptionKey: string, erc20AmountRecipients: RailgunERC20AmountRecipient[], nftAmountRecipients: RailgunNFTAmountRecipient[], broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>, sendWithPublicWallet: boolean, overallBatchMinGasPrice: Optional<bigint>, progressCallback: GenerateTransactionsProgressCallback) => Promise<void>;
export declare const generateUnshieldToOriginProof: (originalShieldTxid: string, txidVersion: TXIDVersion, networkName: NetworkName, railgunWalletID: string, encryptionKey: string, erc20AmountRecipients: RailgunERC20AmountRecipient[], nftAmountRecipients: RailgunNFTAmountRecipient[], progressCallback: GenerateTransactionsProgressCallback) => Promise<void>;
export declare const generateUnshieldBaseTokenProof: (txidVersion: TXIDVersion, networkName: NetworkName, publicWalletAddress: string, railgunWalletID: string, encryptionKey: string, wrappedERC20Amount: RailgunERC20Amount, broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>, sendWithPublicWallet: boolean, overallBatchMinGasPrice: Optional<bigint>, progressCallback: GenerateTransactionsProgressCallback) => Promise<void>;
