import { RailgunPopulateTransactionResponse, RailgunTransactionGasEstimateResponse, RailgunERC20Amount, NetworkName, TransactionReceiptLog, FeeTokenDetails, RailgunERC20AmountRecipient, RailgunNFTAmountRecipient, RailgunNFTAmount, TransactionGasDetails, RailgunERC20Recipient, TXIDVersion } from '@railgun-community/shared-models';
import { GenerateTransactionsProgressCallback } from './tx-generator';
import { NFTTokenData } from '@railgun-community/engine';
import { ContractTransaction } from 'ethers';
export declare const createRelayAdaptUnshieldERC20AmountRecipients: (txidVersion: TXIDVersion, networkName: NetworkName, unshieldERC20Amounts: RailgunERC20Amount[]) => RailgunERC20AmountRecipient[];
export declare const createRelayAdaptUnshieldNFTAmountRecipients: (txidVersion: TXIDVersion, networkName: NetworkName, unshieldNFTAmounts: RailgunNFTAmount[]) => RailgunNFTAmountRecipient[];
export declare const createNFTTokenDataFromRailgunNFTAmount: (nftAmount: RailgunNFTAmount) => NFTTokenData;
export declare const populateProvedCrossContractCalls: (txidVersion: TXIDVersion, networkName: NetworkName, railgunWalletID: string, relayAdaptUnshieldERC20Amounts: RailgunERC20Amount[], relayAdaptUnshieldNFTAmounts: RailgunNFTAmount[], relayAdaptShieldERC20Recipients: RailgunERC20Recipient[], relayAdaptShieldNFTRecipients: RailgunNFTAmountRecipient[], crossContractCalls: ContractTransaction[], broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>, sendWithPublicWallet: boolean, overallBatchMinGasPrice: Optional<bigint>, gasDetails: TransactionGasDetails) => Promise<RailgunPopulateTransactionResponse>;
export declare const gasEstimateForUnprovenCrossContractCalls: (txidVersion: TXIDVersion, networkName: NetworkName, railgunWalletID: string, encryptionKey: string, relayAdaptUnshieldERC20Amounts: RailgunERC20Amount[], relayAdaptUnshieldNFTAmounts: RailgunNFTAmount[], relayAdaptShieldERC20Recipients: RailgunERC20Recipient[], relayAdaptShieldNFTRecipients: RailgunNFTAmountRecipient[], crossContractCalls: ContractTransaction[], originalGasDetails: TransactionGasDetails, feeTokenDetails: Optional<FeeTokenDetails>, sendWithPublicWallet: boolean, minGasLimit: Optional<bigint>) => Promise<RailgunTransactionGasEstimateResponse>;
export declare const generateCrossContractCallsProof: (txidVersion: TXIDVersion, networkName: NetworkName, railgunWalletID: string, encryptionKey: string, relayAdaptUnshieldERC20Amounts: RailgunERC20Amount[], relayAdaptUnshieldNFTAmounts: RailgunNFTAmount[], relayAdaptShieldERC20Recipients: RailgunERC20Recipient[], relayAdaptShieldNFTRecipients: RailgunNFTAmountRecipient[], crossContractCalls: ContractTransaction[], broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>, sendWithPublicWallet: boolean, overallBatchMinGasPrice: Optional<bigint>, minGasLimit: Optional<bigint>, progressCallback: GenerateTransactionsProgressCallback) => Promise<void>;
export declare const getRelayAdaptTransactionError: (txidVersion: TXIDVersion, receiptLogs: TransactionReceiptLog[]) => Optional<string>;
export declare const parseRelayAdaptReturnValue: (txidVersion: TXIDVersion, data: string) => Optional<string>;
