{"version":3,"file":"tx-notes.test.js","sourceRoot":"","sources":["../../../../src/services/transactions/__tests__/tx-notes.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  OutputType,\n  ByteLength,\n  ByteUtils,\n  RailgunEngine,\n} from '@railgun-community/engine';\nimport chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport {\n  RailgunERC20Amount,\n  RailgunERC20AmountRecipient,\n} from '@railgun-community/shared-models';\nimport {\n  MOCK_DB_ENCRYPTION_KEY,\n  MOCK_ETH_WALLET_ADDRESS,\n  MOCK_MEMO,\n  MOCK_MNEMONIC,\n  MOCK_RAILGUN_WALLET_ADDRESS,\n} from '../../../tests/mocks.test';\nimport {\n  closeTestEngine,\n  initTestEngine,\n  initTestEngineNetworks,\n} from '../../../tests/setup.test';\nimport {\n  createRailgunWallet,\n  fullWalletForID,\n} from '../../railgun/wallets/wallets';\nimport {\n  compareERC20AmountRecipientArrays,\n  erc20NoteFromERC20AmountRecipient,\n} from '../tx-notes';\n\nconst MOCK_TOKEN = '0x236c614a38362644deb15c9789779faf508bc6fe';\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\nconst padTo32BytesUnHex = (str: string) => {\n  return ByteUtils.padToLength(ByteUtils.strip0x(str), ByteLength.UINT_256);\n};\n\nconst formatAmountString = (erc20Amount: RailgunERC20Amount) => {\n  return BigInt(erc20Amount.amount);\n};\n\nlet railgunWalletID: string;\n\ndescribe('tx-notes', () => {\n  before(async function run() {\n    this.timeout(60_000);\n    await initTestEngine();\n    await initTestEngineNetworks();\n    const railgunWalletInfo = await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC,\n      undefined, // creationBlockNumbers\n    );\n    railgunWalletID = railgunWalletInfo.id;\n  });\n  after(async () => {\n    await closeTestEngine();\n  });\n\n  it('Should test erc20 note creation', () => {\n    const erc20AmountRecipient: RailgunERC20AmountRecipient = {\n      tokenAddress: MOCK_TOKEN,\n      amount: BigInt(0x100),\n      recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n    };\n    const railgunWallet = fullWalletForID(railgunWalletID);\n    const note = erc20NoteFromERC20AmountRecipient(\n      erc20AmountRecipient,\n      railgunWallet,\n      OutputType.Transfer,\n      true, // showSenderAddressToRecipient\n      MOCK_MEMO,\n    );\n\n    const addressData = RailgunEngine.decodeAddress(\n      MOCK_RAILGUN_WALLET_ADDRESS,\n    );\n\n    expect(note.value).to.equal(formatAmountString(erc20AmountRecipient));\n    expect(note.receiverAddressData.masterPublicKey).to.equal(\n      addressData.masterPublicKey,\n    );\n    expect(note.tokenHash).to.equal(padTo32BytesUnHex(MOCK_TOKEN));\n  });\n\n  it('Should test NFT note creation', () => {\n    const erc20AmountRecipient: RailgunERC20AmountRecipient = {\n      tokenAddress: MOCK_TOKEN,\n      amount: BigInt(0x100),\n      recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n    };\n    const railgunWallet = fullWalletForID(railgunWalletID);\n    const note = erc20NoteFromERC20AmountRecipient(\n      erc20AmountRecipient,\n      railgunWallet,\n      OutputType.Transfer,\n      true, // showSenderAddressToRecipient\n      MOCK_MEMO,\n    );\n\n    const addressData = RailgunEngine.decodeAddress(\n      MOCK_RAILGUN_WALLET_ADDRESS,\n    );\n\n    expect(note.value).to.equal(formatAmountString(erc20AmountRecipient));\n    expect(note.receiverAddressData.masterPublicKey).to.equal(\n      addressData.masterPublicKey,\n    );\n    expect(note.tokenHash).to.equal(padTo32BytesUnHex(MOCK_TOKEN));\n  });\n\n  it('Should test token array comparisons', () => {\n    const erc20AmountRecipients1: RailgunERC20AmountRecipient[] = [\n      {\n        tokenAddress: '1',\n        amount: 100n,\n        recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n      },\n      {\n        tokenAddress: '2',\n        amount: BigInt(200),\n        recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n      },\n      {\n        tokenAddress: '3',\n        amount: 300n,\n        recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n      },\n    ];\n\n    // Same same\n    const erc20AmountRecipients2: RailgunERC20AmountRecipient[] = [\n      {\n        tokenAddress: '1',\n        amount: 100n,\n        recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n      },\n      {\n        tokenAddress: '2',\n        amount: BigInt(200),\n        recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n      },\n      {\n        tokenAddress: '3',\n        amount: 300n,\n        recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n      },\n    ];\n\n    // Different addresses\n    const erc20AmountRecipients3: RailgunERC20AmountRecipient[] = [\n      {\n        tokenAddress: '1',\n        amount: 100n,\n        recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n      },\n      {\n        tokenAddress: '3',\n        amount: BigInt(200),\n        recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n      },\n      {\n        tokenAddress: '5',\n        amount: 300n,\n        recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n      },\n    ];\n\n    // Different amounts\n    const erc20AmountRecipients4: RailgunERC20AmountRecipient[] = [\n      {\n        tokenAddress: '1',\n        amount: 100n,\n        recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n      },\n      {\n        tokenAddress: '2',\n        amount: 300n,\n        recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n      },\n      {\n        tokenAddress: '3',\n        amount: BigInt(200),\n        recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n      },\n    ];\n\n    // Different recipients\n    const erc20AmountRecipients5: RailgunERC20AmountRecipient[] = [\n      {\n        tokenAddress: '1',\n        amount: 100n,\n        recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n      },\n      {\n        tokenAddress: '2',\n        amount: BigInt(200),\n        recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n      },\n      {\n        tokenAddress: '3',\n        amount: 300n,\n        recipientAddress: MOCK_ETH_WALLET_ADDRESS,\n      },\n    ];\n\n    expect(\n      compareERC20AmountRecipientArrays(\n        erc20AmountRecipients1,\n        erc20AmountRecipients2,\n      ),\n    ).to.be.true;\n    expect(\n      compareERC20AmountRecipientArrays(\n        erc20AmountRecipients1,\n        erc20AmountRecipients3,\n      ),\n    ).to.be.false;\n    expect(\n      compareERC20AmountRecipientArrays(\n        erc20AmountRecipients1,\n        erc20AmountRecipients4,\n      ),\n    ).to.be.false;\n    expect(\n      compareERC20AmountRecipientArrays(\n        erc20AmountRecipients1,\n        erc20AmountRecipients5,\n      ),\n    ).to.be.false;\n  });\n\n  it('Should compare erc20 amount recipients', () => {\n    const sameA: RailgunERC20AmountRecipient[] = [\n      {\n        tokenAddress: '0x1234',\n        amount: 100n,\n        recipientAddress: 'hello',\n      },\n      {\n        tokenAddress: '0x1234',\n        amount: BigInt(200),\n        recipientAddress: 'hello2',\n      },\n    ];\n    const sameB: RailgunERC20AmountRecipient[] = [\n      {\n        tokenAddress: '0x1234',\n        amount: BigInt(200),\n        recipientAddress: 'hello2',\n      },\n      {\n        tokenAddress: '0x1234',\n        amount: 100n,\n        recipientAddress: 'hello',\n      },\n    ];\n    const differentC: RailgunERC20AmountRecipient[] = [\n      {\n        tokenAddress: '0x1234',\n        amount: 100n,\n        recipientAddress: 'hello',\n      },\n    ];\n\n    expect(compareERC20AmountRecipientArrays(sameA, sameB)).to.be.true;\n    expect(compareERC20AmountRecipientArrays(sameA, differentC)).to.be.false;\n  });\n});\n"]}