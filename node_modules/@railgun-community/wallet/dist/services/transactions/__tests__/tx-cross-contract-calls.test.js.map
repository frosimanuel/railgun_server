{"version":3,"file":"tx-cross-contract-calls.test.js","sourceRoot":"","sources":["../../../../src/services/transactions/__tests__/tx-cross-contract-calls.test.ts"],"names":[],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport Sinon, { SinonStub, SinonSpy } from 'sinon';\nimport {\n  RailgunWallet,\n  TransactionBatch,\n  getTokenDataERC20,\n  MINIMUM_RELAY_ADAPT_CROSS_CONTRACT_CALLS_GAS_LIMIT_V2,\n  TransactionStructV2,\n  TransactionStructV3,\n  RelayAdaptVersionedSmartContracts,\n} from '@railgun-community/engine';\nimport {\n  RailgunERC20Amount,\n  NetworkName,\n  NETWORK_CONFIG,\n  EVMGasType,\n  RailgunERC20AmountRecipient,\n  TransactionGasDetails,\n  isDefined,\n} from '@railgun-community/shared-models';\nimport {\n  closeTestEngine,\n  initTestEngine,\n  initTestEngineNetworks,\n} from '../../../tests/setup.test';\nimport {\n  MOCK_BOUND_PARAMS_V2,\n  MOCK_BOUND_PARAMS_V3,\n  MOCK_COMMITMENTS,\n  MOCK_DB_ENCRYPTION_KEY,\n  MOCK_ERC20_RECIPIENTS,\n  MOCK_ETH_WALLET_ADDRESS,\n  MOCK_FALLBACK_PROVIDER_JSON_CONFIG_POLYGON,\n  MOCK_FEE_TOKEN_DETAILS,\n  MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V2,\n  MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V3,\n  MOCK_MNEMONIC,\n  MOCK_NFT_AMOUNTS,\n  MOCK_NFT_AMOUNT_RECIPIENTS,\n  MOCK_NULLIFIERS,\n  MOCK_TOKEN_ADDRESS,\n  MOCK_TOKEN_ADDRESS_2,\n  MOCK_TOKEN_AMOUNTS,\n  MOCK_TOKEN_FEE,\n  MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n} from '../../../tests/mocks.test';\nimport {\n  createRailgunWallet,\n  fullWalletForID,\n} from '../../railgun/wallets/wallets';\nimport { setCachedProvedTransaction } from '../proof-cache';\nimport {\n  createNFTTokenDataFromRailgunNFTAmount,\n  gasEstimateForUnprovenCrossContractCalls,\n  generateCrossContractCallsProof,\n  getRelayAdaptTransactionError,\n  parseRelayAdaptReturnValue,\n  populateProvedCrossContractCalls,\n} from '../tx-cross-contract-calls';\nimport FormattedRelayAdaptErrorLogs from './json/formatted-relay-adapt-error-logs.json';\nimport { ContractTransaction, FallbackProvider } from 'ethers';\nimport { getTestTXIDVersion, isV2Test } from '../../../tests/helper.test';\n\nlet gasEstimateStub: SinonStub;\nlet railProveStub: SinonStub;\nlet railDummyProveStub: SinonStub;\nlet relayAdaptPopulateCrossContractCalls: SinonStub;\nlet relayAdaptGasEstimateStub: SinonStub;\nlet addUnshieldDataSpy: SinonSpy;\nlet erc20NoteSpy: SinonSpy;\n\nlet railgunWallet: RailgunWallet;\nlet broadcasterFeeERC20AmountRecipient: RailgunERC20AmountRecipient;\n\nconst polygonRelayAdaptContract =\n  NETWORK_CONFIG[NetworkName.Polygon].relayAdaptContract;\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\nconst txidVersion = getTestTXIDVersion();\n\nconst mockERC20TokenData0 = getTokenDataERC20(\n  MOCK_TOKEN_AMOUNTS[0].tokenAddress,\n);\nconst mockERC20TokenData1 = getTokenDataERC20(\n  MOCK_TOKEN_AMOUNTS[1].tokenAddress,\n);\nconst mockNFTTokenData0 = createNFTTokenDataFromRailgunNFTAmount(\n  MOCK_NFT_AMOUNTS[0],\n);\nconst mockNFTTokenData1 = createNFTTokenDataFromRailgunNFTAmount(\n  MOCK_NFT_AMOUNTS[1],\n);\n\nconst mockCrossContractCalls: ContractTransaction[] = [\n  {\n    to: MOCK_ETH_WALLET_ADDRESS,\n    data: '0x0789',\n    value: BigInt('0x01'),\n  },\n  {\n    to: MOCK_ETH_WALLET_ADDRESS,\n    data: '0x9789',\n    value: BigInt('0x02'),\n  },\n];\n\nconst MOCK_TOKEN_AMOUNTS_DIFFERENT: RailgunERC20Amount[] = [\n  {\n    tokenAddress: MOCK_TOKEN_ADDRESS,\n    amount: 100n,\n  },\n  {\n    tokenAddress: MOCK_TOKEN_ADDRESS_2,\n    amount: 300n,\n  },\n];\n\nconst overallBatchMinGasPrice = BigInt('0x1000');\n\nconst minGasLimit = MINIMUM_RELAY_ADAPT_CROSS_CONTRACT_CALLS_GAS_LIMIT_V2;\n\nconst gasDetails: TransactionGasDetails = {\n  evmGasType: EVMGasType.Type1,\n  gasEstimate: 2000n,\n  gasPrice: overallBatchMinGasPrice,\n};\n\nconst stubRelayAdaptGasEstimate = () => {\n  relayAdaptGasEstimateStub = Sinon.stub(\n    RelayAdaptVersionedSmartContracts,\n    'estimateGasWithErrorHandler',\n  ).resolves(BigInt('200'));\n};\n\nconst stubGasEstimateSuccess = () => {\n  gasEstimateStub = Sinon.stub(\n    FallbackProvider.prototype,\n    'estimateGas',\n  ).resolves(BigInt('200'));\n};\n\nconst stubRelayAdaptGasEstimateFailure = () => {\n  relayAdaptGasEstimateStub = Sinon.stub(\n    RelayAdaptVersionedSmartContracts,\n    'estimateGasWithErrorHandler',\n  ).rejects(new Error('RelayAdapt multicall failed at index UNKNOWN.'));\n};\n\nconst spyOnSetUnshield = () => {\n  addUnshieldDataSpy = Sinon.spy(TransactionBatch.prototype, 'addUnshieldData');\n};\n\ndescribe('tx-cross-contract-calls', () => {\n  before(async function run() {\n    this.timeout(60_000);\n    await initTestEngine();\n    await initTestEngineNetworks(\n      NetworkName.Polygon,\n      MOCK_FALLBACK_PROVIDER_JSON_CONFIG_POLYGON,\n    );\n\n    const railgunWalletInfo = await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC,\n      undefined, // creationBlockNumbers\n    );\n    if (!isDefined(railgunWalletInfo)) {\n      throw new Error('Expected railgunWalletInfo');\n    }\n    railgunWallet = fullWalletForID(railgunWalletInfo.id);\n\n    const broadcasterWalletInfo = await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC,\n      undefined, // creationBlockNumbers\n    );\n    if (!isDefined(broadcasterWalletInfo)) {\n      throw new Error('Expected broadcasterWalletInfo');\n    }\n    const broadcasterRailgunAddress = broadcasterWalletInfo.railgunAddress;\n\n    broadcasterFeeERC20AmountRecipient = {\n      ...MOCK_TOKEN_FEE,\n      recipientAddress: broadcasterRailgunAddress,\n    };\n\n    railProveStub = Sinon.stub(\n      TransactionBatch.prototype,\n      'generateTransactions',\n    ).resolves({\n      provedTransactions: [\n        {\n          nullifiers: MOCK_NULLIFIERS,\n        },\n      ] as (TransactionStructV2 | TransactionStructV3)[],\n      preTransactionPOIsPerTxidLeafPerList: {},\n    });\n    railDummyProveStub = Sinon.stub(\n      TransactionBatch.prototype,\n      'generateDummyTransactions',\n    ).resolves([\n      {\n        txidVersion,\n        commitments: MOCK_COMMITMENTS,\n        boundParams: isV2Test() ? MOCK_BOUND_PARAMS_V2 : MOCK_BOUND_PARAMS_V3,\n        nullifiers: MOCK_NULLIFIERS,\n      },\n    ] as (TransactionStructV2 | TransactionStructV3)[]);\n    relayAdaptPopulateCrossContractCalls = Sinon.stub(\n      RelayAdaptVersionedSmartContracts,\n      'populateCrossContractCalls',\n    ).resolves({ data: '0x0123' } as ContractTransaction);\n  });\n  afterEach(() => {\n    gasEstimateStub?.restore();\n    addUnshieldDataSpy?.restore();\n    erc20NoteSpy?.restore();\n    relayAdaptGasEstimateStub?.restore();\n  });\n  after(async () => {\n    railProveStub.restore();\n    railDummyProveStub.restore();\n    relayAdaptPopulateCrossContractCalls.restore();\n    await closeTestEngine();\n  });\n\n  // GAS ESTIMATE\n\n  it('Should get gas estimates for valid cross contract calls', async () => {\n    stubRelayAdaptGasEstimate();\n    spyOnSetUnshield();\n    const rsp = await gasEstimateForUnprovenCrossContractCalls(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_TOKEN_AMOUNTS,\n      MOCK_NFT_AMOUNTS,\n      MOCK_ERC20_RECIPIENTS,\n      MOCK_NFT_AMOUNT_RECIPIENTS,\n      mockCrossContractCalls,\n      MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n      MOCK_FEE_TOKEN_DETAILS,\n      false, // sendWithPublicWallet\n      minGasLimit,\n    );\n    expect(rsp.broadcasterFeeCommitment).to.not.be.undefined;\n    expect(rsp.broadcasterFeeCommitment?.commitmentCiphertext).to.deep.equal(\n      isV2Test()\n        ? MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V2\n        : MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V3,\n    );\n    expect(addUnshieldDataSpy.called).to.be.true;\n    expect(addUnshieldDataSpy.args).to.deep.equal([\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData0,\n          value: BigInt('0x0100'),\n          allowOverride: false,\n        },\n      ], // run 1 - erc20 1\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData1,\n          value: BigInt('0x0200'),\n          allowOverride: false,\n        },\n      ], // run 1 - erc20 2\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockNFTTokenData0,\n          value: BigInt('1'),\n          allowOverride: false,\n        },\n      ], // run 1 - nft 0\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockNFTTokenData1,\n          value: BigInt('2'),\n          allowOverride: false,\n        },\n      ], // run 1 - nft 1\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData0,\n          value: BigInt('0x0100'),\n          allowOverride: false,\n        },\n      ], // run 2 - erc20 1\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData1,\n          value: BigInt('0x0200'),\n          allowOverride: false,\n        },\n      ], // run 2 - erc20 2\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockNFTTokenData0,\n          value: BigInt('1'),\n          allowOverride: false,\n        },\n      ], // run 2 - nft 0\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockNFTTokenData1,\n          value: BigInt('2'),\n          allowOverride: false,\n        },\n      ], // run 2 - nft 1\n    ]);\n    // Add 9000 for the dummy tx variance\n    // expect(rsp.gasEstimate).to.equal(9000n + 280n);\n    expect(rsp.gasEstimate).to.equal(3_200_000n); // Cross Contract Minimum\n  }).timeout(10_000);\n\n  it('Should get gas estimates for valid cross contract calls, public wallet', async () => {\n    stubRelayAdaptGasEstimate();\n    spyOnSetUnshield();\n    const rsp = await gasEstimateForUnprovenCrossContractCalls(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_TOKEN_AMOUNTS,\n      MOCK_NFT_AMOUNTS,\n      MOCK_ERC20_RECIPIENTS,\n      MOCK_NFT_AMOUNT_RECIPIENTS,\n      mockCrossContractCalls,\n      MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n      MOCK_FEE_TOKEN_DETAILS,\n      true, // sendWithPublicWallet\n      minGasLimit,\n    );\n\n    expect(rsp.broadcasterFeeCommitment).to.be.undefined;\n    expect(addUnshieldDataSpy.called).to.be.true;\n    expect(addUnshieldDataSpy.args).to.deep.equal([\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData0,\n          value: BigInt('0x0100'),\n          allowOverride: false,\n        },\n      ], // run 1 - erc20 1\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData1,\n          value: BigInt('0x0200'),\n          allowOverride: false,\n        },\n      ], // run 1 - erc20 2\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockNFTTokenData0,\n          value: BigInt('1'),\n          allowOverride: false,\n        },\n      ], // run 1 - nft 0\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockNFTTokenData1,\n          value: BigInt('2'),\n          allowOverride: false,\n        },\n      ], // run 1 - nft 1\n    ]);\n    // Add 9000 for the dummy tx variance\n    // expect(rsp.gasEstimate).to.equal(9000n + 280n);\n    expect(rsp.gasEstimate).to.equal(3_200_000n); // Cross Contract Minimum\n  }).timeout(10_000);\n\n  it('Should error on gas estimates for invalid cross contract calls', async () => {\n    stubGasEstimateSuccess();\n    await expect(\n      gasEstimateForUnprovenCrossContractCalls(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        MOCK_DB_ENCRYPTION_KEY,\n        MOCK_TOKEN_AMOUNTS,\n        MOCK_NFT_AMOUNTS,\n        MOCK_ERC20_RECIPIENTS,\n        MOCK_NFT_AMOUNT_RECIPIENTS,\n        [{ data: 'abc' } as ContractTransaction], // Invalid\n        MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n        MOCK_FEE_TOKEN_DETAILS,\n        false, // sendWithPublicWallet\n        minGasLimit,\n      ),\n    ).rejectedWith(`Cross-contract calls require to and data fields.`);\n  });\n\n  it('Should error on cross contract calls gas estimate for ethers rejections', async () => {\n    stubRelayAdaptGasEstimateFailure();\n    await expect(\n      gasEstimateForUnprovenCrossContractCalls(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        MOCK_DB_ENCRYPTION_KEY,\n        MOCK_TOKEN_AMOUNTS,\n        MOCK_NFT_AMOUNTS,\n        MOCK_ERC20_RECIPIENTS,\n        MOCK_NFT_AMOUNT_RECIPIENTS,\n        mockCrossContractCalls,\n        MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n        MOCK_FEE_TOKEN_DETAILS,\n        false, // sendWithPublicWallet\n        minGasLimit,\n      ),\n    ).rejectedWith('RelayAdapt multicall failed at index UNKNOWN.');\n  });\n\n  // PROVE AND SEND\n\n  it('Should populate tx for valid cross contract calls', async () => {\n    stubGasEstimateSuccess();\n    setCachedProvedTransaction(undefined);\n    spyOnSetUnshield();\n    await generateCrossContractCallsProof(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_TOKEN_AMOUNTS,\n      MOCK_NFT_AMOUNTS,\n      MOCK_ERC20_RECIPIENTS,\n      MOCK_NFT_AMOUNT_RECIPIENTS,\n      mockCrossContractCalls,\n      broadcasterFeeERC20AmountRecipient,\n      false, // sendWithPublicWallet\n      overallBatchMinGasPrice,\n      minGasLimit,\n      () => {}, // progressCallback\n    );\n    expect(addUnshieldDataSpy.called).to.be.true;\n    expect(addUnshieldDataSpy.args).to.deep.equal([\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData0,\n          value: BigInt('0x0100'),\n          allowOverride: false,\n        },\n      ], // dummy proof - erc20 token 0\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData1,\n          value: BigInt('0x0200'),\n          allowOverride: false,\n        },\n      ], // dummy proof - erc20 token 1\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockNFTTokenData0,\n          value: BigInt('1'),\n          allowOverride: false,\n        },\n      ], // dummy proof - nft 0\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockNFTTokenData1,\n          value: BigInt('2'),\n          allowOverride: false,\n        },\n      ], // actual proof - nft 1\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData0,\n          value: BigInt('0x0100'),\n          allowOverride: false,\n        },\n      ], // actual proof - erc20 token 0\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData1,\n          value: BigInt('0x0200'),\n          allowOverride: false,\n        },\n      ], // actual proof - erc20 token 1\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockNFTTokenData0,\n          value: BigInt('1'),\n          allowOverride: false,\n        },\n      ], // actual proof - nft 0\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockNFTTokenData1,\n          value: BigInt('2'),\n          allowOverride: false,\n        },\n      ], // actual proof - nft 1\n    ]);\n    const populateResponse = await populateProvedCrossContractCalls(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_TOKEN_AMOUNTS,\n      MOCK_NFT_AMOUNTS,\n      MOCK_ERC20_RECIPIENTS,\n      MOCK_NFT_AMOUNT_RECIPIENTS,\n      mockCrossContractCalls,\n      broadcasterFeeERC20AmountRecipient,\n      false, // sendWithPublicWallet\n      overallBatchMinGasPrice,\n      gasDetails, // gasDetails\n    );\n    expect(populateResponse.nullifiers).to.deep.equal([\n      '0x0000000000000000000000000000000000000000000000000000000000000001',\n      '0x0000000000000000000000000000000000000000000000000000000000000002',\n    ]);\n\n    const { transaction } = populateResponse;\n\n    expect(transaction.nonce).to.equal(undefined);\n    expect(transaction.gasPrice?.toString()).to.equal('4096');\n    expect(transaction.gasLimit).to.equal(2400n);\n    expect(transaction.value?.toString()).to.equal(undefined);\n    expect(transaction.data).to.equal('0x0123');\n    expect(transaction.to).to.equal(undefined);\n    expect(transaction.chainId).to.equal(undefined);\n    expect(transaction.type).to.equal(1);\n  });\n\n  it('Should error on populate tx for invalid cross contract calls', async () => {\n    stubGasEstimateSuccess();\n    await expect(\n      populateProvedCrossContractCalls(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        MOCK_TOKEN_AMOUNTS_DIFFERENT,\n        MOCK_NFT_AMOUNTS,\n        MOCK_ERC20_RECIPIENTS,\n        MOCK_NFT_AMOUNT_RECIPIENTS,\n        [{ data: '123' } as ContractTransaction], // Invalid\n        broadcasterFeeERC20AmountRecipient,\n        false, // sendWithPublicWallet\n        overallBatchMinGasPrice,\n        gasDetails,\n      ),\n    ).rejectedWith('Invalid proof for this transaction');\n  });\n\n  it('Should error on populate cross contract calls tx for unproved transaction', async () => {\n    stubGasEstimateSuccess();\n    setCachedProvedTransaction(undefined);\n    await expect(\n      populateProvedCrossContractCalls(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        MOCK_TOKEN_AMOUNTS,\n        MOCK_NFT_AMOUNTS,\n        MOCK_ERC20_RECIPIENTS,\n        MOCK_NFT_AMOUNT_RECIPIENTS,\n        mockCrossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        false, // sendWithPublicWallet\n        overallBatchMinGasPrice,\n        gasDetails,\n      ),\n    ).rejectedWith('Invalid proof for this transaction');\n  });\n\n  it('Should error on populate cross contract calls tx when params changed (invalid cached proof)', async () => {\n    stubGasEstimateSuccess();\n    await generateCrossContractCallsProof(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_TOKEN_AMOUNTS,\n      MOCK_NFT_AMOUNTS,\n      MOCK_ERC20_RECIPIENTS,\n      MOCK_NFT_AMOUNT_RECIPIENTS,\n      mockCrossContractCalls,\n      broadcasterFeeERC20AmountRecipient,\n      false, // sendWithPublicWallet\n      overallBatchMinGasPrice,\n      minGasLimit,\n      () => {}, // progressCallback\n    );\n    await expect(\n      populateProvedCrossContractCalls(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        MOCK_TOKEN_AMOUNTS_DIFFERENT,\n        MOCK_NFT_AMOUNTS,\n        MOCK_ERC20_RECIPIENTS,\n        MOCK_NFT_AMOUNT_RECIPIENTS,\n        mockCrossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        false, // sendWithPublicWallet\n        overallBatchMinGasPrice,\n        gasDetails,\n      ),\n    ).rejectedWith('Invalid proof for this transaction');\n  });\n\n  it('Should decode and parse relay adapt error logs (from failed Sushi V2 LP removal)', () => {\n    const transactionError = getRelayAdaptTransactionError(\n      txidVersion,\n      FormattedRelayAdaptErrorLogs,\n    );\n    expect(transactionError).to.equal('ds-math-sub-underflow');\n  });\n\n  it('Should parse relay adapt log revert data', () => {\n    const transactionError = parseRelayAdaptReturnValue(\n      txidVersion,\n      `0x5c0dee5d00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006408c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001564732d6d6174682d7375622d756e646572666c6f77000000000000000000000000000000000000000000000000000000000000000000000000000000`,\n    );\n    expect(transactionError).to.equal('ds-math-sub-underflow');\n  });\n\n  it('Should parse relay adapt revert data from railgun cookbook', () => {\n    const transactionError = parseRelayAdaptReturnValue(\n      txidVersion,\n      `0x5c0dee5d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002d52656c617941646170743a205265667573696e6720746f2063616c6c205261696c67756e20636f6e747261637400000000000000000000000000000000000000`,\n    );\n    expect(transactionError).to.equal(\n      'RelayAdapt: Refusing to call Railgun contract',\n    );\n  });\n});\n"]}