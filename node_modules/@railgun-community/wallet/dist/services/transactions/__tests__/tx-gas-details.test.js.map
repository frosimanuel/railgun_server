{"version":3,"file":"tx-gas-details.test.js","sourceRoot":"","sources":["../../../../src/services/transactions/__tests__/tx-gas-details.test.ts"],"names":[],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport Sinon, { SinonStub } from 'sinon';\nimport {\n  CommitmentSummary,\n  createFallbackProviderFromJsonConfig,\n  EVMGasType,\n  NetworkName,\n  TransactionGasDetails,\n} from '@railgun-community/shared-models';\nimport {\n  MOCK_ETH_WALLET_ADDRESS,\n  MOCK_FALLBACK_PROVIDER_JSON_CONFIG_POLYGON,\n} from '../../../tests/mocks.test';\nimport {\n  gasEstimateResponse,\n  getGasEstimate,\n  setGasDetailsForTransaction,\n} from '../tx-gas-details';\nimport { setFallbackProviderForNetwork } from '../../railgun';\nimport { ContractTransaction, FallbackProvider } from 'ethers';\nimport { getTestTXIDVersion } from '../../../tests/helper.test';\n\nlet gasEstimateStub: SinonStub;\n\nconst txidVersion = getTestTXIDVersion();\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\n\nconst stubGasEstimateSuccess = () => {\n  gasEstimateStub = Sinon.stub(\n    FallbackProvider.prototype,\n    'estimateGas',\n  ).resolves(BigInt('200'));\n};\n\ndescribe('tx-gas', () => {\n  afterEach(() => {\n    gasEstimateStub?.restore();\n  });\n\n  it('Should format gas estimate response', async () => {\n    const transaction = {} as ContractTransaction;\n    const fallbackProvider = createFallbackProviderFromJsonConfig(\n      MOCK_FALLBACK_PROVIDER_JSON_CONFIG_POLYGON,\n    );\n\n    setFallbackProviderForNetwork(\n      NetworkName.Polygon,\n      fallbackProvider as unknown as FallbackProvider,\n    );\n\n    const gasEstimate = await getGasEstimate(\n      txidVersion,\n      NetworkName.Polygon,\n      transaction,\n      MOCK_ETH_WALLET_ADDRESS,\n      true, // sendWithPublicWallet\n      false, // isCrossContractCall\n    );\n\n    const isGasEstimateWithDummyProof = false;\n    const rsp = gasEstimateResponse(\n      gasEstimate,\n      undefined, // broadcasterFeeCommitment\n      isGasEstimateWithDummyProof,\n    );\n\n    const expectedGas = 53000n; // This field may vary\n    const variance = 0.05; // 5%\n    const lowerBound = Number(expectedGas) * (1 - variance);\n    const upperBound = Number(expectedGas) * (1 + variance);\n\n    expect(Number(rsp.gasEstimate)).to.be.within(lowerBound, upperBound);\n  }).timeout(6000);\n\n  it('Should pull gas estimate for basic transaction - self-signed', async () => {\n    stubGasEstimateSuccess();\n    const fallbackProvider = createFallbackProviderFromJsonConfig(\n      MOCK_FALLBACK_PROVIDER_JSON_CONFIG_POLYGON,\n    );\n    setFallbackProviderForNetwork(\n      NetworkName.Polygon,\n      fallbackProvider as unknown as FallbackProvider,\n    );\n    const tx: ContractTransaction = {\n      chainId: 137n,\n      to: MOCK_ETH_WALLET_ADDRESS,\n      value: BigInt('100'),\n      data: '0x',\n    };\n\n    const gasEstimate = await getGasEstimate(\n      txidVersion,\n      NetworkName.Polygon,\n      tx,\n      MOCK_ETH_WALLET_ADDRESS,\n      true, // sendWithPublicWallet\n      false, // isCrossContractCall\n    );\n    const isGasEstimateWithDummyProof = true;\n    const rsp = gasEstimateResponse(\n      gasEstimate,\n      undefined, // broadcasterFeeCommitment\n      isGasEstimateWithDummyProof,\n    );\n    expect(rsp.gasEstimate).to.not.be.undefined;\n  }).timeout(60_000);\n\n  it('Should pull gas estimate for basic transaction - broadcaster', async () => {\n    stubGasEstimateSuccess();\n    const fallbackProvider = createFallbackProviderFromJsonConfig(\n      MOCK_FALLBACK_PROVIDER_JSON_CONFIG_POLYGON,\n    );\n    setFallbackProviderForNetwork(\n      NetworkName.Polygon,\n      fallbackProvider as unknown as FallbackProvider,\n    );\n    const tx: ContractTransaction = {\n      chainId: 137n,\n      to: MOCK_ETH_WALLET_ADDRESS,\n      value: BigInt('100'),\n      data: '0x',\n    };\n    const gasEstimate = await getGasEstimate(\n      txidVersion,\n      NetworkName.Polygon,\n      tx,\n      MOCK_ETH_WALLET_ADDRESS,\n      false, // sendWithPublicWallet\n      false, // isCrossContractCall\n    );\n    const isGasEstimateWithDummyProof = true;\n    const rsp = gasEstimateResponse(\n      gasEstimate,\n      {} as CommitmentSummary,\n      isGasEstimateWithDummyProof,\n    );\n    expect(rsp.gasEstimate).to.not.be.undefined;\n  }).timeout(60_000);\n\n  it('Should set gas details for populated tx', () => {\n    const transaction = {} as ContractTransaction;\n    const gasDetailsType0: TransactionGasDetails = {\n      evmGasType: EVMGasType.Type0,\n      gasEstimate: 100_000n,\n      gasPrice: 500n,\n    };\n    const gasDetailsType1: TransactionGasDetails = {\n      evmGasType: EVMGasType.Type1,\n      gasEstimate: 100_000n,\n      gasPrice: 500n,\n    };\n    const gasDetailsType2: TransactionGasDetails = {\n      evmGasType: EVMGasType.Type2,\n      gasEstimate: 120_000n,\n      maxFeePerGas: 10_000n,\n      maxPriorityFeePerGas: 500n,\n    };\n    // Polygon - self-sign\n    setGasDetailsForTransaction(\n      NetworkName.Polygon,\n      transaction,\n      gasDetailsType2,\n      true, // sendWithPublicWallet\n    );\n    expect(transaction.type).to.equal(2);\n    expect(transaction.gasLimit).to.equal(144_000n);\n    expect(transaction.gasPrice).to.be.undefined;\n    expect(transaction.maxFeePerGas).to.equal(10_000n);\n    expect(transaction.maxPriorityFeePerGas).to.equal(500n);\n    // Polygon - Broadcaster\n    setGasDetailsForTransaction(\n      NetworkName.Polygon,\n      transaction,\n      gasDetailsType1,\n      false, // sendWithPublicWallet\n    );\n    // BNB - self-sign\n    setGasDetailsForTransaction(\n      NetworkName.BNBChain,\n      transaction,\n      gasDetailsType0,\n      true, // sendWithPublicWallet\n    );\n    // BNB - Broadcaster\n    setGasDetailsForTransaction(\n      NetworkName.BNBChain,\n      transaction,\n      gasDetailsType0,\n      false, // sendWithPublicWallet\n    );\n    expect(() =>\n      setGasDetailsForTransaction(\n        NetworkName.Polygon,\n        transaction,\n        gasDetailsType2, // mismatch\n        true, // sendWithPublicWallet\n      ),\n    ).to.throw;\n    expect(transaction.type).to.equal(0);\n    expect(transaction.gasLimit).to.equal(120000n);\n    expect(transaction.gasPrice).to.equal(500n);\n  });\n});\n"]}