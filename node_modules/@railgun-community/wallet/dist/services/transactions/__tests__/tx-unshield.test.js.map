{"version":3,"file":"tx-unshield.test.js","sourceRoot":"","sources":["../../../../src/services/transactions/__tests__/tx-unshield.test.ts"],"names":[],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport Sinon, { SinonStub, SinonSpy } from 'sinon';\nimport {\n  RailgunVersionedSmartContracts,\n  RailgunWallet,\n  RelayAdaptVersionedSmartContracts,\n  TransactionBatch,\n  TransactionStructV2,\n  TransactionStructV3,\n  getTokenDataERC20,\n  getTokenDataNFT,\n} from '@railgun-community/engine';\nimport {\n  RailgunERC20Amount,\n  NetworkName,\n  NETWORK_CONFIG,\n  EVMGasType,\n  RailgunERC20AmountRecipient,\n  TransactionGasDetails,\n  isDefined,\n} from '@railgun-community/shared-models';\nimport {\n  closeTestEngine,\n  initTestEngine,\n  initTestEngineNetworks,\n} from '../../../tests/setup.test';\nimport {\n  MOCK_BOUND_PARAMS_V2,\n  MOCK_BOUND_PARAMS_V3,\n  MOCK_COMMITMENTS,\n  MOCK_DB_ENCRYPTION_KEY,\n  MOCK_ETH_WALLET_ADDRESS,\n  MOCK_FEE_TOKEN_DETAILS,\n  MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V2,\n  MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V3,\n  MOCK_MNEMONIC,\n  MOCK_NFT_AMOUNT_RECIPIENTS_UNSHIELD,\n  MOCK_NULLIFIERS,\n  MOCK_RAILGUN_WALLET_ADDRESS,\n  MOCK_TOKEN_ADDRESS,\n  MOCK_TOKEN_ADDRESS_2,\n  MOCK_TOKEN_AMOUNTS,\n  MOCK_TOKEN_FEE,\n  MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n} from '../../../tests/mocks.test';\nimport {\n  populateProvedUnshield,\n  gasEstimateForUnprovenUnshield,\n  populateProvedUnshieldBaseToken,\n  gasEstimateForUnprovenUnshieldBaseToken,\n  populateProvedUnshieldToOrigin,\n  gasEstimateForUnprovenUnshieldToOrigin,\n} from '../tx-unshield';\nimport {\n  generateUnshieldBaseTokenProof,\n  generateUnshieldProof,\n  generateUnshieldToOriginProof,\n} from '../tx-proof-unshield';\nimport * as txGasDetailsModule from '../tx-gas-details';\nimport {\n  createRailgunWallet,\n  fullWalletForID,\n} from '../../railgun/wallets/wallets';\nimport { setCachedProvedTransaction } from '../proof-cache';\nimport { ContractTransaction, FallbackProvider } from 'ethers';\nimport {\n  MOCK_SHIELD_TXID_FOR_BALANCES,\n  MOCK_TOKEN_BALANCE,\n  createEngineWalletBalancesStub,\n  restoreEngineStubs,\n} from '../../../tests/stubs/engine-stubs.test';\nimport { getTestTXIDVersion, isV2Test } from '../../../tests/helper.test';\n\nlet gasEstimateStub: SinonStub;\nlet railProveStub: SinonStub;\nlet railDummyProveStub: SinonStub;\nlet railTransactStub: SinonStub;\nlet relayAdaptPopulateUnshieldBaseToken: SinonStub;\nlet addUnshieldDataSpy: SinonSpy;\nlet erc20NoteSpy: SinonSpy;\n\nlet railgunWallet: RailgunWallet;\nlet broadcasterFeeERC20AmountRecipient: RailgunERC20AmountRecipient;\n\nconst polygonRelayAdaptContract =\n  NETWORK_CONFIG[NetworkName.Polygon].relayAdaptContract;\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\nconst txidVersion = getTestTXIDVersion();\n\nconst mockERC20TokenData0 = getTokenDataERC20(\n  MOCK_TOKEN_AMOUNTS[0].tokenAddress,\n);\nconst mockERC20TokenData1 = getTokenDataERC20(\n  MOCK_TOKEN_AMOUNTS[1].tokenAddress,\n);\nconst mockNFTTokenData0 = getTokenDataNFT(\n  MOCK_NFT_AMOUNT_RECIPIENTS_UNSHIELD[0].nftAddress,\n  MOCK_NFT_AMOUNT_RECIPIENTS_UNSHIELD[0].nftTokenType as 1 | 2,\n  MOCK_NFT_AMOUNT_RECIPIENTS_UNSHIELD[0].tokenSubID,\n);\nconst mockNFTTokenData1 = getTokenDataNFT(\n  MOCK_NFT_AMOUNT_RECIPIENTS_UNSHIELD[1].nftAddress,\n  MOCK_NFT_AMOUNT_RECIPIENTS_UNSHIELD[1].nftTokenType as 1 | 2,\n  MOCK_NFT_AMOUNT_RECIPIENTS_UNSHIELD[1].tokenSubID,\n);\n\nconst MOCK_TOKEN_AMOUNTS_DIFFERENT: RailgunERC20Amount[] = [\n  {\n    tokenAddress: MOCK_TOKEN_ADDRESS,\n    amount: BigInt(0x0100),\n  },\n  {\n    tokenAddress: MOCK_TOKEN_ADDRESS_2,\n    amount: BigInt(0x0300),\n  },\n];\n\nconst overallBatchMinGasPrice = BigInt('0x1000');\n\nconst gasDetails: TransactionGasDetails = {\n  evmGasType: EVMGasType.Type1,\n  gasEstimate: 1000n,\n  gasPrice: overallBatchMinGasPrice,\n};\nconst gasDetailsType2: TransactionGasDetails = {\n  evmGasType: EVMGasType.Type2,\n  gasEstimate: 1000n,\n  maxFeePerGas: overallBatchMinGasPrice,\n  maxPriorityFeePerGas: overallBatchMinGasPrice,\n};\n\nconst MOCK_TOKEN_AMOUNT_RECIPIENTS_INVALID: RailgunERC20AmountRecipient[] =\n  MOCK_TOKEN_AMOUNTS.map(erc20Amount => ({\n    ...erc20Amount,\n    recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n  }));\n\nconst MOCK_TOKEN_AMOUNT_RECIPIENTS: RailgunERC20AmountRecipient[] =\n  MOCK_TOKEN_AMOUNTS.map(erc20Amount => ({\n    ...erc20Amount,\n    recipientAddress: MOCK_ETH_WALLET_ADDRESS,\n  }));\n\nconst MOCK_TOKEN_AMOUNT_RECIPIENTS_DIFFERENT: RailgunERC20AmountRecipient[] =\n  MOCK_TOKEN_AMOUNTS_DIFFERENT.map(erc20Amount => ({\n    ...erc20Amount,\n    recipientAddress: MOCK_ETH_WALLET_ADDRESS,\n  }));\n\nconst stubGasEstimateSuccess = () => {\n  gasEstimateStub = Sinon.stub(txGasDetailsModule, 'getGasEstimate').resolves(\n    BigInt('200'),\n  );\n};\n\nconst stubGasEstimateFailure = () => {\n  gasEstimateStub = Sinon.stub(txGasDetailsModule, 'getGasEstimate').rejects(\n    new Error('test rejection - gas estimate'),\n  );\n};\n\nconst spyOnSetUnshield = () => {\n  addUnshieldDataSpy = Sinon.spy(TransactionBatch.prototype, 'addUnshieldData');\n};\n\ndescribe('tx-unshield', () => {\n  before(async function run() {\n    this.timeout(60_000);\n    await initTestEngine();\n    await initTestEngineNetworks();\n    const railgunWalletInfo = await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC,\n      undefined, // creationBlockNumbers\n    );\n    if (!isDefined(railgunWalletInfo)) {\n      throw new Error('Expected railgunWalletInfo');\n    }\n    railgunWallet = fullWalletForID(railgunWalletInfo.id);\n\n    const broadcasterWalletInfo = await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC,\n      undefined, // creationBlockNumbers\n    );\n    if (!isDefined(broadcasterWalletInfo)) {\n      throw new Error('Expected broadcasterWalletInfo');\n    }\n    const broadcasterRailgunAddress = broadcasterWalletInfo.railgunAddress;\n\n    broadcasterFeeERC20AmountRecipient = {\n      ...MOCK_TOKEN_FEE,\n      recipientAddress: broadcasterRailgunAddress,\n    };\n\n    railProveStub = Sinon.stub(\n      TransactionBatch.prototype,\n      'generateTransactions',\n    ).resolves({\n      provedTransactions: [\n        {\n          nullifiers: MOCK_NULLIFIERS,\n        },\n      ] as (TransactionStructV2 | TransactionStructV3)[],\n      preTransactionPOIsPerTxidLeafPerList: {},\n    });\n    railDummyProveStub = Sinon.stub(\n      TransactionBatch.prototype,\n      'generateDummyTransactions',\n    ).resolves([\n      {\n        txidVersion,\n        commitments: MOCK_COMMITMENTS,\n        boundParams: isV2Test() ? MOCK_BOUND_PARAMS_V2 : MOCK_BOUND_PARAMS_V3,\n        nullifiers: MOCK_NULLIFIERS,\n      },\n    ] as (TransactionStructV2 | TransactionStructV3)[]);\n    railTransactStub = Sinon.stub(\n      RailgunVersionedSmartContracts,\n      'generateTransact',\n    ).resolves({ data: '0x0123' } as ContractTransaction);\n    relayAdaptPopulateUnshieldBaseToken = Sinon.stub(\n      RelayAdaptVersionedSmartContracts,\n      'populateUnshieldBaseToken',\n    ).resolves({ data: '0x0123' } as ContractTransaction);\n\n    // For Unshield To Origin\n    await createEngineWalletBalancesStub(\n      railgunWallet.addressKeys,\n      MOCK_TOKEN_ADDRESS,\n      0,\n    );\n  });\n  afterEach(() => {\n    gasEstimateStub?.restore();\n    addUnshieldDataSpy?.restore();\n    erc20NoteSpy?.restore();\n  });\n  after(async () => {\n    railProveStub.restore();\n    railDummyProveStub.restore();\n    railTransactStub.restore();\n    relayAdaptPopulateUnshieldBaseToken.restore();\n    restoreEngineStubs();\n    await closeTestEngine();\n  });\n\n  // UNSHIELD - GAS ESTIMATE\n\n  it('Should get gas estimates for valid Unshield', async () => {\n    stubGasEstimateSuccess();\n    spyOnSetUnshield();\n    const rsp = await gasEstimateForUnprovenUnshield(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_TOKEN_AMOUNT_RECIPIENTS,\n      [], // nftAmountRecipients\n      MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n      MOCK_FEE_TOKEN_DETAILS,\n      false, // sendWithPublicWallet\n    );\n    expect(rsp.broadcasterFeeCommitment).to.not.be.undefined;\n    expect(rsp.broadcasterFeeCommitment?.commitmentCiphertext).to.deep.equal(\n      isV2Test()\n        ? MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V2\n        : MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V3,\n    );\n    expect(addUnshieldDataSpy.called).to.be.true;\n    expect(addUnshieldDataSpy.args).to.deep.equal([\n      [\n        {\n          toAddress: MOCK_ETH_WALLET_ADDRESS,\n          tokenData: mockERC20TokenData0,\n          value: BigInt('0x0100'),\n          allowOverride: false,\n        },\n      ], // run 1 - token 1\n      [\n        {\n          toAddress: MOCK_ETH_WALLET_ADDRESS,\n          tokenData: mockERC20TokenData1,\n          value: BigInt('0x0200'),\n          allowOverride: false,\n        },\n      ], // run 1 - token 2\n      [\n        {\n          toAddress: MOCK_ETH_WALLET_ADDRESS,\n          tokenData: mockERC20TokenData0,\n          value: BigInt('0x0100'),\n          allowOverride: false,\n        },\n      ], // run 2 - token 1\n      [\n        {\n          toAddress: MOCK_ETH_WALLET_ADDRESS,\n          tokenData: mockERC20TokenData1,\n          value: BigInt('0x0200'),\n          allowOverride: false,\n        },\n      ], // run 2 - token 2\n    ]);\n    // Add 9000 for the dummy tx variance\n    expect(rsp.gasEstimate).to.equal(9000n + 200n);\n  }).timeout(30_000);\n\n  it('Should get gas estimates for valid Unshield To Origin', async () => {\n    stubGasEstimateSuccess();\n    spyOnSetUnshield();\n    const rsp = await gasEstimateForUnprovenUnshieldToOrigin(\n      MOCK_SHIELD_TXID_FOR_BALANCES, // originalShieldTxid\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      [\n        {\n          tokenAddress: MOCK_TOKEN_ADDRESS,\n          amount: MOCK_TOKEN_BALANCE,\n          recipientAddress: MOCK_ETH_WALLET_ADDRESS,\n        },\n      ],\n      [], // nftAmountRecipients\n    );\n    expect(rsp.broadcasterFeeCommitment).to.be.undefined;\n    expect(addUnshieldDataSpy.called).to.be.true;\n    expect(addUnshieldDataSpy.args).to.deep.equal([\n      [\n        {\n          toAddress: MOCK_ETH_WALLET_ADDRESS,\n          tokenData: mockERC20TokenData0,\n          value: MOCK_TOKEN_BALANCE,\n          allowOverride: false,\n        },\n      ],\n    ]);\n    // Add 9000 for the dummy tx variance\n    expect(rsp.gasEstimate).to.equal(9000n + 200n);\n  }).timeout(30_000);\n\n  it('Should error on gas estimates for invalid Unshield', async () => {\n    stubGasEstimateSuccess();\n    await expect(\n      gasEstimateForUnprovenUnshield(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        MOCK_DB_ENCRYPTION_KEY,\n        MOCK_TOKEN_AMOUNT_RECIPIENTS_INVALID,\n        [], // nftAmountRecipients\n        MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n        MOCK_FEE_TOKEN_DETAILS,\n        false, // sendWithPublicWallet\n      ),\n    ).rejectedWith('Invalid wallet address.');\n  });\n\n  it('Should error on unshield gas estimate for ethers rejections', async () => {\n    stubGasEstimateFailure();\n    await expect(\n      gasEstimateForUnprovenUnshield(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        MOCK_DB_ENCRYPTION_KEY,\n        MOCK_TOKEN_AMOUNT_RECIPIENTS,\n        [], // nftAmountRecipients\n        MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n        MOCK_FEE_TOKEN_DETAILS,\n        false, // sendWithPublicWallet\n      ),\n    ).rejectedWith('test rejection - gas estimate');\n  });\n\n  // UNSHIELD BASE TOKEN - GAS ESTIMATE\n\n  it('Should get gas estimates for valid Unshield base token', async () => {\n    stubGasEstimateSuccess();\n    spyOnSetUnshield();\n    const rsp = await gasEstimateForUnprovenUnshieldBaseToken(\n      txidVersion,\n      NetworkName.Polygon,\n      MOCK_ETH_WALLET_ADDRESS,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_TOKEN_AMOUNTS[0],\n      MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n      MOCK_FEE_TOKEN_DETAILS,\n      false, // sendWithPublicWallet\n    );\n    expect(rsp.broadcasterFeeCommitment).to.not.be.undefined;\n    expect(rsp.broadcasterFeeCommitment?.commitmentCiphertext).to.deep.equal(\n      isV2Test()\n        ? MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V2\n        : MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V3,\n    );\n    expect(addUnshieldDataSpy.called).to.be.true;\n    expect(addUnshieldDataSpy.args).to.deep.equal([\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData0,\n          value: BigInt('0x0100'),\n          allowOverride: false,\n        },\n      ],\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData0,\n          value: BigInt('0x0100'),\n          allowOverride: false,\n        },\n      ],\n    ]);\n    // Add 9000 for the dummy tx variance\n    expect(rsp.gasEstimate).to.equal(9000n + 200n);\n  }).timeout(30_000);\n\n  it('Should get gas estimates for valid Unshield base token: public wallet', async () => {\n    stubGasEstimateSuccess();\n    spyOnSetUnshield();\n    const rsp = await gasEstimateForUnprovenUnshieldBaseToken(\n      txidVersion,\n      NetworkName.Polygon,\n      MOCK_ETH_WALLET_ADDRESS,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_TOKEN_AMOUNTS[0],\n      MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n      MOCK_FEE_TOKEN_DETAILS,\n      true, // sendWithPublicWallet\n    );\n    expect(rsp.broadcasterFeeCommitment).to.be.undefined;\n    expect(addUnshieldDataSpy.called).to.be.true;\n    expect(addUnshieldDataSpy.args).to.deep.equal([\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData0,\n          value: BigInt('0x0100'),\n          allowOverride: false,\n        },\n      ],\n    ]);\n    // Add 9000 for the dummy tx variance\n    expect(rsp.gasEstimate).to.equal(9000n + 200n);\n  }).timeout(30_000);\n\n  it('Should error on gas estimates for invalid Unshield base token', async () => {\n    stubGasEstimateSuccess();\n    await expect(\n      gasEstimateForUnprovenUnshieldBaseToken(\n        txidVersion,\n        NetworkName.Polygon,\n        MOCK_RAILGUN_WALLET_ADDRESS,\n        railgunWallet.id,\n        MOCK_DB_ENCRYPTION_KEY,\n        MOCK_TOKEN_AMOUNTS[0],\n        MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n        MOCK_FEE_TOKEN_DETAILS,\n        false, // sendWithPublicWallet\n      ),\n    ).rejectedWith('Invalid wallet address.');\n  });\n\n  it('Should error on unshield base token gas estimate for ethers rejections', async () => {\n    stubGasEstimateFailure();\n    await expect(\n      gasEstimateForUnprovenUnshieldBaseToken(\n        txidVersion,\n        NetworkName.Polygon,\n        MOCK_ETH_WALLET_ADDRESS,\n        railgunWallet.id,\n        MOCK_DB_ENCRYPTION_KEY,\n        MOCK_TOKEN_AMOUNTS[0],\n        MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n        MOCK_FEE_TOKEN_DETAILS,\n        false, // sendWithPublicWallet\n      ),\n    ).rejectedWith('test rejection - gas estimate');\n  });\n\n  // UNSHIELD - PROVE AND SEND\n\n  it('Should populate tx for valid Unshield', async () => {\n    stubGasEstimateSuccess();\n    setCachedProvedTransaction(undefined);\n    spyOnSetUnshield();\n    await generateUnshieldProof(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_TOKEN_AMOUNT_RECIPIENTS,\n      MOCK_NFT_AMOUNT_RECIPIENTS_UNSHIELD,\n      broadcasterFeeERC20AmountRecipient,\n      false, // sendWithPublicWallet\n      overallBatchMinGasPrice,\n      () => {}, // progressCallback\n    );\n    expect(addUnshieldDataSpy.called).to.be.true;\n    expect(addUnshieldDataSpy.args).to.deep.equal([\n      [\n        {\n          toAddress: MOCK_ETH_WALLET_ADDRESS,\n          tokenData: mockERC20TokenData0,\n          value: BigInt('0x0100'),\n          allowOverride: false,\n        },\n      ], // run 1 - erc20 token 1\n      [\n        {\n          toAddress: MOCK_ETH_WALLET_ADDRESS,\n          tokenData: mockERC20TokenData1,\n          value: BigInt('0x0200'),\n          allowOverride: false,\n        },\n      ], // run 1 - erc20 token 2\n      [\n        {\n          toAddress: MOCK_ETH_WALLET_ADDRESS,\n          tokenData: mockNFTTokenData0,\n          value: BigInt(1),\n          allowOverride: false,\n        },\n      ], // run 1 - NFT token 1\n      [\n        {\n          toAddress: MOCK_ETH_WALLET_ADDRESS,\n          tokenData: mockNFTTokenData1,\n          value: BigInt(2),\n          allowOverride: false,\n        },\n      ], // run 1 - NFT token 2\n    ]);\n    const populateResponse = await populateProvedUnshield(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_TOKEN_AMOUNT_RECIPIENTS,\n      MOCK_NFT_AMOUNT_RECIPIENTS_UNSHIELD,\n      broadcasterFeeERC20AmountRecipient,\n      false, // sendWithPublicWallet\n      overallBatchMinGasPrice,\n      gasDetails,\n    );\n    expect(populateResponse.nullifiers).to.deep.equal([\n      '0x0000000000000000000000000000000000000000000000000000000000000001',\n      '0x0000000000000000000000000000000000000000000000000000000000000002',\n    ]);\n\n    const { transaction } = populateResponse;\n\n    expect(transaction.nonce).to.equal(undefined);\n    expect(transaction.gasPrice?.toString()).to.equal('4096');\n    expect(transaction.gasLimit).to.equal(1200n);\n    expect(transaction.value?.toString()).to.equal(undefined);\n    expect(transaction.data).to.equal('0x0123');\n    expect(transaction.to).to.equal(undefined);\n    expect(transaction.chainId).to.equal(undefined);\n    expect(transaction.type).to.equal(1);\n  });\n\n  it('Should populate tx for valid Unshield To Origin', async () => {\n    stubGasEstimateSuccess();\n    setCachedProvedTransaction(undefined);\n    spyOnSetUnshield();\n    await generateUnshieldToOriginProof(\n      MOCK_SHIELD_TXID_FOR_BALANCES, // originalShieldTxid\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      [\n        {\n          tokenAddress: MOCK_TOKEN_ADDRESS,\n          amount: MOCK_TOKEN_BALANCE,\n          recipientAddress: MOCK_ETH_WALLET_ADDRESS,\n        },\n      ],\n      [],\n      () => {}, // progressCallback\n    );\n    expect(addUnshieldDataSpy.called).to.be.true;\n    expect(addUnshieldDataSpy.args).to.deep.equal([\n      [\n        {\n          toAddress: MOCK_ETH_WALLET_ADDRESS,\n          tokenData: mockERC20TokenData0,\n          value: MOCK_TOKEN_BALANCE,\n          allowOverride: false,\n        },\n      ], // run 1 - erc20 token 1\n    ]);\n    const populateResponse = await populateProvedUnshieldToOrigin(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      [\n        {\n          tokenAddress: MOCK_TOKEN_ADDRESS,\n          amount: MOCK_TOKEN_BALANCE,\n          recipientAddress: MOCK_ETH_WALLET_ADDRESS,\n        },\n      ],\n      [],\n      gasDetailsType2,\n    );\n    expect(populateResponse.nullifiers).to.deep.equal([\n      '0x0000000000000000000000000000000000000000000000000000000000000001',\n      '0x0000000000000000000000000000000000000000000000000000000000000002',\n    ]);\n\n    const { transaction } = populateResponse;\n\n    expect(transaction.nonce).to.equal(undefined);\n    expect(transaction.gasLimit).to.equal(1200n);\n    expect(transaction.value?.toString()).to.equal(undefined);\n    expect(transaction.data).to.equal('0x0123');\n    expect(transaction.to).to.equal(undefined);\n    expect(transaction.chainId).to.equal(undefined);\n    expect(transaction.type).to.equal(2);\n  });\n\n  it('Should error on populate tx for invalid Unshield', async () => {\n    stubGasEstimateSuccess();\n    await expect(\n      populateProvedUnshield(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        MOCK_TOKEN_AMOUNT_RECIPIENTS_DIFFERENT,\n        MOCK_NFT_AMOUNT_RECIPIENTS_UNSHIELD,\n        broadcasterFeeERC20AmountRecipient,\n        false, // sendWithPublicWallet\n        overallBatchMinGasPrice,\n        gasDetails,\n      ),\n    ).rejectedWith('Invalid proof for this transaction');\n  });\n\n  it('Should error on populate unshield tx for unproved transaction', async () => {\n    stubGasEstimateSuccess();\n    setCachedProvedTransaction(undefined);\n    await expect(\n      populateProvedUnshield(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        MOCK_TOKEN_AMOUNT_RECIPIENTS,\n        [], // nftAmountRecipients\n        broadcasterFeeERC20AmountRecipient,\n        false, // sendWithPublicWallet\n        overallBatchMinGasPrice,\n        gasDetails,\n      ),\n    ).rejectedWith('Invalid proof for this transaction');\n  });\n\n  it('Should error on populate unshield tx when params changed (invalid cached proof)', async () => {\n    stubGasEstimateSuccess();\n    await generateUnshieldProof(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_TOKEN_AMOUNT_RECIPIENTS,\n      [], // nftAmountRecipients\n      broadcasterFeeERC20AmountRecipient,\n      false, // sendWithPublicWallet\n      overallBatchMinGasPrice,\n      () => {}, // progressCallback\n    );\n    await expect(\n      populateProvedUnshield(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        MOCK_TOKEN_AMOUNT_RECIPIENTS_DIFFERENT,\n        [], // nftAmountRecipients\n        broadcasterFeeERC20AmountRecipient,\n        false, // sendWithPublicWallet\n        overallBatchMinGasPrice,\n        gasDetails,\n      ),\n    ).rejectedWith('Invalid proof for this transaction');\n  });\n\n  // UNSHIELD BASE TOKEN - PROVE AND SEND\n\n  it('Should populate tx for valid Unshield Base Token', async () => {\n    stubGasEstimateSuccess();\n    setCachedProvedTransaction(undefined);\n    spyOnSetUnshield();\n    await generateUnshieldBaseTokenProof(\n      txidVersion,\n      NetworkName.Polygon,\n      MOCK_ETH_WALLET_ADDRESS,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_TOKEN_AMOUNTS[0],\n      broadcasterFeeERC20AmountRecipient,\n      false, // sendWithPublicWallet\n      overallBatchMinGasPrice,\n      () => {}, // progressCallback\n    );\n    expect(addUnshieldDataSpy.called).to.be.true;\n    expect(addUnshieldDataSpy.args).to.deep.equal([\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData0,\n          value: BigInt('0x0100'),\n          allowOverride: false,\n        },\n      ], // Dummy prove.\n      [\n        {\n          toAddress: polygonRelayAdaptContract,\n          tokenData: mockERC20TokenData0,\n          value: BigInt('0x0100'),\n          allowOverride: false,\n        },\n      ], // Actual prove\n    ]);\n    const populateResponse = await populateProvedUnshieldBaseToken(\n      txidVersion,\n      NetworkName.Polygon,\n      MOCK_ETH_WALLET_ADDRESS,\n      railgunWallet.id,\n      MOCK_TOKEN_AMOUNTS[0],\n      broadcasterFeeERC20AmountRecipient,\n      false, // sendWithPublicWallet\n      overallBatchMinGasPrice,\n      gasDetails,\n    );\n\n    const { transaction } = populateResponse;\n\n    expect(transaction.nonce).to.equal(undefined);\n    expect(transaction.gasPrice?.toString()).to.equal('4096');\n    expect(transaction.gasLimit).to.equal(1200n);\n    expect(transaction.value?.toString()).to.equal(undefined);\n    expect(transaction.data).to.equal('0x0123');\n    expect(transaction.to).to.equal(undefined);\n    expect(transaction.chainId).to.equal(undefined);\n    expect(transaction.type).to.equal(1);\n  }).timeout(60_000);\n\n  it('Should error on populate tx for invalid Unshield Base Token', async () => {\n    stubGasEstimateSuccess();\n    await expect(\n      populateProvedUnshieldBaseToken(\n        txidVersion,\n        NetworkName.Polygon,\n        MOCK_ETH_WALLET_ADDRESS,\n        railgunWallet.id,\n        MOCK_TOKEN_AMOUNTS_DIFFERENT[1],\n        broadcasterFeeERC20AmountRecipient,\n        false, // sendWithPublicWallet\n        overallBatchMinGasPrice,\n        gasDetails,\n      ),\n    ).rejectedWith('Invalid proof for this transaction');\n  });\n\n  it('Should error on populate Unshield Base Token tx for unproved transaction', async () => {\n    stubGasEstimateSuccess();\n    setCachedProvedTransaction(undefined);\n    await expect(\n      populateProvedUnshieldBaseToken(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        MOCK_ETH_WALLET_ADDRESS,\n        MOCK_TOKEN_AMOUNTS[0],\n        broadcasterFeeERC20AmountRecipient,\n        false, // sendWithPublicWallet\n        overallBatchMinGasPrice,\n        gasDetails,\n      ),\n    ).rejectedWith('Invalid proof for this transaction');\n  });\n\n  it('Should error on populate Unshield Base Token tx when params changed (invalid cached proof)', async () => {\n    stubGasEstimateSuccess();\n    await generateUnshieldBaseTokenProof(\n      txidVersion,\n      NetworkName.Polygon,\n      MOCK_ETH_WALLET_ADDRESS,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_TOKEN_AMOUNTS[1],\n      broadcasterFeeERC20AmountRecipient,\n      false, // sendWithPublicWallet\n      overallBatchMinGasPrice,\n      () => {}, // progressCallback\n    );\n    await expect(\n      populateProvedUnshieldBaseToken(\n        txidVersion,\n        NetworkName.Polygon,\n        MOCK_ETH_WALLET_ADDRESS,\n        railgunWallet.id,\n        MOCK_TOKEN_AMOUNTS_DIFFERENT[1],\n        broadcasterFeeERC20AmountRecipient,\n        false, // sendWithPublicWallet\n        overallBatchMinGasPrice,\n        gasDetails,\n      ),\n    ).rejectedWith('Invalid proof for this transaction');\n  });\n});\n"]}