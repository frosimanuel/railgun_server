{"version":3,"file":"tx-shield-base-token.test.js","sourceRoot":"","sources":["../../../../src/services/transactions/__tests__/tx-shield-base-token.test.ts"],"names":[],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport Sinon, { SinonStub } from 'sinon';\nimport {\n  NetworkName,\n  EVMGasType,\n  TransactionGasDetails,\n} from '@railgun-community/shared-models';\nimport {\n  closeTestEngine,\n  initTestEngine,\n  initTestEngineNetworks,\n} from '../../../tests/setup.test';\nimport {\n  MOCK_DB_ENCRYPTION_KEY,\n  MOCK_ETH_WALLET_ADDRESS,\n  MOCK_MNEMONIC,\n  MOCK_TOKEN_AMOUNTS,\n} from '../../../tests/mocks.test';\nimport {\n  populateShieldBaseToken,\n  gasEstimateForShieldBaseToken,\n} from '../tx-shield-base-token';\nimport * as txGasDetailsModule from '../tx-gas-details';\nimport { createRailgunWallet } from '../../railgun/wallets/wallets';\nimport { ByteUtils } from '@railgun-community/engine';\nimport { getTestTXIDVersion } from '../../../tests/helper.test';\n\nlet getGasEstimateStub: SinonStub;\nlet gasEstimateStub: SinonStub;\nlet sendTxStub: SinonStub;\nlet railgunAddress: string;\n\nconst txidVersion = getTestTXIDVersion();\n\nconst shieldPrivateKey = ByteUtils.randomHex(32);\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\nconst gasDetails: TransactionGasDetails = {\n  evmGasType: EVMGasType.Type2,\n  gasEstimate: 1000n,\n  maxFeePerGas: BigInt('0x1000'),\n  maxPriorityFeePerGas: BigInt('0x100'),\n};\n\nconst stubGetGasEstimate = () => {\n  getGasEstimateStub = Sinon.stub(\n    txGasDetailsModule,\n    'getGasEstimate',\n  ).resolves(200n);\n};\n\nconst stubGetGasEstimateFailure = () => {\n  getGasEstimateStub = Sinon.stub(txGasDetailsModule, 'getGasEstimate').rejects(\n    new Error('test rejection - gas estimate'),\n  );\n};\n\ndescribe('tx-shield-base-token', () => {\n  before(async function run() {\n    this.timeout(60_000);\n    await initTestEngine();\n    await initTestEngineNetworks();\n    const railgunWalletInfo = await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC,\n      undefined, // creationBlockNumbers\n    );\n\n    railgunAddress = railgunWalletInfo.railgunAddress;\n  });\n  afterEach(() => {\n    gasEstimateStub?.restore();\n    sendTxStub?.restore();\n    getGasEstimateStub?.restore();\n  });\n  after(async () => {\n    await closeTestEngine();\n  });\n\n  it('Should get gas estimate for valid shield base token', async () => {\n    stubGetGasEstimate();\n    const rsp = await gasEstimateForShieldBaseToken(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunAddress,\n      shieldPrivateKey,\n      MOCK_TOKEN_AMOUNTS[0],\n      MOCK_ETH_WALLET_ADDRESS,\n    );\n    expect(rsp.gasEstimate).to.equal(200n);\n  });\n\n  it('Should error on gas estimates for invalid shield base token', async () => {\n    stubGetGasEstimate();\n    await expect(\n      gasEstimateForShieldBaseToken(\n        txidVersion,\n        NetworkName.Polygon,\n        '123456789',\n        shieldPrivateKey,\n        MOCK_TOKEN_AMOUNTS[0],\n        MOCK_ETH_WALLET_ADDRESS,\n      ),\n    ).rejectedWith('Invalid RAILGUN address.');\n  });\n\n  it('Should error for ethers rejections', async () => {\n    stubGetGasEstimateFailure();\n    await expect(\n      gasEstimateForShieldBaseToken(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunAddress,\n        shieldPrivateKey,\n        MOCK_TOKEN_AMOUNTS[0],\n        MOCK_ETH_WALLET_ADDRESS,\n      ),\n    ).rejectedWith('test rejection - gas estimate');\n  });\n\n  it('Should send tx for valid shield base token', async () => {\n    stubGetGasEstimate();\n    const { transaction } = await populateShieldBaseToken(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunAddress,\n      shieldPrivateKey,\n      MOCK_TOKEN_AMOUNTS[0],\n      gasDetails,\n    );\n    expect(transaction).to.be.an('object');\n    expect(transaction.data).to.be.a('string');\n    expect(transaction.to).to.be.a('string');\n  });\n\n  it('Should error on send tx for invalid shield base token', async () => {\n    stubGetGasEstimate();\n    await expect(\n      populateShieldBaseToken(\n        txidVersion,\n        NetworkName.Polygon,\n        '123456789',\n        shieldPrivateKey,\n        MOCK_TOKEN_AMOUNTS[0],\n        gasDetails,\n      ),\n    ).rejectedWith('Invalid RAILGUN address.');\n  });\n});\n"]}