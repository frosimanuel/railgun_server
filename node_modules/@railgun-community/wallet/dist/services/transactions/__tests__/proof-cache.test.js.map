{"version":3,"file":"proof-cache.test.js","sourceRoot":"","sources":["../../../../src/services/transactions/__tests__/proof-cache.test.ts"],"names":[],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport {\n  ProofType,\n  RailgunNFTAmountRecipient,\n  RailgunERC20Amount,\n  RailgunERC20AmountRecipient,\n  NetworkName,\n  RailgunNFTAmount,\n  RailgunERC20Recipient,\n} from '@railgun-community/shared-models';\nimport {\n  MOCK_NFT_AMOUNTS,\n  MOCK_NFT_AMOUNT_RECIPIENTS,\n  MOCK_RAILGUN_WALLET_ADDRESS,\n  MOCK_TOKEN_AMOUNTS,\n  MOCK_TOKEN_FEE,\n} from '../../../tests/mocks.test';\nimport {\n  setCachedProvedTransaction,\n  validateCachedProvedTransaction,\n} from '../proof-cache';\nimport { ContractTransaction } from 'ethers';\nimport { getTestTXIDVersion } from '../../../tests/helper.test';\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\nconst networkName = NetworkName.BNBChain;\nconst txidVersion = getTestTXIDVersion();\nconst railgunWalletID = '123';\nconst showSenderAddressToRecipient = true;\nconst memoText = 'Some memo';\nconst recipientAddress = '0x12345';\nconst erc20AmountRecipients: RailgunERC20AmountRecipient[] =\n  MOCK_TOKEN_AMOUNTS.map(erc20Amount => ({\n    ...erc20Amount,\n    recipientAddress,\n  }));\nconst nftAmountRecipients: RailgunNFTAmountRecipient[] =\n  MOCK_NFT_AMOUNT_RECIPIENTS;\nconst broadcasterFeeERC20AmountRecipient: RailgunERC20AmountRecipient = {\n  ...MOCK_TOKEN_FEE,\n  recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n};\nconst crossContractCalls: ContractTransaction[] = [\n  { to: '0x4567', data: '0x' },\n];\nconst relayAdaptShieldERC20Recipients: RailgunERC20Recipient[] = [\n  { tokenAddress: '0x123', recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS },\n];\nconst relayAdaptUnshieldERC20Amounts: RailgunERC20Amount[] = [MOCK_TOKEN_FEE];\nconst relayAdaptUnshieldNFTAmounts: RailgunNFTAmount[] = MOCK_NFT_AMOUNTS;\nconst relayAdaptShieldNFTRecipients: RailgunNFTAmountRecipient[] =\n  MOCK_NFT_AMOUNT_RECIPIENTS;\n\nconst nullifiers = ['0x1234'];\n\nconst sendWithPublicWallet = false;\nconst overallBatchMinGasPrice = BigInt('0x1000');\n\nconst preTransactionPOIsPerTxidLeafPerList = {};\n\nconst setCached = (proofType: ProofType) => {\n  setCachedProvedTransaction({\n    proofType,\n    txidVersion,\n    transaction: {} as ContractTransaction,\n    showSenderAddressToRecipient,\n    memoText,\n    railgunWalletID,\n    erc20AmountRecipients,\n    nftAmountRecipients,\n    relayAdaptUnshieldERC20Amounts,\n    relayAdaptUnshieldNFTAmounts,\n    relayAdaptShieldERC20Recipients,\n    relayAdaptShieldNFTRecipients,\n    crossContractCalls,\n    broadcasterFeeERC20AmountRecipient,\n    sendWithPublicWallet: false,\n    preTransactionPOIsPerTxidLeafPerList,\n    overallBatchMinGasPrice,\n    nullifiers,\n  });\n};\n\ndescribe('proof-cache', () => {\n  it('Should validate cached transaction correctly', () => {\n    setCachedProvedTransaction(undefined);\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.CrossContractCalls,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('No proof found.');\n\n    setCached(ProofType.CrossContractCalls);\n\n    // Same same\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.CrossContractCalls,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.not.throw();\n\n    expect(() =>\n      validateCachedProvedTransaction(\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        'something else' as any,\n        networkName,\n        ProofType.CrossContractCalls,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: txidVersion.');\n\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.Unshield,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: proofType.');\n\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.Transfer,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: proofType.');\n\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.CrossContractCalls,\n        '987',\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: railgunWalletID.');\n\n    // Set new for Transfer proof type\n    setCached(ProofType.Transfer);\n\n    // Requires ProofType.Transfer\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.Transfer,\n        railgunWalletID,\n        false, // showSenderAddressToRecipient\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: showSenderAddressToRecipient.');\n\n    // Requires ProofType.Transfer\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.Transfer,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        'different memo',\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: memoText.');\n\n    // Requires ProofType.Transfer\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.Transfer,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        [\n          {\n            tokenAddress: '0x765',\n            amount: 100n,\n            recipientAddress: '0x123',\n          },\n        ],\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: erc20AmountRecipients.');\n\n    setCached(ProofType.CrossContractCalls);\n\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.CrossContractCalls,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        [MOCK_NFT_AMOUNT_RECIPIENTS[0]],\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: nftAmountRecipients.');\n\n    // Note: requires ProofType.CrossContractCalls\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.CrossContractCalls,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        [\n          {\n            tokenAddress: '0x765',\n            amount: 100n,\n          },\n        ],\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: relayAdaptUnshieldERC20Amounts.');\n\n    // Note: requires ProofType.CrossContractCalls\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.CrossContractCalls,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        [MOCK_NFT_AMOUNTS[0]],\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: relayAdaptUnshieldNFTAmounts.');\n\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        // proofType (ProofType.Transfer) will not validate relayAdaptUnshieldERC20Amounts.. requires ProofType.CrossContractCalls\n        ProofType.CrossContractCalls,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        [\n          {\n            tokenAddress: 'test',\n            recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n          },\n        ],\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: relayAdaptShieldERC20Recipients.');\n\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        // proofType (ProofType.Transfer) will not validate relayAdaptUnshieldERC20Amounts.. requires ProofType.CrossContractCalls\n        ProofType.CrossContractCalls,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        [],\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: relayAdaptShieldERC20Recipients.');\n\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        // proofType (ProofType.Transfer) will not validate relayAdaptUnshieldERC20Amounts.. requires ProofType.CrossContractCalls\n        ProofType.CrossContractCalls,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        [MOCK_NFT_AMOUNTS[0]],\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: relayAdaptShieldNFTRecipients.');\n\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        // proofType (ProofType.Transfer) will not validate relayAdaptUnshieldERC20Amounts.. requires ProofType.CrossContractCalls\n        ProofType.CrossContractCalls,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        [{ to: 'test', data: '0x' }],\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: crossContractCalls.');\n\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.CrossContractCalls,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        {\n          tokenAddress: '0x765',\n          amount: 100n,\n          recipientAddress: '0x1233',\n        },\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: broadcasterFeeERC20AmountRecipient.');\n\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.CrossContractCalls,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        true, // sendWithPublicWallet\n        overallBatchMinGasPrice,\n      ),\n    ).to.throw('Mismatch: sendWithPublicWallet.');\n\n    expect(() =>\n      validateCachedProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.CrossContractCalls,\n        railgunWalletID,\n        showSenderAddressToRecipient,\n        memoText,\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        relayAdaptUnshieldNFTAmounts,\n        relayAdaptShieldERC20Recipients,\n        relayAdaptShieldNFTRecipients,\n        crossContractCalls,\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        BigInt('0x2000'),\n      ),\n    ).to.throw('Mismatch: overallBatchMinGasPrice.');\n  });\n});\n"]}