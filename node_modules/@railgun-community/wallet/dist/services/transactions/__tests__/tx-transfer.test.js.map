{"version":3,"file":"tx-transfer.test.js","sourceRoot":"","sources":["../../../../src/services/transactions/__tests__/tx-transfer.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAwB;AACxB,wEAA8C;AAC9C,kDAAmD;AACnD,sDAOmC;AACnC,oEAQ0C;AAC1C,0DAImC;AACnC,0DAmBmC;AACnC,gDAGwB;AACxB,sEAAwD;AACxD,4DAA6D;AAC7D,2DAGuC;AACvC,gDAA4D;AAC5D,qDAAuC;AAEvC,4DAA0E;AAE1E,IAAI,eAA0B,CAAC;AAC/B,IAAI,aAAwB,CAAC;AAC7B,IAAI,kBAA6B,CAAC;AAClC,IAAI,gBAA2B,CAAC;AAChC,IAAI,mCAA8C,CAAC;AACnD,IAAI,cAAwB,CAAC;AAC7B,IAAI,YAAsB,CAAC;AAC3B,IAAI,UAAoB,CAAC;AAEzB,IAAI,aAA4B,CAAC;AACjC,IAAI,kCAA+D,CAAC;AAEpE,cAAI,CAAC,GAAG,CAAC,0BAAc,CAAC,CAAC;AACzB,MAAM,EAAE,MAAM,EAAE,GAAG,cAAI,CAAC;AAExB,MAAM,WAAW,GAAG,IAAA,gCAAkB,GAAE,CAAC;AAEzC,MAAM,4BAA4B,GAAyB;IACzD;QACE,YAAY,EAAE,+BAAkB;QAChC,MAAM,EAAE,IAAI;KACb;IACD;QACE,YAAY,EAAE,iCAAoB;QAClC,MAAM,EAAE,IAAI;KACb;CACF,CAAC;AAEF,MAAM,uBAAuB,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;AAEjD,MAAM,UAAU,GAA0B;IACxC,UAAU,EAAE,0BAAU,CAAC,KAAK;IAC5B,WAAW,EAAE,KAAK;IAClB,QAAQ,EAAE,uBAAuB;CAClC,CAAC;AAEF,MAAM,oCAAoC,GACxC,+BAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACrC,GAAG,WAAW;IACd,gBAAgB,EAAE,oCAAuB;CAC1C,CAAC,CAAC,CAAC;AAEN,MAAM,kCAAkC,GACtC,uCAA0B,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;IACpD,GAAG,kBAAkB;IACrB,gBAAgB,EAAE,oCAAuB;CAC1C,CAAC,CAAC,CAAC;AAEN,MAAM,4BAA4B,GAChC,+BAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACrC,GAAG,WAAW;IACd,gBAAgB,EAAE,wCAA2B;CAC9C,CAAC,CAAC,CAAC;AAEN,MAAM,sCAAsC,GAC1C,4BAA4B,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IAC/C,GAAG,WAAW;IACd,gBAAgB,EAAE,oCAAuB;CAC1C,CAAC,CAAC,CAAC;AAEN,MAAM,sBAAsB,GAAG,GAAG,EAAE;IAClC,eAAe,GAAG,eAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC,QAAQ,CACzE,MAAM,CAAC,KAAK,CAAC,CACd,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,sBAAsB,GAAG,GAAG,EAAE;IAClC,eAAe,GAAG,eAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC,OAAO,CACxE,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAC3C,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG,GAAG,EAAE;IAC1B,YAAY,GAAG,eAAK,CAAC,GAAG,CAAC,OAAO,EAAE,mCAAmC,CAAC,CAAC;AACzE,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,GAAG,EAAE;IACxB,UAAU,GAAG,eAAK,CAAC,GAAG,CAAC,OAAO,EAAE,+BAA+B,CAAC,CAAC;AACnE,CAAC,CAAC;AAEF,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,MAAM,CAAC,KAAK,UAAU,GAAG;QACvB,IAAI,CAAC,OAAO,CAAC,KAAM,CAAC,CAAC;QACrB,MAAM,IAAA,2BAAc,GAAE,CAAC;QACvB,MAAM,IAAA,mCAAsB,GAAE,CAAC;QAC/B,MAAM,iBAAiB,GAAG,MAAM,IAAA,6BAAmB,EACjD,mCAAsB,EACtB,0BAAa,EACb,SAAS,CACV,CAAC;QACF,IAAI,CAAC,IAAA,yBAAS,EAAC,iBAAiB,CAAC,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SAC/C;QACD,aAAa,GAAG,IAAA,yBAAe,EAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;QAEtD,MAAM,qBAAqB,GAAG,MAAM,IAAA,6BAAmB,EACrD,mCAAsB,EACtB,0BAAa,EACb,SAAS,CACV,CAAC;QACF,IAAI,CAAC,IAAA,yBAAS,EAAC,qBAAqB,CAAC,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;SACnD;QAED,MAAM,yBAAyB,GAAG,qBAAqB,CAAC,cAAc,CAAC;QAEvE,kCAAkC,GAAG;YACnC,GAAG,2BAAc;YACjB,gBAAgB,EAAE,yBAAyB;SAC5C,CAAC;QAEF,aAAa,GAAG,eAAK,CAAC,IAAI,CACxB,yBAAgB,CAAC,SAAS,EAC1B,sBAAsB,CACvB,CAAC,QAAQ,CAAC;YACT,kBAAkB,EAAE;gBAClB;oBACE,UAAU,EAAE,4BAAe;iBAC5B;aAC+C;YAClD,oCAAoC,EAAE,EAAE;SACzC,CAAC,CAAC;QACH,kBAAkB,GAAG,eAAK,CAAC,IAAI,CAC7B,yBAAgB,CAAC,SAAS,EAC1B,2BAA2B,CAC5B,CAAC,QAAQ,CAAC;YACT;gBACE,WAAW;gBACX,WAAW,EAAE,6BAAgB;gBAC7B,WAAW,EAAE,IAAA,sBAAQ,GAAE,CAAC,CAAC,CAAC,iCAAoB,CAAC,CAAC,CAAC,iCAAoB;gBACrE,UAAU,EAAE,4BAAe;aAC5B;SAC+C,CAAC,CAAC;QACpD,gBAAgB,GAAG,eAAK,CAAC,IAAI,CAC3B,uCAA8B,EAC9B,kBAAkB,CACnB,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAyB,CAAC,CAAC;QACtD,mCAAmC,GAAG,eAAK,CAAC,IAAI,CAC9C,0CAAiC,EACjC,2BAA2B,CAC5B,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAyB,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IACH,SAAS,CAAC,GAAG,EAAE;QACb,eAAe,EAAE,OAAO,EAAE,CAAC;QAC3B,cAAc,EAAE,OAAO,EAAE,CAAC;QAC1B,YAAY,EAAE,OAAO,EAAE,CAAC;QACxB,UAAU,EAAE,OAAO,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IACH,KAAK,CAAC,KAAK,IAAI,EAAE;QACf,aAAa,CAAC,OAAO,EAAE,CAAC;QACxB,kBAAkB,CAAC,OAAO,EAAE,CAAC;QAC7B,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAC3B,mCAAmC,CAAC,OAAO,EAAE,CAAC;QAC9C,MAAM,IAAA,4BAAe,GAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,gCAAgC;IAEhC,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;QACjE,sBAAsB,EAAE,CAAC;QACzB,cAAc,EAAE,CAAC;QACjB,MAAM,GAAG,GAAG,MAAM,IAAA,4CAA8B,EAC9C,WAAW,EACX,2BAAW,CAAC,OAAO,EACnB,aAAa,CAAC,EAAE,EAChB,mCAAsB,EACtB,sBAAS,EACT,4BAA4B,EAC5B,EAAE,EAAE,sBAAsB;QAC1B,2DAA8C,EAC9C,mCAAsB,EACtB,KAAK,CACN,CAAC;QACF,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QACvC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,+DAA+D;QAC7G,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,2BAA2B;QAC5F,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS;QAC3E,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS;QAC3E,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAC7C,MAAM,CAAC,oBAAoB,CAAC,CAC7B,CAAC,CAAC,gCAAgC;QACnC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS;QAC3E,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS;QAC3E,MAAM,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,SAAS,CAAC;QACzD,MAAM,CAAC,GAAG,CAAC,wBAAwB,EAAE,oBAAoB,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CACtE,IAAA,sBAAQ,GAAE;YACR,CAAC,CAAC,oEAAuD;YACzD,CAAC,CAAC,oEAAuD,CAC5D,CAAC;QACF,qCAAqC;QACrC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC,OAAO,CAAC,KAAM,CAAC,CAAC;IAEnB,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;QAChF,sBAAsB,EAAE,CAAC;QACzB,cAAc,EAAE,CAAC;QACjB,MAAM,GAAG,GAAG,MAAM,IAAA,4CAA8B,EAC9C,WAAW,EACX,2BAAW,CAAC,OAAO,EACnB,aAAa,CAAC,EAAE,EAChB,mCAAsB,EACtB,sBAAS,EACT,4BAA4B,EAC5B,EAAE,EAAE,sBAAsB;QAC1B,2DAA8C,EAC9C,mCAAsB,EACtB,IAAI,CACL,CAAC;QACF,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QACvC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,6CAA6C;QAC3F,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS;QAC3E,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS;QAC3E,MAAM,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC;QACrD,qCAAqC;QACrC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC,OAAO,CAAC,KAAM,CAAC,CAAC;IAEnB,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,sBAAsB,EAAE,CAAC;QACzB,MAAM,MAAM,CACV,IAAA,4CAA8B,EAC5B,WAAW,EACX,2BAAW,CAAC,OAAO,EACnB,aAAa,CAAC,EAAE,EAChB,mCAAsB,EACtB,sBAAS,EACT,oCAAoC,EACpC,EAAE,EAAE,sBAAsB;QAC1B,2DAA8C,EAC9C,mCAAsB,EACtB,KAAK,CACN,CACF,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;QAC3E,sBAAsB,EAAE,CAAC;QACzB,MAAM,MAAM,CACV,IAAA,4CAA8B,EAC5B,WAAW,EACX,2BAAW,CAAC,OAAO,EACnB,aAAa,CAAC,EAAE,EAChB,mCAAsB,EACtB,sBAAS,EACT,4BAA4B,EAC5B,EAAE,EAAE,sBAAsB;QAC1B,2DAA8C,EAC9C,mCAAsB,EACtB,KAAK,CACN,CACF,CAAC,YAAY,CAAC,+BAA+B,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,8BAA8B;IAE9B,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,sBAAsB,EAAE,CAAC;QACzB,YAAY,EAAE,CAAC;QACf,MAAM,GAAG,GAAG,MAAM,IAAA,4CAA8B,EAC9C,WAAW,EACX,2BAAW,CAAC,OAAO,EACnB,aAAa,CAAC,EAAE,EAChB,mCAAsB,EACtB,sBAAS,EACT,EAAE,EAAE,wBAAwB;QAC5B,uCAA0B,EAAE,sBAAsB;QAClD,2DAA8C,EAC9C,mCAAsB,EACtB,KAAK,CACN,CAAC;QACF,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QACrC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,+DAA+D;QAC3G,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;QAClE,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;QAClE,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;QAClE,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;QAClE,MAAM,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,SAAS,CAAC;QACzD,MAAM,CAAC,GAAG,CAAC,wBAAwB,EAAE,oBAAoB,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CACtE,IAAA,sBAAQ,GAAE;YACR,CAAC,CAAC,oEAAuD;YACzD,CAAC,CAAC,oEAAuD,CAC5D,CAAC;QACF,qCAAqC;QACrC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC,OAAO,CAAC,KAAM,CAAC,CAAC;IAEnB,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAC9E,sBAAsB,EAAE,CAAC;QACzB,YAAY,EAAE,CAAC;QACf,MAAM,GAAG,GAAG,MAAM,IAAA,4CAA8B,EAC9C,WAAW,EACX,2BAAW,CAAC,OAAO,EACnB,aAAa,CAAC,EAAE,EAChB,mCAAsB,EACtB,sBAAS,EACT,EAAE,EAAE,wBAAwB;QAC5B,uCAA0B,EAC1B,2DAA8C,EAC9C,mCAAsB,EACtB,IAAI,CACL,CAAC;QACF,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QACrC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,6CAA6C;QACzF,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;QAClE,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;QAClE,MAAM,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC;QACrD,qCAAqC;QACrC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC,OAAO,CAAC,KAAM,CAAC,CAAC;IAEnB,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,sBAAsB,EAAE,CAAC;QACzB,MAAM,MAAM,CACV,IAAA,4CAA8B,EAC5B,WAAW,EACX,2BAAW,CAAC,OAAO,EACnB,aAAa,CAAC,EAAE,EAChB,mCAAsB,EACtB,sBAAS,EACT,EAAE,EAAE,wBAAwB;QAC5B,kCAAkC,EAClC,2DAA8C,EAC9C,mCAAsB,EACtB,KAAK,CACN,CACF,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,kCAAkC;IAElC,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACrD,sBAAsB,EAAE,CAAC;QACzB,IAAA,wCAA0B,EAAC,SAAS,CAAC,CAAC;QACtC,cAAc,EAAE,CAAC;QACjB,YAAY,EAAE,CAAC;QACf,MAAM,IAAA,yCAAqB,EACzB,WAAW,EACX,2BAAW,CAAC,OAAO,EACnB,aAAa,CAAC,EAAE,EAChB,mCAAsB,EACtB,IAAI,EAAE,+BAA+B;QACrC,sBAAS,EACT,4BAA4B,EAC5B,uCAA0B,EAC1B,kCAAkC,EAClC,KAAK,EAAE,uBAAuB;QAC9B,uBAAuB,EACvB,GAAG,EAAE,GAAE,CAAC,CACT,CAAC;QACF,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QACvC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,2BAAc,CAAC,MAAM,CAAC,CAAC;QACvE,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QACrC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAC/C,uCAA0B,CAAC,CAAC,CAAC,CAAC,UAAU,CACzC,CAAC;QACF,MAAM,gBAAgB,GAAG,MAAM,IAAA,oCAAsB,EACnD,WAAW,EACX,2BAAW,CAAC,OAAO,EACnB,aAAa,CAAC,EAAE,EAChB,IAAI,EAAE,+BAA+B;QACrC,sBAAS,EACT,4BAA4B,EAC5B,uCAA0B,EAC1B,kCAAkC,EAClC,KAAK,EAAE,uBAAuB;QAC9B,uBAAuB,EACvB,UAAU,CACX,CAAC;QACF,MAAM,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YAChD,oEAAoE;YACpE,oEAAoE;SACrE,CAAC,CAAC;QAEH,MAAM,EAAE,WAAW,EAAE,GAAG,gBAAgB,CAAC;QAEzC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC7C,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC3C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAChD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;QAC7E,sBAAsB,EAAE,CAAC;QACzB,IAAA,wCAA0B,EAAC,SAAS,CAAC,CAAC;QACtC,MAAM,MAAM,CACV,IAAA,oCAAsB,EACpB,WAAW,EACX,2BAAW,CAAC,OAAO,EACnB,aAAa,CAAC,EAAE,EAChB,KAAK,EAAE,+BAA+B;QACtC,sBAAS,EACT,4BAA4B,EAC5B,uCAA0B,EAC1B,kCAAkC,EAClC,KAAK,EAAE,uBAAuB;QAC9B,uBAAuB,EACvB,UAAU,CACX,CACF,CAAC,YAAY,CAAC,oCAAoC,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iFAAiF,EAAE,KAAK,IAAI,EAAE;QAC/F,sBAAsB,EAAE,CAAC;QACzB,MAAM,IAAA,yCAAqB,EACzB,WAAW,EACX,2BAAW,CAAC,OAAO,EACnB,aAAa,CAAC,EAAE,EAChB,mCAAsB,EACtB,IAAI,EAAE,+BAA+B;QACrC,sBAAS,EACT,4BAA4B,EAC5B,uCAA0B,EAC1B,kCAAkC,EAClC,KAAK,EAAE,uBAAuB;QAC9B,uBAAuB,EACvB,GAAG,EAAE,GAAE,CAAC,CACT,CAAC;QACF,MAAM,MAAM,CACV,IAAA,oCAAsB,EACpB,WAAW,EACX,2BAAW,CAAC,OAAO,EACnB,aAAa,CAAC,EAAE,EAChB,IAAI,EAAE,+BAA+B;QACrC,sBAAS,EACT,sCAAsC,EACtC,uCAA0B,EAC1B,kCAAkC,EAClC,KAAK,EAAE,uBAAuB;QAC9B,uBAAuB,EACvB,UAAU,CACX,CACF,CAAC,YAAY,CAAC,oCAAoC,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport Sinon, { SinonStub, SinonSpy } from 'sinon';\nimport {\n  RailgunWallet,\n  TransactionBatch,\n  RelayAdaptVersionedSmartContracts,\n  TransactionStructV2,\n  TransactionStructV3,\n  RailgunVersionedSmartContracts,\n} from '@railgun-community/engine';\nimport {\n  RailgunERC20Amount,\n  NetworkName,\n  EVMGasType,\n  RailgunERC20AmountRecipient,\n  RailgunNFTAmountRecipient,\n  TransactionGasDetails,\n  isDefined,\n} from '@railgun-community/shared-models';\nimport {\n  closeTestEngine,\n  initTestEngine,\n  initTestEngineNetworks,\n} from '../../../tests/setup.test';\nimport {\n  MOCK_BOUND_PARAMS_V2,\n  MOCK_BOUND_PARAMS_V3,\n  MOCK_COMMITMENTS,\n  MOCK_DB_ENCRYPTION_KEY,\n  MOCK_ETH_WALLET_ADDRESS,\n  MOCK_FEE_TOKEN_DETAILS,\n  MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V2,\n  MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V3,\n  MOCK_MEMO,\n  MOCK_MNEMONIC,\n  MOCK_NFT_AMOUNT_RECIPIENTS,\n  MOCK_NULLIFIERS,\n  MOCK_RAILGUN_WALLET_ADDRESS,\n  MOCK_TOKEN_ADDRESS,\n  MOCK_TOKEN_ADDRESS_2,\n  MOCK_TOKEN_AMOUNTS,\n  MOCK_TOKEN_FEE,\n  MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n} from '../../../tests/mocks.test';\nimport {\n  populateProvedTransfer,\n  gasEstimateForUnprovenTransfer,\n} from '../tx-transfer';\nimport * as txGasDetailsModule from '../tx-gas-details';\nimport { generateTransferProof } from '../tx-proof-transfer';\nimport {\n  createRailgunWallet,\n  fullWalletForID,\n} from '../../railgun/wallets/wallets';\nimport { setCachedProvedTransaction } from '../proof-cache';\nimport * as txNotes from '../tx-notes';\nimport { ContractTransaction, FallbackProvider } from 'ethers';\nimport { getTestTXIDVersion, isV2Test } from '../../../tests/helper.test';\n\nlet gasEstimateStub: SinonStub;\nlet railProveStub: SinonStub;\nlet railDummyProveStub: SinonStub;\nlet railTransactStub: SinonStub;\nlet relayAdaptPopulateUnshieldBaseToken: SinonStub;\nlet setUnshieldSpy: SinonSpy;\nlet erc20NoteSpy: SinonSpy;\nlet nftNoteSpy: SinonSpy;\n\nlet railgunWallet: RailgunWallet;\nlet broadcasterFeeERC20AmountRecipient: RailgunERC20AmountRecipient;\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\nconst txidVersion = getTestTXIDVersion();\n\nconst MOCK_TOKEN_AMOUNTS_DIFFERENT: RailgunERC20Amount[] = [\n  {\n    tokenAddress: MOCK_TOKEN_ADDRESS,\n    amount: 100n,\n  },\n  {\n    tokenAddress: MOCK_TOKEN_ADDRESS_2,\n    amount: 300n,\n  },\n];\n\nconst overallBatchMinGasPrice = BigInt('0x1000');\n\nconst gasDetails: TransactionGasDetails = {\n  evmGasType: EVMGasType.Type1,\n  gasEstimate: 1000n,\n  gasPrice: overallBatchMinGasPrice,\n};\n\nconst MOCK_TOKEN_AMOUNT_RECIPIENTS_INVALID: RailgunERC20AmountRecipient[] =\n  MOCK_TOKEN_AMOUNTS.map(erc20Amount => ({\n    ...erc20Amount,\n    recipientAddress: MOCK_ETH_WALLET_ADDRESS,\n  }));\n\nconst MOCK_NFT_AMOUNT_RECIPIENTS_INVALID: RailgunNFTAmountRecipient[] =\n  MOCK_NFT_AMOUNT_RECIPIENTS.map(nftAmountRecipient => ({\n    ...nftAmountRecipient,\n    recipientAddress: MOCK_ETH_WALLET_ADDRESS,\n  }));\n\nconst MOCK_TOKEN_AMOUNT_RECIPIENTS: RailgunERC20AmountRecipient[] =\n  MOCK_TOKEN_AMOUNTS.map(erc20Amount => ({\n    ...erc20Amount,\n    recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n  }));\n\nconst MOCK_TOKEN_AMOUNT_RECIPIENTS_DIFFERENT: RailgunERC20AmountRecipient[] =\n  MOCK_TOKEN_AMOUNTS_DIFFERENT.map(erc20Amount => ({\n    ...erc20Amount,\n    recipientAddress: MOCK_ETH_WALLET_ADDRESS,\n  }));\n\nconst stubGasEstimateSuccess = () => {\n  gasEstimateStub = Sinon.stub(txGasDetailsModule, 'getGasEstimate').resolves(\n    BigInt('200'),\n  );\n};\n\nconst stubGasEstimateFailure = () => {\n  gasEstimateStub = Sinon.stub(txGasDetailsModule, 'getGasEstimate').rejects(\n    new Error('test rejection - gas estimate'),\n  );\n};\n\nconst spyOnERC20Note = () => {\n  erc20NoteSpy = Sinon.spy(txNotes, 'erc20NoteFromERC20AmountRecipient');\n};\n\nconst spyOnNFTNote = () => {\n  nftNoteSpy = Sinon.spy(txNotes, 'nftNoteFromNFTAmountRecipient');\n};\n\ndescribe('tx-transfer', () => {\n  before(async function run() {\n    this.timeout(60_000);\n    await initTestEngine();\n    await initTestEngineNetworks();\n    const railgunWalletInfo = await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC,\n      undefined, // creationBlockNumbers\n    );\n    if (!isDefined(railgunWalletInfo)) {\n      throw new Error('Expected railgunWalletInfo');\n    }\n    railgunWallet = fullWalletForID(railgunWalletInfo.id);\n\n    const broadcasterWalletInfo = await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC,\n      undefined, // creationBlockNumbers\n    );\n    if (!isDefined(broadcasterWalletInfo)) {\n      throw new Error('Expected broadcasterWalletInfo');\n    }\n\n    const broadcasterRailgunAddress = broadcasterWalletInfo.railgunAddress;\n\n    broadcasterFeeERC20AmountRecipient = {\n      ...MOCK_TOKEN_FEE,\n      recipientAddress: broadcasterRailgunAddress,\n    };\n\n    railProveStub = Sinon.stub(\n      TransactionBatch.prototype,\n      'generateTransactions',\n    ).resolves({\n      provedTransactions: [\n        {\n          nullifiers: MOCK_NULLIFIERS,\n        },\n      ] as (TransactionStructV2 | TransactionStructV3)[],\n      preTransactionPOIsPerTxidLeafPerList: {},\n    });\n    railDummyProveStub = Sinon.stub(\n      TransactionBatch.prototype,\n      'generateDummyTransactions',\n    ).resolves([\n      {\n        txidVersion,\n        commitments: MOCK_COMMITMENTS,\n        boundParams: isV2Test() ? MOCK_BOUND_PARAMS_V2 : MOCK_BOUND_PARAMS_V3,\n        nullifiers: MOCK_NULLIFIERS,\n      },\n    ] as (TransactionStructV2 | TransactionStructV3)[]);\n    railTransactStub = Sinon.stub(\n      RailgunVersionedSmartContracts,\n      'generateTransact',\n    ).resolves({ data: '0x0123' } as ContractTransaction);\n    relayAdaptPopulateUnshieldBaseToken = Sinon.stub(\n      RelayAdaptVersionedSmartContracts,\n      'populateUnshieldBaseToken',\n    ).resolves({ data: '0x0123' } as ContractTransaction);\n  });\n  afterEach(() => {\n    gasEstimateStub?.restore();\n    setUnshieldSpy?.restore();\n    erc20NoteSpy?.restore();\n    nftNoteSpy?.restore();\n  });\n  after(async () => {\n    railProveStub.restore();\n    railDummyProveStub.restore();\n    railTransactStub.restore();\n    relayAdaptPopulateUnshieldBaseToken.restore();\n    await closeTestEngine();\n  });\n\n  // TRANSFER ERC20 - GAS ESTIMATE\n\n  it('Should get gas estimates for valid erc20 transfer', async () => {\n    stubGasEstimateSuccess();\n    spyOnERC20Note();\n    const rsp = await gasEstimateForUnprovenTransfer(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MEMO,\n      MOCK_TOKEN_AMOUNT_RECIPIENTS,\n      [], // nftAmountRecipients\n      MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n      MOCK_FEE_TOKEN_DETAILS,\n      false, // sendWithPublicWallet\n    );\n    expect(erc20NoteSpy.called).to.be.true;\n    expect(erc20NoteSpy.args.length).to.equal(6); // Number of calls - 3 for each of 2 broadcaster fee iterations\n    expect(erc20NoteSpy.args[0][0].amount).to.equal(BigInt('0x00')); // original broadcaster fee\n    expect(erc20NoteSpy.args[1][0].amount).to.equal(BigInt('0x100')); // token1\n    expect(erc20NoteSpy.args[2][0].amount).to.equal(BigInt('0x200')); // token2\n    expect(erc20NoteSpy.args[3][0].amount).to.equal(\n      BigInt('0x0275a61bf8737eb4'),\n    ); // New estimated Broadcaster Fee\n    expect(erc20NoteSpy.args[4][0].amount).to.equal(BigInt('0x100')); // token1\n    expect(erc20NoteSpy.args[5][0].amount).to.equal(BigInt('0x200')); // token2\n    expect(rsp.broadcasterFeeCommitment).to.not.be.undefined;\n    expect(rsp.broadcasterFeeCommitment?.commitmentCiphertext).to.deep.equal(\n      isV2Test()\n        ? MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V2\n        : MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V3,\n    );\n    // Add 9000 for the dummy tx variance\n    expect(rsp.gasEstimate).to.equal(9000n + 200n);\n  }).timeout(10_000);\n\n  it('Should get gas estimates for valid erc20 transfer: public wallet', async () => {\n    stubGasEstimateSuccess();\n    spyOnERC20Note();\n    const rsp = await gasEstimateForUnprovenTransfer(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MEMO,\n      MOCK_TOKEN_AMOUNT_RECIPIENTS,\n      [], // nftAmountRecipients\n      MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n      MOCK_FEE_TOKEN_DETAILS,\n      true, // sendWithPublicWallet\n    );\n    expect(erc20NoteSpy.called).to.be.true;\n    expect(erc20NoteSpy.args.length).to.equal(2); // Number of calls (without broadcaster fees)\n    expect(erc20NoteSpy.args[0][0].amount).to.equal(BigInt('0x100')); // token1\n    expect(erc20NoteSpy.args[1][0].amount).to.equal(BigInt('0x200')); // token2\n    expect(rsp.broadcasterFeeCommitment).to.be.undefined;\n    // Add 9000 for the dummy tx variance\n    expect(rsp.gasEstimate).to.equal(9000n + 200n);\n  }).timeout(10_000);\n\n  it('Should error on gas estimates for invalid erc20 transfer', async () => {\n    stubGasEstimateSuccess();\n    await expect(\n      gasEstimateForUnprovenTransfer(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        MOCK_DB_ENCRYPTION_KEY,\n        MOCK_MEMO,\n        MOCK_TOKEN_AMOUNT_RECIPIENTS_INVALID,\n        [], // nftAmountRecipients\n        MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n        MOCK_FEE_TOKEN_DETAILS,\n        false, // sendWithPublicWallet\n      ),\n    ).rejectedWith('Invalid RAILGUN address.');\n  });\n\n  it('Should error on transfer gas estimate for ethers rejections', async () => {\n    stubGasEstimateFailure();\n    await expect(\n      gasEstimateForUnprovenTransfer(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        MOCK_DB_ENCRYPTION_KEY,\n        MOCK_MEMO,\n        MOCK_TOKEN_AMOUNT_RECIPIENTS,\n        [], // nftAmountRecipients\n        MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n        MOCK_FEE_TOKEN_DETAILS,\n        false, // sendWithPublicWallet\n      ),\n    ).rejectedWith('test rejection - gas estimate');\n  });\n\n  // TRANSFER NFT - GAS ESTIMATE\n\n  it('Should get gas estimates for valid NFT transfer', async () => {\n    stubGasEstimateSuccess();\n    spyOnNFTNote();\n    const rsp = await gasEstimateForUnprovenTransfer(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MEMO,\n      [], // erc20AmountRecipients\n      MOCK_NFT_AMOUNT_RECIPIENTS, // nftAmountRecipients\n      MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n      MOCK_FEE_TOKEN_DETAILS,\n      false, // sendWithPublicWallet\n    );\n    expect(nftNoteSpy.called).to.be.true;\n    expect(nftNoteSpy.args.length).to.equal(4); // Number of calls - 2 for each of 2 broadcaster fee iterations\n    expect(nftNoteSpy.args[0][0].tokenSubID).to.equal('0x01'); // nft1\n    expect(nftNoteSpy.args[1][0].tokenSubID).to.equal('0x02'); // nft2\n    expect(nftNoteSpy.args[2][0].tokenSubID).to.equal('0x01'); // nft1\n    expect(nftNoteSpy.args[3][0].tokenSubID).to.equal('0x02'); // nft2\n    expect(rsp.broadcasterFeeCommitment).to.not.be.undefined;\n    expect(rsp.broadcasterFeeCommitment?.commitmentCiphertext).to.deep.equal(\n      isV2Test()\n        ? MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V2\n        : MOCK_FORMATTED_BROADCASTER_FEE_COMMITMENT_CIPHERTEXT_V3,\n    );\n    // Add 9000 for the dummy tx variance\n    expect(rsp.gasEstimate).to.equal(9000n + 200n);\n  }).timeout(10_000);\n\n  it('Should get gas estimates for valid NFT transfer: public wallet', async () => {\n    stubGasEstimateSuccess();\n    spyOnNFTNote();\n    const rsp = await gasEstimateForUnprovenTransfer(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MEMO,\n      [], // erc20AmountRecipients\n      MOCK_NFT_AMOUNT_RECIPIENTS,\n      MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n      MOCK_FEE_TOKEN_DETAILS,\n      true, // sendWithPublicWallet\n    );\n    expect(nftNoteSpy.called).to.be.true;\n    expect(nftNoteSpy.args.length).to.equal(2); // Number of calls (without broadcaster fees)\n    expect(nftNoteSpy.args[0][0].tokenSubID).to.equal('0x01'); // nft1\n    expect(nftNoteSpy.args[1][0].tokenSubID).to.equal('0x02'); // nft2\n    expect(rsp.broadcasterFeeCommitment).to.be.undefined;\n    // Add 9000 for the dummy tx variance\n    expect(rsp.gasEstimate).to.equal(9000n + 200n);\n  }).timeout(10_000);\n\n  it('Should error on gas estimates for invalid NFT transfer', async () => {\n    stubGasEstimateSuccess();\n    await expect(\n      gasEstimateForUnprovenTransfer(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        MOCK_DB_ENCRYPTION_KEY,\n        MOCK_MEMO,\n        [], // erc20AmountRecipients\n        MOCK_NFT_AMOUNT_RECIPIENTS_INVALID,\n        MOCK_TRANSACTION_GAS_DETAILS_SERIALIZED_TYPE_2,\n        MOCK_FEE_TOKEN_DETAILS,\n        false, // sendWithPublicWallet\n      ),\n    ).rejectedWith('Invalid RAILGUN address.');\n  });\n\n  // TRANSFER ERC20 - PROVE AND SEND\n\n  it('Should populate tx for valid transfer', async () => {\n    stubGasEstimateSuccess();\n    setCachedProvedTransaction(undefined);\n    spyOnERC20Note();\n    spyOnNFTNote();\n    await generateTransferProof(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      true, // showSenderAddressToRecipient\n      MOCK_MEMO,\n      MOCK_TOKEN_AMOUNT_RECIPIENTS,\n      MOCK_NFT_AMOUNT_RECIPIENTS,\n      broadcasterFeeERC20AmountRecipient,\n      false, // sendWithPublicWallet\n      overallBatchMinGasPrice,\n      () => {}, // progressCallback\n    );\n    expect(erc20NoteSpy.called).to.be.true;\n    expect(erc20NoteSpy.args[0][0].amount).to.equal(MOCK_TOKEN_FEE.amount);\n    expect(nftNoteSpy.called).to.be.true;\n    expect(nftNoteSpy.args[0][0].nftAddress).to.equal(\n      MOCK_NFT_AMOUNT_RECIPIENTS[0].nftAddress,\n    );\n    const populateResponse = await populateProvedTransfer(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      true, // showSenderAddressToRecipient\n      MOCK_MEMO,\n      MOCK_TOKEN_AMOUNT_RECIPIENTS,\n      MOCK_NFT_AMOUNT_RECIPIENTS,\n      broadcasterFeeERC20AmountRecipient,\n      false, // sendWithPublicWallet\n      overallBatchMinGasPrice,\n      gasDetails,\n    );\n    expect(populateResponse.nullifiers).to.deep.equal([\n      '0x0000000000000000000000000000000000000000000000000000000000000001',\n      '0x0000000000000000000000000000000000000000000000000000000000000002',\n    ]);\n\n    const { transaction } = populateResponse;\n\n    expect(transaction.nonce).to.equal(undefined);\n    expect(transaction.gasPrice?.toString()).to.equal('4096');\n    expect(transaction.gasLimit).to.equal(1200n);\n    expect(transaction.value?.toString()).to.equal(undefined);\n    expect(transaction.data).to.equal('0x0123');\n    expect(transaction.to).to.equal(undefined);\n    expect(transaction.chainId).to.equal(undefined);\n    expect(transaction.type).to.equal(1);\n  });\n\n  it('Should error on populate transfer tx for unproved transaction', async () => {\n    stubGasEstimateSuccess();\n    setCachedProvedTransaction(undefined);\n    await expect(\n      populateProvedTransfer(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        false, // showSenderAddressToRecipient\n        MOCK_MEMO,\n        MOCK_TOKEN_AMOUNT_RECIPIENTS,\n        MOCK_NFT_AMOUNT_RECIPIENTS,\n        broadcasterFeeERC20AmountRecipient,\n        false, // sendWithPublicWallet\n        overallBatchMinGasPrice,\n        gasDetails,\n      ),\n    ).rejectedWith('Invalid proof for this transaction');\n  });\n\n  it('Should error on populate transfer tx when params changed (invalid cached proof)', async () => {\n    stubGasEstimateSuccess();\n    await generateTransferProof(\n      txidVersion,\n      NetworkName.Polygon,\n      railgunWallet.id,\n      MOCK_DB_ENCRYPTION_KEY,\n      true, // showSenderAddressToRecipient\n      MOCK_MEMO,\n      MOCK_TOKEN_AMOUNT_RECIPIENTS,\n      MOCK_NFT_AMOUNT_RECIPIENTS,\n      broadcasterFeeERC20AmountRecipient,\n      false, // sendWithPublicWallet\n      overallBatchMinGasPrice,\n      () => {}, // progressCallback\n    );\n    await expect(\n      populateProvedTransfer(\n        txidVersion,\n        NetworkName.Polygon,\n        railgunWallet.id,\n        true, // showSenderAddressToRecipient\n        MOCK_MEMO,\n        MOCK_TOKEN_AMOUNT_RECIPIENTS_DIFFERENT,\n        MOCK_NFT_AMOUNT_RECIPIENTS,\n        broadcasterFeeERC20AmountRecipient,\n        false, // sendWithPublicWallet\n        overallBatchMinGasPrice,\n        gasDetails,\n      ),\n    ).rejectedWith('Invalid proof for this transaction');\n  });\n});\n"]}