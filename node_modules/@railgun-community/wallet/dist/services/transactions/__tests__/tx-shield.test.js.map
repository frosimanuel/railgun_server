{"version":3,"file":"tx-shield.test.js","sourceRoot":"","sources":["../../../../src/services/transactions/__tests__/tx-shield.test.ts"],"names":[],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport Sinon, { SinonStub } from 'sinon';\nimport {\n  NetworkName,\n  EVMGasType,\n  RailgunERC20AmountRecipient,\n  TransactionGasDetails,\n} from '@railgun-community/shared-models';\nimport {\n  closeTestEngine,\n  initTestEngine,\n  initTestEngineNetworks,\n} from '../../../tests/setup.test';\nimport {\n  MOCK_DB_ENCRYPTION_KEY,\n  MOCK_ETH_WALLET_ADDRESS,\n  MOCK_MNEMONIC,\n  MOCK_NFT_AMOUNT_RECIPIENTS,\n  MOCK_RAILGUN_WALLET_ADDRESS,\n  MOCK_TOKEN_ADDRESS,\n  MOCK_TOKEN_ADDRESS_2,\n} from '../../../tests/mocks.test';\nimport {\n  populateShield,\n  gasEstimateForShield,\n  getShieldPrivateKeySignatureMessage,\n} from '../tx-shield';\nimport { createRailgunWallet } from '../../railgun/wallets/wallets';\nimport { getRandomBytes } from '../../railgun';\nimport { FallbackProvider } from 'ethers';\nimport { getTestTXIDVersion } from '../../../tests/helper.test';\nimport * as txGasDetailsModule from '../tx-gas-details';\n\nlet getGasEstimateStub: SinonStub;\nlet gasEstimateStub: SinonStub;\nlet sendTxStub: SinonStub;\n\nconst txidVersion = getTestTXIDVersion();\n\nconst shieldPrivateKey = getRandomBytes(32);\n\nchai.use(chaiAsPromised);\nconst { expect } = chai;\n\nconst gasDetails: TransactionGasDetails = {\n  evmGasType: EVMGasType.Type2,\n  gasEstimate: BigInt('0x10'),\n  maxFeePerGas: BigInt('0x1000'),\n  maxPriorityFeePerGas: BigInt('0x100'),\n};\n\nconst MOCK_TOKEN_AMOUNT_RECIPIENTS: RailgunERC20AmountRecipient[] = [\n  {\n    tokenAddress: MOCK_TOKEN_ADDRESS,\n    amount: BigInt(0x100),\n    recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n  },\n  {\n    tokenAddress: MOCK_TOKEN_ADDRESS_2,\n    amount: BigInt(0x200),\n    recipientAddress: MOCK_RAILGUN_WALLET_ADDRESS,\n  },\n];\n\nconst MOCK_TOKEN_AMOUNT_RECIPIENTS_INVALID: RailgunERC20AmountRecipient[] = [\n  {\n    tokenAddress: MOCK_TOKEN_ADDRESS,\n    amount: BigInt(0x100),\n    recipientAddress: '0x1234',\n  },\n  {\n    tokenAddress: MOCK_TOKEN_ADDRESS_2,\n    amount: BigInt(0x200),\n    recipientAddress: '0x1234',\n  },\n];\n\nconst stubSuccess = () => {\n  gasEstimateStub = Sinon.stub(\n    FallbackProvider.prototype,\n    'estimateGas',\n  ).resolves(200n);\n};\n\nconst stubFailure = () => {\n  gasEstimateStub = Sinon.stub(\n    FallbackProvider.prototype,\n    'estimateGas',\n  ).rejects(new Error('test rejection - gas estimate'));\n};\n\nconst stubGetGasEstimate = () => {\n  getGasEstimateStub = Sinon.stub(\n    txGasDetailsModule,\n    'getGasEstimate',\n  ).resolves(200n);\n};\n\nconst stubGetGasEstimateFailure = () => {\n  getGasEstimateStub = Sinon.stub(txGasDetailsModule, 'getGasEstimate').rejects(\n    new Error('test rejection - gas estimate'),\n  );\n};\n\ndescribe('tx-shield', () => {\n  before(async function run() {\n    this.timeout(60_000);\n    await initTestEngine();\n    await initTestEngineNetworks();\n    await createRailgunWallet(\n      MOCK_DB_ENCRYPTION_KEY,\n      MOCK_MNEMONIC,\n      undefined, // creationBlockNumbers\n    );\n  });\n  afterEach(() => {\n    gasEstimateStub?.restore();\n    sendTxStub?.restore();\n    getGasEstimateStub?.restore();\n  });\n  after(async () => {\n    await closeTestEngine();\n  });\n\n  it('Should get expected signature message for shieldPrivateKey', () => {\n    expect(getShieldPrivateKeySignatureMessage()).to.equal('RAILGUN_SHIELD');\n  });\n\n  it('Should get gas estimate for valid shield', async () => {\n    stubGetGasEstimate();\n    const rsp = await gasEstimateForShield(\n      txidVersion,\n      NetworkName.Polygon,\n      shieldPrivateKey,\n      MOCK_TOKEN_AMOUNT_RECIPIENTS,\n      MOCK_NFT_AMOUNT_RECIPIENTS,\n      MOCK_ETH_WALLET_ADDRESS,\n    );\n    expect(rsp.gasEstimate).to.equal(200n);\n  });\n\n  it('Should error on gas estimates for invalid shield', async () => {\n    stubGetGasEstimate();\n    await expect(\n      gasEstimateForShield(\n        txidVersion,\n        NetworkName.Polygon,\n        shieldPrivateKey,\n        MOCK_TOKEN_AMOUNT_RECIPIENTS_INVALID,\n        MOCK_NFT_AMOUNT_RECIPIENTS,\n        MOCK_ETH_WALLET_ADDRESS,\n      ),\n    ).rejectedWith('Invalid RAILGUN address.');\n  });\n\n  it('Should error for ethers rejections', async () => {\n    stubGetGasEstimateFailure();\n    await expect(\n      gasEstimateForShield(\n        txidVersion,\n        NetworkName.Polygon,\n        shieldPrivateKey,\n        MOCK_TOKEN_AMOUNT_RECIPIENTS,\n        MOCK_NFT_AMOUNT_RECIPIENTS,\n        MOCK_ETH_WALLET_ADDRESS,\n      ),\n    ).rejectedWith('test rejection - gas estimate');\n  });\n\n  it('Should send tx for valid shield - no gas details', async () => {\n    stubGetGasEstimate();\n    const { transaction } = await populateShield(\n      txidVersion,\n      NetworkName.Polygon,\n      shieldPrivateKey,\n      MOCK_TOKEN_AMOUNT_RECIPIENTS,\n      MOCK_NFT_AMOUNT_RECIPIENTS,\n      undefined, // gasDetails\n    );\n    expect(transaction).to.be.an('object');\n    expect(transaction.data).to.be.a('string');\n    expect(transaction.to).to.equal(\n      '0x19b620929f97b7b990801496c3b361ca5def8c71',\n    );\n    expect(transaction.gasPrice).to.be.undefined;\n    expect(transaction.gasLimit).to.be.undefined;\n    expect(transaction.maxFeePerGas).to.be.undefined;\n    expect(transaction.maxPriorityFeePerGas).to.be.undefined;\n  });\n\n  it('Should send tx for valid shield - gas details', async () => {\n    stubGetGasEstimate();\n    const { transaction } = await populateShield(\n      txidVersion,\n      NetworkName.Polygon,\n      shieldPrivateKey,\n      MOCK_TOKEN_AMOUNT_RECIPIENTS,\n      MOCK_NFT_AMOUNT_RECIPIENTS,\n      gasDetails,\n    );\n    expect(transaction).to.be.an('object');\n    expect(transaction.data).to.be.a('string');\n    expect(transaction.to).to.equal(\n      '0x19b620929f97b7b990801496c3b361ca5def8c71',\n    );\n    expect(transaction.gasPrice).to.be.undefined;\n    expect(transaction.gasLimit).to.equal(BigInt('0x13'));\n    expect(transaction.maxFeePerGas).to.equal(BigInt('0x1000'));\n    expect(transaction.maxPriorityFeePerGas).to.equal(BigInt('0x0100'));\n  });\n\n  it('Should error on send tx for invalid shield', async () => {\n    stubGetGasEstimate();\n    await expect(\n      populateShield(\n        txidVersion,\n        NetworkName.Polygon,\n        shieldPrivateKey,\n        MOCK_TOKEN_AMOUNT_RECIPIENTS_INVALID,\n        MOCK_NFT_AMOUNT_RECIPIENTS,\n        gasDetails,\n      ),\n    ).rejectedWith('Invalid RAILGUN address.');\n  });\n});\n"]}