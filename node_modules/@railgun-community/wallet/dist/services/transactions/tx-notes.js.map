{"version":3,"file":"tx-notes.js","sourceRoot":"","sources":["../../../src/services/transactions/tx-notes.ts"],"names":[],"mappings":";;;AAAA,sDAOmC;AA4O1B,6FAjPP,qBAAY,OAiPO;AA3OrB,oEAO0C;AAEnC,MAAM,iCAAiC,GAAG,CAC/C,oBAAiD,EACjD,aAA4B,EAC5B,UAAsB,EACtB,4BAAqC,EACrC,QAA0B,EACZ,EAAE;IAChB,MAAM,EAAE,MAAM,EAAE,gBAAgB,EAAE,GAAG,oBAAoB,CAAC;IAE1D,MAAM,mBAAmB,GAAG,sBAAa,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;IAE1E,MAAM,SAAS,GAAG,IAAA,0BAAiB,EAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;IAEvE,OAAO,qBAAY,CAAC,cAAc,CAChC,mBAAmB,EACnB,aAAa,CAAC,WAAW,EACzB,MAAM,EACN,SAAS,EACT,4BAA4B,EAC5B,UAAU,EACV,QAAQ,CACT,CAAC;AACJ,CAAC,CAAC;AAtBW,QAAA,iCAAiC,qCAsB5C;AAEK,MAAM,6BAA6B,GAAG,CAC3C,kBAA6C,EAC7C,aAA4B,EAC5B,4BAAqC,EACrC,QAA0B,EACZ,EAAE;IAChB,MAAM,EAAE,gBAAgB,EAAE,UAAU,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,EAAE,GACtE,kBAAkB,CAAC;IAErB,MAAM,mBAAmB,GAAG,sBAAa,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;IAE1E,MAAM,SAAS,GAAG,IAAA,wBAAe,EAC/B,UAAU,EACV,YAAqB,EACrB,UAAU,CACX,CAAC;IAEF,QAAQ,YAAY,EAAE;QACpB,KAAK,4BAAY,CAAC,MAAM;YACtB,OAAO,qBAAY,CAAC,oBAAoB,CACtC,mBAAmB,EACnB,aAAa,CAAC,WAAW,EACzB,SAAS,EACT,4BAA4B,EAC5B,QAAQ,CACT,CAAC;QACJ,KAAK,4BAAY,CAAC,OAAO;YACvB,OAAO,qBAAY,CAAC,qBAAqB,CACvC,mBAAmB,EACnB,aAAa,CAAC,WAAW,EACzB,SAAS,EACT,MAAM,CAAC,MAAM,CAAC,EACd,4BAA4B,EAC5B,QAAQ,CACT,CAAC;KACL;AACH,CAAC,CAAC;AApCW,QAAA,6BAA6B,iCAoCxC;AAEF,MAAM,mBAAmB,GAAG,CAC1B,CAA+B,EAC/B,CAA+B,EAC/B,EAAE;IACF,OAAO,CAAC,EAAE,YAAY,KAAK,CAAC,EAAE,YAAY,IAAI,CAAC,EAAE,MAAM,KAAK,CAAC,EAAE,MAAM,CAAC;AACxE,CAAC,CAAC;AAEK,MAAM,4BAA4B,GAAG,CAC1C,CAAwC,EACxC,CAAwC,EACxC,EAAE;IACF,OAAO,CACL,mBAAmB,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,gBAAgB,KAAK,CAAC,EAAE,gBAAgB,CACzE,CAAC;AACJ,CAAC,CAAC;AAPW,QAAA,4BAA4B,gCAOvC;AAEK,MAAM,wBAAwB,GAAG,CACtC,CAAiC,EACjC,CAAiC,EACjC,EAAE;IACF,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;IACD,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QACZ,OAAO,KAAK,CAAC;KACd;IACD,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;QACzB,OAAO,KAAK,CAAC;KACd;IACD,KAAK,MAAM,WAAW,IAAI,CAAC,EAAE;QAC3B,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,KAAK,WAAW,CAAC,YAAY,CAAC,CAAC;QACzE,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAC;SACd;QACD,IAAI,KAAK,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;YACvC,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAvBW,QAAA,wBAAwB,4BAuBnC;AAEK,MAAM,iCAAiC,GAAG,CAC/C,CAA0C,EAC1C,CAA0C,EAC1C,EAAE;IACF,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;IACD,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QACZ,OAAO,KAAK,CAAC;KACd;IACD,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;QACzB,OAAO,KAAK,CAAC;KACd;IACD,KAAK,MAAM,WAAW,IAAI,CAAC,EAAE;QAC3B,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,CAClB,EAAE,CAAC,EAAE,CACH,EAAE,CAAC,YAAY,KAAK,WAAW,CAAC,YAAY;YAC5C,EAAE,CAAC,gBAAgB,KAAK,WAAW,CAAC,gBAAgB,CACvD,CAAC;QACF,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAC;SACd;QACD,IAAI,KAAK,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;YACvC,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AA3BW,QAAA,iCAAiC,qCA2B5C;AAEK,MAAM,2BAA2B,GAAG,CACzC,CAAoC,EACpC,CAAoC,EACpC,EAAE;IACF,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;IACD,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QACZ,OAAO,KAAK,CAAC;KACd;IACD,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;QACzB,OAAO,KAAK,CAAC;KACd;IACD,KAAK,MAAM,cAAc,IAAI,CAAC,EAAE;QAC9B,MAAM,KAAK,GACT,CAAC,CAAC,IAAI,CACJ,EAAE,CAAC,EAAE,CACH,EAAE,CAAC,YAAY,KAAK,cAAc,CAAC,YAAY;YAC/C,EAAE,CAAC,gBAAgB,KAAK,cAAc,CAAC,gBAAgB,CAC1D,IAAI,IAAI,CAAC;QACZ,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAzBW,QAAA,2BAA2B,+BAyBtC;AAEK,MAAM,sBAAsB,GAAG,CACpC,CAA+B,EAC/B,CAA+B,EAC/B,EAAE;IACF,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;IACD,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QACZ,OAAO,KAAK,CAAC;KACd;IACD,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;QACzB,OAAO,KAAK,CAAC;KACd;IACD,KAAK,MAAM,kBAAkB,IAAI,CAAC,EAAE;QAClC,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,CAClB,EAAE,CAAC,EAAE,CACH,EAAE,CAAC,UAAU,KAAK,kBAAkB,CAAC,UAAU;YAC/C,EAAE,CAAC,UAAU,KAAK,kBAAkB,CAAC,UAAU,CAClD,CAAC;QACF,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAC;SACd;QACD,IAAI,KAAK,CAAC,YAAY,KAAK,kBAAkB,CAAC,YAAY,EAAE;YAC1D,OAAO,KAAK,CAAC;SACd;QACD,IAAI,KAAK,CAAC,MAAM,KAAK,kBAAkB,CAAC,MAAM,EAAE;YAC9C,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AA9BW,QAAA,sBAAsB,0BA8BjC;AAEK,MAAM,+BAA+B,GAAG,CAC7C,CAAwC,EACxC,CAAwC,EACxC,EAAE;IACF,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;IACD,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QACZ,OAAO,KAAK,CAAC;KACd;IACD,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;QACzB,OAAO,KAAK,CAAC;KACd;IACD,KAAK,MAAM,kBAAkB,IAAI,CAAC,EAAE;QAClC,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,CAClB,EAAE,CAAC,EAAE,CACH,EAAE,CAAC,UAAU,KAAK,kBAAkB,CAAC,UAAU;YAC/C,EAAE,CAAC,UAAU,KAAK,kBAAkB,CAAC,UAAU,CAClD,CAAC;QACF,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAC;SACd;QACD,IAAI,KAAK,CAAC,YAAY,KAAK,kBAAkB,CAAC,YAAY,EAAE;YAC1D,OAAO,KAAK,CAAC;SACd;QACD,IAAI,KAAK,CAAC,gBAAgB,KAAK,kBAAkB,CAAC,gBAAgB,EAAE;YAClE,OAAO,KAAK,CAAC;SACd;QACD,IAAI,KAAK,CAAC,MAAM,KAAK,kBAAkB,CAAC,MAAM,EAAE;YAC9C,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAjCW,QAAA,+BAA+B,mCAiC1C","sourcesContent":["import {\n  OutputType,\n  TransactNote,\n  RailgunWallet,\n  RailgunEngine,\n  getTokenDataERC20,\n  getTokenDataNFT,\n} from '@railgun-community/engine';\nimport {\n  NFTTokenType,\n  RailgunNFTAmountRecipient,\n  RailgunERC20Amount,\n  RailgunERC20AmountRecipient,\n  RailgunNFTAmount,\n  RailgunERC20Recipient,\n} from '@railgun-community/shared-models';\n\nexport const erc20NoteFromERC20AmountRecipient = (\n  erc20AmountRecipient: RailgunERC20AmountRecipient,\n  railgunWallet: RailgunWallet,\n  outputType: OutputType,\n  showSenderAddressToRecipient: boolean,\n  memoText: Optional<string>,\n): TransactNote => {\n  const { amount, recipientAddress } = erc20AmountRecipient;\n\n  const receiverAddressData = RailgunEngine.decodeAddress(recipientAddress);\n\n  const tokenData = getTokenDataERC20(erc20AmountRecipient.tokenAddress);\n\n  return TransactNote.createTransfer(\n    receiverAddressData,\n    railgunWallet.addressKeys,\n    amount,\n    tokenData,\n    showSenderAddressToRecipient,\n    outputType,\n    memoText,\n  );\n};\n\nexport const nftNoteFromNFTAmountRecipient = (\n  nftAmountRecipient: RailgunNFTAmountRecipient,\n  railgunWallet: RailgunWallet,\n  showSenderAddressToRecipient: boolean,\n  memoText: Optional<string>,\n): TransactNote => {\n  const { recipientAddress, nftAddress, nftTokenType, tokenSubID, amount } =\n    nftAmountRecipient;\n\n  const receiverAddressData = RailgunEngine.decodeAddress(recipientAddress);\n\n  const tokenData = getTokenDataNFT(\n    nftAddress,\n    nftTokenType as 1 | 2,\n    tokenSubID,\n  );\n\n  switch (nftTokenType) {\n    case NFTTokenType.ERC721:\n      return TransactNote.createERC721Transfer(\n        receiverAddressData,\n        railgunWallet.addressKeys,\n        tokenData,\n        showSenderAddressToRecipient,\n        memoText,\n      );\n    case NFTTokenType.ERC1155:\n      return TransactNote.createERC1155Transfer(\n        receiverAddressData,\n        railgunWallet.addressKeys,\n        tokenData,\n        BigInt(amount),\n        showSenderAddressToRecipient,\n        memoText,\n      );\n  }\n};\n\nconst compareERC20Amounts = (\n  a: Optional<RailgunERC20Amount>,\n  b: Optional<RailgunERC20Amount>,\n) => {\n  return a?.tokenAddress === b?.tokenAddress && a?.amount === b?.amount;\n};\n\nexport const compareERC20AmountRecipients = (\n  a: Optional<RailgunERC20AmountRecipient>,\n  b: Optional<RailgunERC20AmountRecipient>,\n) => {\n  return (\n    compareERC20Amounts(a, b) && a?.recipientAddress === b?.recipientAddress\n  );\n};\n\nexport const compareERC20AmountArrays = (\n  a: Optional<RailgunERC20Amount[]>,\n  b: Optional<RailgunERC20Amount[]>,\n) => {\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (const erc20Amount of a) {\n    const found = b.find(ta => ta.tokenAddress === erc20Amount.tokenAddress);\n    if (!found) {\n      return false;\n    }\n    if (found.amount !== erc20Amount.amount) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const compareERC20AmountRecipientArrays = (\n  a: Optional<RailgunERC20AmountRecipient[]>,\n  b: Optional<RailgunERC20AmountRecipient[]>,\n) => {\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (const erc20Amount of a) {\n    const found = b.find(\n      ta =>\n        ta.tokenAddress === erc20Amount.tokenAddress &&\n        ta.recipientAddress === erc20Amount.recipientAddress,\n    );\n    if (!found) {\n      return false;\n    }\n    if (found.amount !== erc20Amount.amount) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const compareERC20RecipientArrays = (\n  a: Optional<RailgunERC20Recipient[]>,\n  b: Optional<RailgunERC20Recipient[]>,\n) => {\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (const erc20Recipient of a) {\n    const found =\n      b.find(\n        ta =>\n          ta.tokenAddress === erc20Recipient.tokenAddress &&\n          ta.recipientAddress === erc20Recipient.recipientAddress,\n      ) != null;\n    if (!found) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const compareNFTAmountArrays = (\n  a: Optional<RailgunNFTAmount[]>,\n  b: Optional<RailgunNFTAmount[]>,\n) => {\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (const nftAmountRecipient of a) {\n    const found = b.find(\n      ta =>\n        ta.nftAddress === nftAmountRecipient.nftAddress &&\n        ta.tokenSubID === nftAmountRecipient.tokenSubID,\n    );\n    if (!found) {\n      return false;\n    }\n    if (found.nftTokenType !== nftAmountRecipient.nftTokenType) {\n      return false;\n    }\n    if (found.amount !== nftAmountRecipient.amount) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const compareNFTAmountRecipientArrays = (\n  a: Optional<RailgunNFTAmountRecipient[]>,\n  b: Optional<RailgunNFTAmountRecipient[]>,\n) => {\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (const nftAmountRecipient of a) {\n    const found = b.find(\n      ta =>\n        ta.nftAddress === nftAmountRecipient.nftAddress &&\n        ta.tokenSubID === nftAmountRecipient.tokenSubID,\n    );\n    if (!found) {\n      return false;\n    }\n    if (found.nftTokenType !== nftAmountRecipient.nftTokenType) {\n      return false;\n    }\n    if (found.recipientAddress !== nftAmountRecipient.recipientAddress) {\n      return false;\n    }\n    if (found.amount !== nftAmountRecipient.amount) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport { TransactNote };\n"]}