{"version":3,"file":"tx-unshield.js","sourceRoot":"","sources":["../../../src/services/transactions/tx-unshield.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RailgunPopulateTransactionResponse,\n  RailgunTransactionGasEstimateResponse,\n  RailgunERC20Amount,\n  NetworkName,\n  ProofType,\n  FeeTokenDetails,\n  RailgunERC20AmountRecipient,\n  RailgunNFTAmountRecipient,\n  TransactionGasDetails,\n  TXIDVersion,\n  NETWORK_CONFIG,\n} from '@railgun-community/shared-models';\nimport {\n  DUMMY_FROM_ADDRESS,\n  generateDummyProofTransactions,\n  generateTransact,\n  generateUnshieldBaseToken,\n} from './tx-generator';\nimport { populateProvedTransaction } from './proof-cache';\nimport {\n  ByteUtils,\n  TransactionStructV2,\n  TransactionStructV3,\n} from '@railgun-community/engine';\nimport { gasEstimateResponseDummyProofIterativeBroadcasterFee } from './tx-gas-broadcaster-fee-estimator';\nimport { createRelayAdaptUnshieldERC20AmountRecipients } from './tx-cross-contract-calls';\nimport { reportAndSanitizeError } from '../../utils/error';\nimport { gasEstimateResponse, getGasEstimate } from './tx-gas-details';\nimport {\n  walletForID,\n  getFallbackProviderForNetwork,\n  getSerializedERC20Balances,\n  getSerializedNFTBalances,\n} from '../railgun';\n\nexport const populateProvedUnshield = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>,\n  sendWithPublicWallet: boolean,\n  overallBatchMinGasPrice: Optional<bigint>,\n  gasDetails: TransactionGasDetails,\n): Promise<RailgunPopulateTransactionResponse> => {\n  try {\n    const { transaction, nullifiers, preTransactionPOIsPerTxidLeafPerList } =\n      await populateProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.Unshield,\n        railgunWalletID,\n        false, // showSenderAddressToRecipient\n        undefined, // memoText\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        undefined, // relayAdaptUnshieldERC20AmountRecipients\n        undefined, // relayAdaptUnshieldNFTAmounts\n        undefined, // relayAdaptShieldERC20Recipients\n        undefined, // relayAdaptShieldNFTRecipients\n        undefined, // crossContractCalls\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n        gasDetails,\n      );\n    return {\n      nullifiers,\n      transaction,\n      preTransactionPOIsPerTxidLeafPerList,\n    };\n  } catch (err) {\n    throw reportAndSanitizeError(populateProvedUnshield.name, err);\n  }\n};\n\nexport const populateProvedUnshieldBaseToken = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  publicWalletAddress: string,\n  railgunWalletID: string,\n  wrappedERC20Amount: RailgunERC20Amount,\n  broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>,\n  sendWithPublicWallet: boolean,\n  overallBatchMinGasPrice: Optional<bigint>,\n  gasDetails: TransactionGasDetails,\n): Promise<RailgunPopulateTransactionResponse> => {\n  try {\n    const erc20AmountRecipients: RailgunERC20AmountRecipient[] = [\n      {\n        ...wrappedERC20Amount,\n        recipientAddress: publicWalletAddress,\n      },\n    ];\n    const relayAdaptUnshieldERC20Amounts: RailgunERC20Amount[] = [\n      wrappedERC20Amount,\n    ];\n\n    // Empty NFT Recipients.\n    const nftAmountRecipients: RailgunNFTAmountRecipient[] = [];\n\n    const { transaction, nullifiers, preTransactionPOIsPerTxidLeafPerList } =\n      await populateProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.UnshieldBaseToken,\n        railgunWalletID,\n        false, // showSenderAddressToRecipient\n        undefined, // memoText\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        relayAdaptUnshieldERC20Amounts,\n        undefined, // relayAdaptUnshieldNFTAmounts\n        undefined, // relayAdaptShieldERC20Recipients\n        undefined, // relayAdaptShieldNFTRecipients\n        undefined, // crossContractCalls\n        broadcasterFeeERC20AmountRecipient,\n        sendWithPublicWallet,\n        overallBatchMinGasPrice,\n        gasDetails,\n      );\n    return {\n      nullifiers,\n      transaction,\n      preTransactionPOIsPerTxidLeafPerList,\n    };\n  } catch (err) {\n    throw reportAndSanitizeError(populateProvedUnshieldBaseToken.name, err);\n  }\n};\n\nexport const gasEstimateForUnprovenUnshield = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  encryptionKey: string,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  originalGasDetails: TransactionGasDetails,\n  feeTokenDetails: Optional<FeeTokenDetails>,\n  sendWithPublicWallet: boolean,\n): Promise<RailgunTransactionGasEstimateResponse> => {\n  try {\n    const overallBatchMinGasPrice = 0n;\n\n    const response = await gasEstimateResponseDummyProofIterativeBroadcasterFee(\n      (broadcasterFeeERC20Amount: Optional<RailgunERC20Amount>) =>\n        generateDummyProofTransactions(\n          ProofType.Unshield,\n          networkName,\n          railgunWalletID,\n          txidVersion,\n          encryptionKey,\n          false, // showSenderAddressToRecipient\n          undefined, // memoText\n          erc20AmountRecipients,\n          nftAmountRecipients,\n          broadcasterFeeERC20Amount,\n          sendWithPublicWallet,\n          overallBatchMinGasPrice,\n        ),\n      (txs: (TransactionStructV2 | TransactionStructV3)[]) =>\n        generateTransact(\n          txidVersion,\n          txs,\n          networkName,\n          true, // useDummyProof\n        ),\n      txidVersion,\n      networkName,\n      railgunWalletID,\n      erc20AmountRecipients,\n      originalGasDetails,\n      feeTokenDetails,\n      sendWithPublicWallet,\n      false, // isCrossContractCall\n    );\n    return response;\n  } catch (err) {\n    throw reportAndSanitizeError(gasEstimateForUnprovenUnshield.name, err);\n  }\n};\n\nexport const gasEstimateForUnprovenUnshieldBaseToken = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  publicWalletAddress: string,\n  railgunWalletID: string,\n  encryptionKey: string,\n  wrappedERC20Amount: RailgunERC20Amount,\n  originalGasDetails: TransactionGasDetails,\n  feeTokenDetails: Optional<FeeTokenDetails>,\n  sendWithPublicWallet: boolean,\n): Promise<RailgunTransactionGasEstimateResponse> => {\n  try {\n    const relayAdaptUnshieldERC20AmountRecipients: RailgunERC20AmountRecipient[] =\n      createRelayAdaptUnshieldERC20AmountRecipients(txidVersion, networkName, [\n        wrappedERC20Amount,\n      ]);\n\n    // Empty NFT Recipients.\n    const nftAmountRecipients: RailgunNFTAmountRecipient[] = [];\n\n    const overallBatchMinGasPrice = 0n;\n\n    const response = await gasEstimateResponseDummyProofIterativeBroadcasterFee(\n      (broadcasterFeeERC20Amount: Optional<RailgunERC20Amount>) =>\n        generateDummyProofTransactions(\n          ProofType.UnshieldBaseToken,\n          networkName,\n          railgunWalletID,\n          txidVersion,\n          encryptionKey,\n          false, // showSenderAddressToRecipient\n          undefined, // memoText\n          relayAdaptUnshieldERC20AmountRecipients,\n          nftAmountRecipients,\n          broadcasterFeeERC20Amount,\n          sendWithPublicWallet,\n          overallBatchMinGasPrice,\n        ),\n      (txs: (TransactionStructV2 | TransactionStructV3)[]) => {\n        const relayAdaptParamsRandom = ByteUtils.randomHex(31);\n        return generateUnshieldBaseToken(\n          txidVersion,\n          txs,\n          networkName,\n          publicWalletAddress,\n          relayAdaptParamsRandom,\n          true, // useDummyProof\n        );\n      },\n      txidVersion,\n      networkName,\n      railgunWalletID,\n      relayAdaptUnshieldERC20AmountRecipients,\n      originalGasDetails,\n      feeTokenDetails,\n      sendWithPublicWallet,\n      false, // isCrossContractCall\n    );\n    return response;\n  } catch (err) {\n    throw reportAndSanitizeError(\n      gasEstimateForUnprovenUnshieldBaseToken.name,\n      err,\n    );\n  }\n};\n\nexport const getERC20AndNFTAmountRecipientsForUnshieldToOrigin = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  originalShieldTxid: string,\n): Promise<{\n  erc20AmountRecipients: RailgunERC20AmountRecipient[];\n  nftAmountRecipients: RailgunNFTAmountRecipient[];\n}> => {\n  const wallet = walletForID(railgunWalletID);\n  const chain = NETWORK_CONFIG[networkName].chain;\n\n  const balances = await wallet.getTokenBalancesForUnshieldToOrigin(\n    txidVersion,\n    chain,\n    originalShieldTxid,\n  );\n\n  const provider = getFallbackProviderForNetwork(networkName);\n  const transaction = await provider.getTransaction(originalShieldTxid);\n  if (!transaction) {\n    throw new Error('Could not find shield transaction from RPC');\n  }\n\n  const recipientAddress = transaction.from;\n  const erc20Amounts = getSerializedERC20Balances(balances);\n  const nftAmounts = getSerializedNFTBalances(balances);\n  const erc20AmountRecipients: RailgunERC20AmountRecipient[] = erc20Amounts\n    .filter(({ amount }) => amount > 0n)\n    .map(erc20Amount => ({\n      ...erc20Amount,\n      recipientAddress,\n    }));\n  const nftAmountRecipients: RailgunNFTAmountRecipient[] = nftAmounts\n    .filter(({ amount }) => amount > 0n)\n    .map(nftAmount => ({\n      ...nftAmount,\n      recipientAddress,\n    }));\n  return { erc20AmountRecipients, nftAmountRecipients };\n};\n\nexport const populateProvedUnshieldToOrigin = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  gasDetails: TransactionGasDetails,\n): Promise<RailgunPopulateTransactionResponse> => {\n  try {\n    const { transaction, nullifiers, preTransactionPOIsPerTxidLeafPerList } =\n      await populateProvedTransaction(\n        txidVersion,\n        networkName,\n        ProofType.Unshield,\n        railgunWalletID,\n        false, // showSenderAddressToRecipient\n        undefined, // memoText\n        erc20AmountRecipients,\n        nftAmountRecipients,\n        undefined, // relayAdaptUnshieldERC20AmountRecipients\n        undefined, // relayAdaptUnshieldNFTAmounts\n        undefined, // relayAdaptShieldERC20Recipients\n        undefined, // relayAdaptShieldNFTRecipients\n        undefined, // crossContractCalls\n        undefined, // broadcasterFeeERC20AmountRecipient\n        true, // sendWithPublicWallet\n        undefined, // overallBatchMinGasPrice\n        gasDetails,\n      );\n    return {\n      nullifiers,\n      transaction,\n      preTransactionPOIsPerTxidLeafPerList,\n    };\n  } catch (err) {\n    throw reportAndSanitizeError(populateProvedUnshieldToOrigin.name, err);\n  }\n};\n\nexport const gasEstimateForUnprovenUnshieldToOrigin = async (\n  originalShieldTxid: string,\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  encryptionKey: string,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n): Promise<RailgunTransactionGasEstimateResponse> => {\n  try {\n    // Use dead address for private transaction gas estimate\n    const fromWalletAddress = DUMMY_FROM_ADDRESS;\n\n    const overallBatchMinGasPrice = 0n;\n\n    const serializedTransactions = await generateDummyProofTransactions(\n      ProofType.Unshield,\n      networkName,\n      railgunWalletID,\n      txidVersion,\n      encryptionKey,\n      false, // showSenderAddressToRecipient\n      undefined, // memoText\n      erc20AmountRecipients,\n      nftAmountRecipients,\n      undefined, // broadcasterFeeERC20Amount\n      true, // sendWithPublicWallet\n      overallBatchMinGasPrice,\n      originalShieldTxid, // originShieldTxidForSpendabilityOverride\n    );\n    const transaction = await generateTransact(\n      txidVersion,\n      serializedTransactions,\n      networkName,\n      true, // useDummyProof\n    );\n\n    const gasEstimate = await getGasEstimate(\n      txidVersion,\n      networkName,\n      transaction,\n      fromWalletAddress,\n      true, // sendWithPublicWallet\n      false, // isCrossContractCall\n    );\n\n    return gasEstimateResponse(\n      gasEstimate,\n      undefined, // broadcasterFeeCommitment\n      true, // isGasEstimateWithDummyProof\n    );\n  } catch (err) {\n    throw reportAndSanitizeError(\n      gasEstimateForUnprovenUnshieldToOrigin.name,\n      err,\n    );\n  }\n};\n"]}