{"version":3,"file":"tx-generator.js","sourceRoot":"","sources":["../../../src/services/transactions/tx-generator.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RailgunWallet,\n  TransactionBatch,\n  AdaptID,\n  OutputType,\n  getTokenDataERC20,\n  getTokenDataNFT,\n  ERC721_NOTE_VALUE,\n  NFTTokenData,\n  PreTransactionPOIsPerTxidLeafPerList,\n  RailgunVersionedSmartContracts,\n  TransactionStructV2,\n  TransactionStructV3,\n  RelayAdaptVersionedSmartContracts,\n} from '@railgun-community/engine';\nimport {\n  RailgunERC20Amount,\n  RailgunERC20AmountRecipient,\n  NetworkName,\n  NETWORK_CONFIG,\n  ProofType,\n  RailgunNFTAmountRecipient,\n  NFTTokenType,\n  TXIDVersion,\n} from '@railgun-community/shared-models';\nimport {\n  erc20NoteFromERC20AmountRecipient,\n  nftNoteFromNFTAmountRecipient,\n} from './tx-notes';\nimport { getProver } from '../railgun/core/prover';\nimport {\n  assertValidEthAddress,\n  assertValidRailgunAddress,\n  fullWalletForID,\n  walletForID,\n} from '../railgun/wallets/wallets';\nimport { assertNotBlockedAddress } from '../../utils/blocked-address';\nimport { shouldSetOverallBatchMinGasPriceForNetwork } from '../../utils/gas-price';\nimport { ContractTransaction } from 'ethers';\nimport { POIRequired } from '../poi/poi-required';\n\nconst DUMMY_AMOUNT = 0n;\nexport const DUMMY_FROM_ADDRESS = '0x000000000000000000000000000000000000dEaD';\n\nexport type GenerateTransactionsProgressCallback = (\n  progress: number,\n  status: string,\n) => void;\n\nexport const generateProofTransactions = async (\n  proofType: ProofType,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  txidVersion: TXIDVersion,\n  encryptionKey: string,\n  showSenderAddressToRecipient: boolean,\n  memoText: Optional<string>,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>,\n  sendWithPublicWallet: boolean,\n  relayAdaptID: Optional<AdaptID>,\n  useDummyProof: boolean,\n  overallBatchMinGasPrice: Optional<bigint>,\n  progressCallback: GenerateTransactionsProgressCallback,\n  originShieldTxidForSpendabilityOverride?: string,\n): Promise<{\n  provedTransactions: (TransactionStructV2 | TransactionStructV3)[];\n  preTransactionPOIsPerTxidLeafPerList: PreTransactionPOIsPerTxidLeafPerList;\n}> => {\n  const railgunWallet = fullWalletForID(railgunWalletID);\n\n  const txs = await transactionsFromERC20Amounts(\n    proofType,\n    erc20AmountRecipients,\n    nftAmountRecipients,\n    railgunWallet,\n    txidVersion,\n    encryptionKey,\n    showSenderAddressToRecipient,\n    memoText,\n    networkName,\n    broadcasterFeeERC20AmountRecipient,\n    sendWithPublicWallet,\n    relayAdaptID,\n    useDummyProof,\n    overallBatchMinGasPrice,\n    progressCallback,\n    originShieldTxidForSpendabilityOverride,\n  );\n  return txs;\n};\n\nexport const nullifiersForTransactions = (\n  transactions: (TransactionStructV2 | TransactionStructV3)[],\n): string[] => {\n  return transactions\n    .map(transaction => transaction.nullifiers)\n    .flat() as string[];\n};\n\nexport const createDummyBroadcasterFeeERC20Amount = (feeTokenAddress: string) => {\n  const broadcasterFeeERC20Amount: RailgunERC20Amount = {\n    tokenAddress: feeTokenAddress,\n    amount: DUMMY_AMOUNT,\n  };\n  return broadcasterFeeERC20Amount;\n};\n\nexport const generateDummyProofTransactions = async (\n  proofType: ProofType,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  txidVersion: TXIDVersion,\n  encryptionKey: string,\n  showSenderAddressToRecipient: boolean,\n  memoText: Optional<string>,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  broadcasterFeeERC20Amount: Optional<RailgunERC20Amount>,\n  sendWithPublicWallet: boolean,\n  overallBatchMinGasPrice: Optional<bigint>,\n  originShieldTxidForSpendabilityOverride?: string,\n): Promise<(TransactionStructV2 | TransactionStructV3)[]> => {\n  if (!broadcasterFeeERC20Amount && !sendWithPublicWallet) {\n    throw new Error('Must send with broadcaster or public wallet.');\n  }\n\n  const railgunWallet = walletForID(railgunWalletID);\n\n  // Use self-wallet as dummy broadcaster address.\n  const broadcasterRailgunAddress = railgunWallet.getAddress(undefined);\n\n  const broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient> =\n    broadcasterFeeERC20Amount\n      ? {\n        ...broadcasterFeeERC20Amount,\n        recipientAddress: broadcasterRailgunAddress,\n      }\n      : undefined;\n\n  return (\n    await generateProofTransactions(\n      proofType,\n      networkName,\n      railgunWalletID,\n      txidVersion,\n      encryptionKey,\n      showSenderAddressToRecipient,\n      memoText,\n      erc20AmountRecipients,\n      nftAmountRecipients,\n      broadcasterFeeERC20AmountRecipient,\n      sendWithPublicWallet,\n      undefined, // relayAdaptID\n      true, // useDummyProof\n      overallBatchMinGasPrice,\n      () => {}, // progressCallback (not necessary for dummy txs)\n      originShieldTxidForSpendabilityOverride,\n    )\n  ).provedTransactions;\n};\n\nexport const generateTransact = async (\n  txidVersion: TXIDVersion,\n  txs: (TransactionStructV2 | TransactionStructV3)[],\n  networkName: NetworkName,\n  useDummyProof = false,\n): Promise<ContractTransaction> => {\n  const chain = NETWORK_CONFIG[networkName].chain;\n  const transaction = await RailgunVersionedSmartContracts.generateTransact(\n    txidVersion,\n    chain,\n    txs,\n  );\n  if (useDummyProof) {\n    return {\n      ...transaction,\n      from: DUMMY_FROM_ADDRESS,\n    };\n  }\n  return transaction;\n};\n\nexport const generateUnshieldBaseToken = async (\n  txidVersion: TXIDVersion,\n  txs: (TransactionStructV2 | TransactionStructV3)[],\n  networkName: NetworkName,\n  toWalletAddress: string,\n  relayAdaptParamsRandom: string,\n  useDummyProof = false,\n): Promise<ContractTransaction> => {\n  assertValidEthAddress(toWalletAddress);\n  assertNotBlockedAddress(toWalletAddress);\n\n  const chain = NETWORK_CONFIG[networkName].chain;\n\n  const transaction =\n    await RelayAdaptVersionedSmartContracts.populateUnshieldBaseToken(\n      txidVersion,\n      chain,\n      txs,\n      toWalletAddress,\n      relayAdaptParamsRandom,\n      useDummyProof,\n    );\n  if (useDummyProof) {\n    return {\n      ...transaction,\n      from: DUMMY_FROM_ADDRESS,\n    };\n  }\n  return transaction;\n};\n\nconst transactionsFromERC20Amounts = async (\n  proofType: ProofType,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  railgunWallet: RailgunWallet,\n  txidVersion: TXIDVersion,\n  encryptionKey: string,\n  showSenderAddressToRecipient: boolean,\n  memoText: Optional<string>,\n  networkName: NetworkName,\n  broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>,\n  sendWithPublicWallet: boolean,\n  relayAdaptID: Optional<AdaptID>,\n  useDummyProof: boolean,\n  overallBatchMinGasPrice: Optional<bigint>,\n  progressCallback: GenerateTransactionsProgressCallback,\n  originShieldTxidForSpendabilityOverride?: string,\n): Promise<{\n  provedTransactions: (TransactionStructV2 | TransactionStructV3)[];\n  preTransactionPOIsPerTxidLeafPerList: PreTransactionPOIsPerTxidLeafPerList;\n}> => {\n  const network = NETWORK_CONFIG[networkName];\n  const { chain } = network;\n\n  // Removes overallBatchMinGasPrice for L2 networks and non-Broadcaster transactions.\n  const validatedOverallBatchMinGasPrice =\n    shouldSetOverallBatchMinGasPriceForNetwork(\n      sendWithPublicWallet,\n      networkName,\n    )\n      ? BigInt(overallBatchMinGasPrice ?? 0)\n      : BigInt(0);\n\n  const transactionBatch = new TransactionBatch(\n    chain,\n    validatedOverallBatchMinGasPrice,\n  );\n  if (relayAdaptID) {\n    transactionBatch.setAdaptID(relayAdaptID);\n  }\n\n  if (broadcasterFeeERC20AmountRecipient && !sendWithPublicWallet) {\n    assertValidRailgunAddress(broadcasterFeeERC20AmountRecipient.recipientAddress);\n\n    // Add Broadcaster Fee - must be first transaction in the batch, and first output for the transaction.\n    transactionBatch.addOutput(\n      erc20NoteFromERC20AmountRecipient(\n        broadcasterFeeERC20AmountRecipient,\n        railgunWallet,\n        OutputType.BroadcasterFee,\n        false, // showSenderAddressToRecipient - never show sender for Broadcaster fees\n        undefined, // memoText\n      ),\n    );\n  }\n\n  erc20AmountRecipients.forEach(\n    (erc20AmountRecipient: RailgunERC20AmountRecipient) => {\n      addTransactionOutputsERC20(\n        proofType,\n        transactionBatch,\n        erc20AmountRecipient,\n        railgunWallet,\n        showSenderAddressToRecipient,\n        memoText,\n      );\n    },\n  );\n\n  nftAmountRecipients.forEach(\n    (nftAmountRecipient: RailgunNFTAmountRecipient) => {\n      addTransactionOutputsNFT(\n        proofType,\n        transactionBatch,\n        nftAmountRecipient,\n        railgunWallet,\n        showSenderAddressToRecipient,\n        memoText,\n      );\n    },\n  );\n\n  const shouldGeneratePreTransactionPOIs =\n    !sendWithPublicWallet &&\n    (await POIRequired.isRequiredForNetwork(networkName));\n\n  const txBatches = await generateAllProofs(\n    transactionBatch,\n    railgunWallet,\n    txidVersion,\n    encryptionKey,\n    useDummyProof,\n    progressCallback,\n    shouldGeneratePreTransactionPOIs,\n    originShieldTxidForSpendabilityOverride,\n  );\n  return txBatches;\n};\n\nconst addTransactionOutputsERC20 = (\n  proofType: ProofType,\n  transactionBatch: TransactionBatch,\n  erc20AmountRecipient: RailgunERC20AmountRecipient,\n  railgunWallet: RailgunWallet,\n  showSenderAddressToRecipient: boolean,\n  memoText: Optional<string>,\n) => {\n  switch (proofType) {\n    case ProofType.Transfer: {\n      addTransactionOutputsTransferERC20(\n        transactionBatch,\n        erc20AmountRecipient,\n        railgunWallet,\n        showSenderAddressToRecipient,\n        memoText,\n      );\n      break;\n    }\n    case ProofType.CrossContractCalls:\n    case ProofType.UnshieldBaseToken:\n    case ProofType.Unshield: {\n      addTransactionOutputsUnshieldERC20(\n        transactionBatch,\n        erc20AmountRecipient,\n        false, // allowOverride\n      );\n      break;\n    }\n  }\n};\n\nconst addTransactionOutputsNFT = (\n  proofType: ProofType,\n  transactionBatch: TransactionBatch,\n  nftAmountRecipient: RailgunNFTAmountRecipient,\n  railgunWallet: RailgunWallet,\n  showSenderAddressToRecipient: boolean,\n  memoText: Optional<string>,\n) => {\n  switch (proofType) {\n    case ProofType.Transfer: {\n      addTransactionOutputsTransferNFT(\n        transactionBatch,\n        nftAmountRecipient,\n        railgunWallet,\n        showSenderAddressToRecipient,\n        memoText,\n      );\n      break;\n    }\n    case ProofType.CrossContractCalls:\n    case ProofType.UnshieldBaseToken:\n    case ProofType.Unshield: {\n      addTransactionOutputsUnshieldNFT(\n        transactionBatch,\n        nftAmountRecipient,\n        false, // allowOverride\n      );\n      break;\n    }\n  }\n};\n\nconst addTransactionOutputsTransferERC20 = (\n  transactionBatch: TransactionBatch,\n  erc20AmountRecipient: RailgunERC20AmountRecipient,\n  railgunWallet: RailgunWallet,\n  showSenderAddressToRecipient: boolean,\n  memoText: Optional<string>,\n) => {\n  assertValidRailgunAddress(erc20AmountRecipient.recipientAddress);\n\n  transactionBatch.addOutput(\n    erc20NoteFromERC20AmountRecipient(\n      erc20AmountRecipient,\n      railgunWallet,\n      OutputType.Transfer,\n      showSenderAddressToRecipient,\n      memoText,\n    ),\n  );\n};\n\nconst addTransactionOutputsUnshieldERC20 = (\n  transactionBatch: TransactionBatch,\n  erc20AmountRecipient: RailgunERC20AmountRecipient,\n  allowOverride?: boolean,\n) => {\n  const { recipientAddress, amount } = erc20AmountRecipient;\n\n  assertValidEthAddress(recipientAddress);\n  assertNotBlockedAddress(recipientAddress);\n\n  const tokenData = getTokenDataERC20(erc20AmountRecipient.tokenAddress);\n\n  transactionBatch.addUnshieldData({\n    toAddress: erc20AmountRecipient.recipientAddress,\n    value: amount,\n    tokenData,\n    allowOverride,\n  });\n};\n\nconst addTransactionOutputsTransferNFT = (\n  transactionBatch: TransactionBatch,\n  nftAmountRecipient: RailgunNFTAmountRecipient,\n  railgunWallet: RailgunWallet,\n  showSenderAddressToRecipient: boolean,\n  memoText: Optional<string>,\n) => {\n  assertValidRailgunAddress(nftAmountRecipient.recipientAddress);\n\n  transactionBatch.addOutput(\n    nftNoteFromNFTAmountRecipient(\n      nftAmountRecipient,\n      railgunWallet,\n      showSenderAddressToRecipient,\n      memoText,\n    ),\n  );\n};\n\nconst addTransactionOutputsUnshieldNFT = (\n  transactionBatch: TransactionBatch,\n  nftAmountRecipient: RailgunNFTAmountRecipient,\n  allowOverride?: boolean,\n) => {\n  const { recipientAddress, nftAddress, tokenSubID, nftTokenType, amount } =\n    nftAmountRecipient;\n\n  assertValidEthAddress(recipientAddress);\n  assertNotBlockedAddress(recipientAddress);\n\n  const tokenData: NFTTokenData = getTokenDataNFT(\n    nftAddress,\n    nftTokenType as 1 | 2,\n    tokenSubID,\n  );\n\n  const value: bigint =\n    nftTokenType === NFTTokenType.ERC721 ? ERC721_NOTE_VALUE : amount;\n\n  transactionBatch.addUnshieldData({\n    toAddress: recipientAddress,\n    value,\n    tokenData,\n    allowOverride,\n  });\n};\n\nconst generateAllProofs = async (\n  transactionBatch: TransactionBatch,\n  railgunWallet: RailgunWallet,\n  txidVersion: TXIDVersion,\n  encryptionKey: string,\n  useDummyProof: boolean,\n  progressCallback: GenerateTransactionsProgressCallback,\n  shouldGeneratePreTransactionPOIs: boolean,\n  originShieldTxidForSpendabilityOverride?: string,\n): Promise<{\n  provedTransactions: (TransactionStructV2 | TransactionStructV3)[];\n  preTransactionPOIsPerTxidLeafPerList: PreTransactionPOIsPerTxidLeafPerList;\n}> => {\n  const prover = getProver();\n  if (useDummyProof) {\n    return {\n      provedTransactions: await transactionBatch.generateDummyTransactions(\n        prover,\n        railgunWallet,\n        txidVersion,\n        encryptionKey,\n        originShieldTxidForSpendabilityOverride,\n      ),\n      preTransactionPOIsPerTxidLeafPerList: {},\n    };\n  }\n  return transactionBatch.generateTransactions(\n    prover,\n    railgunWallet,\n    txidVersion,\n    encryptionKey,\n    progressCallback,\n    shouldGeneratePreTransactionPOIs,\n    originShieldTxidForSpendabilityOverride,\n  );\n};\n"]}