{"version":3,"file":"proof-cache.js","sourceRoot":"","sources":["../../../src/services/transactions/proof-cache.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  NetworkName,\n  ProofType,\n  RailgunNFTAmountRecipient,\n  RailgunERC20Amount,\n  RailgunERC20AmountRecipient,\n  RailgunNFTAmount,\n  TransactionGasDetails,\n  isDefined,\n  RailgunERC20Recipient,\n  TXIDVersion,\n} from '@railgun-community/shared-models';\nimport { shouldSetOverallBatchMinGasPriceForNetwork } from '../../utils/gas-price';\nimport { compareContractTransactionArrays } from '../../utils/utils';\nimport { setGasDetailsForTransaction } from './tx-gas-details';\nimport {\n  compareERC20AmountRecipients,\n  compareERC20AmountRecipientArrays,\n  compareERC20AmountArrays,\n  compareNFTAmountRecipientArrays,\n  compareNFTAmountArrays,\n  compareERC20RecipientArrays,\n} from './tx-notes';\nimport { ContractTransaction } from 'ethers';\nimport { PreTransactionPOIsPerTxidLeafPerList } from '@railgun-community/engine';\n\nexport type ProvedTransaction = {\n  proofType: ProofType;\n  txidVersion: TXIDVersion;\n  transaction: ContractTransaction;\n  railgunWalletID: string;\n  showSenderAddressToRecipient: boolean;\n  memoText: Optional<string>;\n  erc20AmountRecipients: RailgunERC20AmountRecipient[];\n  nftAmountRecipients: RailgunNFTAmountRecipient[];\n  relayAdaptUnshieldERC20Amounts: Optional<RailgunERC20Amount[]>;\n  relayAdaptUnshieldNFTAmounts: Optional<RailgunNFTAmount[]>;\n  relayAdaptShieldERC20Recipients: Optional<RailgunERC20Recipient[]>;\n  relayAdaptShieldNFTRecipients: Optional<RailgunNFTAmount[]>;\n  crossContractCalls: Optional<ContractTransaction[]>;\n  broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>;\n  sendWithPublicWallet: boolean;\n  overallBatchMinGasPrice: Optional<bigint>;\n  preTransactionPOIsPerTxidLeafPerList: PreTransactionPOIsPerTxidLeafPerList;\n  nullifiers: string[];\n};\n\nlet cachedProvedTransaction: Optional<ProvedTransaction>;\n\nexport const populateProvedTransaction = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  proofType: ProofType,\n  railgunWalletID: string,\n  showSenderAddressToRecipient: boolean,\n  memoText: Optional<string>,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  relayAdaptUnshieldERC20Amounts: Optional<RailgunERC20Amount[]>,\n  relayAdaptUnshieldNFTAmounts: Optional<RailgunNFTAmount[]>,\n  relayAdaptShieldERC20Recipients: Optional<RailgunERC20Recipient[]>,\n  relayAdaptShieldNFTRecipients: Optional<RailgunNFTAmount[]>,\n  crossContractCalls: Optional<ContractTransaction[]>,\n  broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>,\n  sendWithPublicWallet: boolean,\n  overallBatchMinGasPrice: Optional<bigint>,\n  gasDetails: TransactionGasDetails,\n): Promise<{\n  transaction: ContractTransaction;\n  nullifiers: string[];\n  preTransactionPOIsPerTxidLeafPerList: PreTransactionPOIsPerTxidLeafPerList;\n}> => {\n  try {\n    validateCachedProvedTransaction(\n      txidVersion,\n      networkName,\n      proofType,\n      railgunWalletID,\n      showSenderAddressToRecipient,\n      memoText,\n      erc20AmountRecipients,\n      nftAmountRecipients,\n      relayAdaptUnshieldERC20Amounts,\n      relayAdaptUnshieldNFTAmounts,\n      relayAdaptShieldERC20Recipients,\n      relayAdaptShieldNFTRecipients,\n      crossContractCalls,\n      broadcasterFeeERC20AmountRecipient,\n      sendWithPublicWallet,\n      overallBatchMinGasPrice,\n    );\n  } catch (cause) {\n    if (!(cause instanceof Error)) {\n      throw new Error('Non-error thrown from populateProvedTransaction', {\n        cause,\n      });\n    }\n    throw new Error(`Invalid proof for this transaction`, { cause });\n  }\n\n  const { transaction, nullifiers, preTransactionPOIsPerTxidLeafPerList } =\n    getCachedProvedTransaction();\n\n  setGasDetailsForTransaction(\n    networkName,\n    transaction,\n    gasDetails,\n    sendWithPublicWallet,\n  );\n\n  return { transaction, nullifiers, preTransactionPOIsPerTxidLeafPerList };\n};\n\nexport const setCachedProvedTransaction = (tx?: ProvedTransaction) => {\n  if (isDefined(tx?.transaction?.from)) {\n    throw new Error(`Cannot cache a transaction with a 'from' address.`);\n  }\n  cachedProvedTransaction = tx;\n};\n\nexport const getCachedProvedTransaction = (): ProvedTransaction => {\n  return cachedProvedTransaction as ProvedTransaction;\n};\n\nconst shouldValidateERC20AmountRecipients = (proofType: ProofType) => {\n  switch (proofType) {\n    case ProofType.CrossContractCalls:\n      // Skip validation for erc20AmountRecipients, which is not used\n      // in this transaction type.\n      return false;\n    case ProofType.Transfer:\n    case ProofType.Unshield:\n    case ProofType.UnshieldBaseToken:\n      return true;\n  }\n};\n\nconst shouldValidateRelayAdaptAmounts = (proofType: ProofType) => {\n  switch (proofType) {\n    case ProofType.CrossContractCalls:\n    case ProofType.UnshieldBaseToken:\n      // Only validate for Cross Contract and Unshield Base Token proofs.\n      return true;\n    case ProofType.Transfer:\n    case ProofType.Unshield:\n      return false;\n  }\n};\n\nconst shouldValidateCrossContractCalls = (proofType: ProofType) => {\n  switch (proofType) {\n    case ProofType.CrossContractCalls:\n      // Only validate for Cross Contract proofs.\n      return true;\n    case ProofType.Transfer:\n    case ProofType.Unshield:\n    case ProofType.UnshieldBaseToken:\n      return false;\n  }\n};\n\nexport const validateCachedProvedTransaction = (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  proofType: ProofType,\n  railgunWalletID: string,\n  showSenderAddressToRecipient: boolean,\n  memoText: Optional<string>,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  relayAdaptUnshieldERC20Amounts: Optional<RailgunERC20Amount[]>,\n  relayAdaptUnshieldNFTAmounts: Optional<RailgunNFTAmount[]>,\n  relayAdaptShieldERC20Recipients: Optional<RailgunERC20Recipient[]>,\n  relayAdaptShieldNFTRecipients: Optional<RailgunNFTAmount[]>,\n  crossContractCalls: Optional<ContractTransaction[]>,\n  broadcasterFeeERC20AmountRecipient: Optional<RailgunERC20AmountRecipient>,\n  sendWithPublicWallet: boolean,\n  overallBatchMinGasPrice: Optional<bigint>,\n): void => {\n  if (!cachedProvedTransaction) {\n    throw new Error('No proof found.');\n  } else if (cachedProvedTransaction.txidVersion !== txidVersion) {\n    throw new Error('Mismatch: txidVersion.');\n  } else if (cachedProvedTransaction.proofType !== proofType) {\n    throw new Error('Mismatch: proofType.');\n  } else if (cachedProvedTransaction.railgunWalletID !== railgunWalletID) {\n    throw new Error('Mismatch: railgunWalletID.');\n  } else if (\n    proofType === ProofType.Transfer &&\n    cachedProvedTransaction.showSenderAddressToRecipient !==\n      showSenderAddressToRecipient\n  ) {\n    throw new Error('Mismatch: showSenderAddressToRecipient.');\n  } else if (\n    proofType === ProofType.Transfer &&\n    cachedProvedTransaction.memoText !== memoText\n  ) {\n    throw new Error('Mismatch: memoText.');\n  } else if (\n    shouldValidateERC20AmountRecipients(proofType) &&\n    !compareERC20AmountRecipientArrays(\n      erc20AmountRecipients,\n      cachedProvedTransaction.erc20AmountRecipients,\n    )\n  ) {\n    throw new Error('Mismatch: erc20AmountRecipients.');\n  } else if (\n    !compareNFTAmountRecipientArrays(\n      nftAmountRecipients,\n      cachedProvedTransaction.nftAmountRecipients,\n    )\n  ) {\n    throw new Error('Mismatch: nftAmountRecipients.');\n  } else if (\n    shouldValidateRelayAdaptAmounts(proofType) &&\n    !compareERC20AmountArrays(\n      relayAdaptUnshieldERC20Amounts,\n      cachedProvedTransaction.relayAdaptUnshieldERC20Amounts,\n    )\n  ) {\n    throw new Error('Mismatch: relayAdaptUnshieldERC20Amounts.');\n  } else if (\n    shouldValidateRelayAdaptAmounts(proofType) &&\n    !compareNFTAmountArrays(\n      relayAdaptUnshieldNFTAmounts,\n      cachedProvedTransaction.relayAdaptUnshieldNFTAmounts,\n    )\n  ) {\n    throw new Error('Mismatch: relayAdaptUnshieldNFTAmounts.');\n  } else if (\n    shouldValidateRelayAdaptAmounts(proofType) &&\n    !compareERC20RecipientArrays(\n      relayAdaptShieldERC20Recipients,\n      cachedProvedTransaction.relayAdaptShieldERC20Recipients,\n    )\n  ) {\n    throw new Error('Mismatch: relayAdaptShieldERC20Recipients.');\n  } else if (\n    shouldValidateRelayAdaptAmounts(proofType) &&\n    !compareNFTAmountArrays(\n      relayAdaptShieldNFTRecipients,\n      cachedProvedTransaction.relayAdaptShieldNFTRecipients,\n    )\n  ) {\n    throw new Error('Mismatch: relayAdaptShieldNFTRecipients.');\n  } else if (\n    shouldValidateCrossContractCalls(proofType) &&\n    !compareContractTransactionArrays(\n      crossContractCalls,\n      cachedProvedTransaction.crossContractCalls,\n    )\n  ) {\n    throw new Error('Mismatch: crossContractCalls.');\n  } else if (\n    !compareERC20AmountRecipients(\n      cachedProvedTransaction.broadcasterFeeERC20AmountRecipient,\n      broadcasterFeeERC20AmountRecipient,\n    )\n  ) {\n    throw new Error('Mismatch: broadcasterFeeERC20AmountRecipient.');\n  } else if (\n    sendWithPublicWallet !== cachedProvedTransaction.sendWithPublicWallet\n  ) {\n    throw new Error('Mismatch: sendWithPublicWallet.');\n  } else if (\n    shouldSetOverallBatchMinGasPriceForNetwork(\n      cachedProvedTransaction.sendWithPublicWallet,\n      networkName,\n    ) &&\n    overallBatchMinGasPrice !== cachedProvedTransaction.overallBatchMinGasPrice\n  ) {\n    throw new Error('Mismatch: overallBatchMinGasPrice.');\n  }\n};\n"]}