{"version":3,"file":"tx-gas-details.js","sourceRoot":"","sources":["../../../src/services/transactions/tx-gas-details.ts"],"names":[],"mappings":";;;AAAA,oEAS0C;AAC1C,wCAA2D;AAC3D,6CAA2D;AAC3D,sDAGmC;AAG5B,MAAM,cAAc,GAAG,KAAK,EACjC,WAAwB,EACxB,WAAwB,EACxB,WAAgC,EAChC,iBAAyB,EACzB,oBAA6B,EAC7B,mBAA4B,EACX,EAAE;IACnB,MAAM,UAAU,GAAG,IAAA,2CAA2B,EAC5C,WAAW,EACX,oBAAoB,CACrB,CAAC;IAEF,0DAA0D;IAC1D,iFAAiF;IACjF,MAAM,6BAA6B,GAAwB;QACzD,GAAG,WAAW;QACd,IAAI,EAAE,iBAAiB;QACvB,IAAI,EAAE,UAAU;KACjB,CAAC;IACF,IAAI,oCAAoC,CAAC,WAAW,CAAC,EAAE;QACrD,OAAO,6BAA6B,CAAC,QAAQ,CAAC;KAC/C;IAED,IAAI;QACF,OAAO,WAAW,CAChB,WAAW,EACX,WAAW,EACX,6BAA6B,EAC7B,mBAAmB,CACpB,CAAC;KACH;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAA,8BAAsB,EAAC,sBAAc,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KACxD;AACH,CAAC,CAAC;AAlCW,QAAA,cAAc,kBAkCzB;AAEF,MAAM,WAAW,GAAG,CAClB,WAAwB,EACxB,WAAwB,EACxB,WAAgC,EAChC,mBAA4B,EACX,EAAE;IACnB,MAAM,QAAQ,GAAG,IAAA,uCAA6B,EAAC,WAAW,CAAC,CAAC;IAC5D,IAAI,mBAAmB,EAAE;QACvB,8DAA8D;QAC9D,OAAO,0CAAiC,CAAC,2BAA2B,CAClE,WAAW,EACX,QAAQ,EACR,WAAW,CACZ,CAAC;KACH;IACD,OAAO,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,oCAAoC,GAAG,CAAC,WAAwB,EAAE,EAAE;IACxE,QAAQ,WAAW,EAAE;QACnB,KAAK,2BAAW,CAAC,QAAQ;YACvB,OAAO,IAAI,CAAC;QACd,KAAK,2BAAW,CAAC,QAAQ,CAAC;QAC1B,KAAK,2BAAW,CAAC,QAAQ,CAAC;QAC1B,KAAK,2BAAW,CAAC,OAAO,CAAC;QACzB,KAAK,2BAAW,CAAC,WAAW,CAAC;QAC7B,KAAK,2BAAW,CAAC,0BAA0B,CAAC;QAC5C,KAAK,2BAAW,CAAC,yBAAyB,CAAC;QAC3C,KAAK,2BAAW,CAAC,yBAAyB,CAAC;QAC3C,KAAK,2BAAW,CAAC,wBAAwB,CAAC;QAC1C,KAAK,2BAAW,CAAC,eAAe,CAAC;QACjC,KAAK,2BAAW,CAAC,OAAO,CAAC;QACzB;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,CAAC;AAEK,MAAM,mBAAmB,GAAG,CACjC,WAAmB,EACnB,wBAAqD,EACrD,2BAAoC,EACG,EAAE;IACzC,gDAAgD;IAChD,iEAAiE;IACjE,MAAM,iCAAiC,GAAG,2BAA2B;QACnE,CAAC,CAAC,WAAW,GAAG,MAAM,CAAC,0DAAiD,CAAC;QACzE,CAAC,CAAC,WAAW,CAAC;IAEhB,MAAM,QAAQ,GAA0C;QACtD,WAAW,EAAE,iCAAiC;QAC9C,wBAAwB;KACzB,CAAC;IACF,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAhBW,QAAA,mBAAmB,uBAgB9B;AAEK,MAAM,2BAA2B,GAAG,CACzC,WAAwB,EACxB,WAAgC,EAChC,UAAiC,EACjC,oBAA6B,EAC7B,EAAE;IACF,MAAM,EAAE,WAAW,EAAE,GAAG,UAAU,CAAC;IAEnC,6CAA6C;IAC7C,WAAW,CAAC,QAAQ,GAAG,IAAA,iCAAiB,EAAC,WAAW,CAAC,CAAC;IAEtD,MAAM,UAAU,GAAG,IAAA,2CAA2B,EAC5C,WAAW,EACX,oBAAoB,CACrB,CAAC;IAEF,IAAI,UAAU,CAAC,UAAU,KAAK,UAAU,EAAE;QACxC,MAAM,eAAe,GAAG,oBAAoB;YAC1C,CAAC,CAAC,aAAa;YACf,CAAC,CAAC,aAAa,CAAC;QAClB,MAAM,IAAI,KAAK,CACb,0BAA0B,WAAW,KAAK,eAAe,mBAAmB,UAAU,kBAAkB,UAAU,CAAC,UAAU,oHAAoH,CAClP,CAAC;KACH;IAED,6CAA6C;IAC7C,WAAW,CAAC,IAAI,GAAG,UAAU,CAAC,UAAU,CAAC;IAEzC,QAAQ,UAAU,CAAC,UAAU,EAAE;QAC7B,KAAK,0BAAU,CAAC,KAAK,CAAC,CAAC;YACrB,6CAA6C;YAC7C,WAAW,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;YAC3C,6CAA6C;YAC7C,OAAO,WAAW,CAAC,UAAU,CAAC;YAC9B,MAAM;SACP;QACD,KAAK,0BAAU,CAAC,KAAK,CAAC,CAAC;YACrB,6CAA6C;YAC7C,WAAW,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;YAC3C,MAAM;SACP;QACD,KAAK,0BAAU,CAAC,KAAK,CAAC,CAAC;YACrB,6CAA6C;YAC7C,WAAW,CAAC,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC;YACnD,6CAA6C;YAC7C,WAAW,CAAC,oBAAoB,GAAG,UAAU,CAAC,oBAAoB,CAAC;YACnE,MAAM;SACP;KACF;AACH,CAAC,CAAC;AAjDW,QAAA,2BAA2B,+BAiDtC","sourcesContent":["import {\n  RailgunTransactionGasEstimateResponse,\n  EVMGasType,\n  calculateGasLimit,\n  NetworkName,\n  getEVMGasTypeForTransaction,\n  CommitmentSummary,\n  TransactionGasDetails,\n  TXIDVersion,\n} from '@railgun-community/shared-models';\nimport { getFallbackProviderForNetwork } from '../railgun';\nimport { reportAndSanitizeError } from '../../utils/error';\nimport {\n  GAS_ESTIMATE_VARIANCE_DUMMY_TO_ACTUAL_TRANSACTION,\n  RelayAdaptVersionedSmartContracts,\n} from '@railgun-community/engine';\nimport { ContractTransaction } from 'ethers';\n\nexport const getGasEstimate = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  transaction: ContractTransaction,\n  fromWalletAddress: string,\n  sendWithPublicWallet: boolean,\n  isCrossContractCall: boolean,\n): Promise<bigint> => {\n  const evmGasType = getEVMGasTypeForTransaction(\n    networkName,\n    sendWithPublicWallet,\n  );\n\n  // Add 'from' field, which is required, as a mock address.\n  // Note that DEPOSIT needs a real address, as it checks the balance for transfer.\n  const estimateGasTransactionRequest: ContractTransaction = {\n    ...transaction,\n    from: fromWalletAddress,\n    type: evmGasType,\n  };\n  if (shouldRemoveGasLimitForL2GasEstimate(networkName)) {\n    delete estimateGasTransactionRequest.gasLimit;\n  }\n\n  try {\n    return estimateGas(\n      txidVersion,\n      networkName,\n      estimateGasTransactionRequest,\n      isCrossContractCall,\n    );\n  } catch (err) {\n    throw reportAndSanitizeError(getGasEstimate.name, err);\n  }\n};\n\nconst estimateGas = (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  transaction: ContractTransaction,\n  isCrossContractCall: boolean,\n): Promise<bigint> => {\n  const provider = getFallbackProviderForNetwork(networkName);\n  if (isCrossContractCall) {\n    // Includes custom error handler for relay-adapt transactions.\n    return RelayAdaptVersionedSmartContracts.estimateGasWithErrorHandler(\n      txidVersion,\n      provider,\n      transaction,\n    );\n  }\n  return provider.estimateGas(transaction);\n};\n\n/**\n * Gas estimates can fail for relay-adapt transactions on L2s like Arbitrum.\n * This occurs on cross-contract calls (relay-adapt) which have a manual minimum gas limit set by Railgun Engine.\n */\nconst shouldRemoveGasLimitForL2GasEstimate = (networkName: NetworkName) => {\n  switch (networkName) {\n    case NetworkName.Arbitrum:\n      return true;\n    case NetworkName.Ethereum:\n    case NetworkName.BNBChain:\n    case NetworkName.Polygon:\n    case NetworkName.PolygonAmoy:\n    case NetworkName.EthereumRopsten_DEPRECATED:\n    case NetworkName.EthereumGoerli_DEPRECATED:\n    case NetworkName.ArbitrumGoerli_DEPRECATED:\n    case NetworkName.PolygonMumbai_DEPRECATED:\n    case NetworkName.EthereumSepolia:\n    case NetworkName.Hardhat:\n    default:\n      return false;\n  }\n};\n\nexport const gasEstimateResponse = (\n  gasEstimate: bigint,\n  broadcasterFeeCommitment: Optional<CommitmentSummary>,\n  isGasEstimateWithDummyProof: boolean,\n): RailgunTransactionGasEstimateResponse => {\n  // TODO: This variance will be different on L2s.\n  // However, it's small enough that it shouldn't matter very much.\n  const gasEstimateWithDummyProofVariance = isGasEstimateWithDummyProof\n    ? gasEstimate + BigInt(GAS_ESTIMATE_VARIANCE_DUMMY_TO_ACTUAL_TRANSACTION)\n    : gasEstimate;\n\n  const response: RailgunTransactionGasEstimateResponse = {\n    gasEstimate: gasEstimateWithDummyProofVariance,\n    broadcasterFeeCommitment,\n  };\n  return response;\n};\n\nexport const setGasDetailsForTransaction = (\n  networkName: NetworkName,\n  transaction: ContractTransaction,\n  gasDetails: TransactionGasDetails,\n  sendWithPublicWallet: boolean,\n) => {\n  const { gasEstimate } = gasDetails;\n\n  // eslint-disable-next-line no-param-reassign\n  transaction.gasLimit = calculateGasLimit(gasEstimate);\n\n  const evmGasType = getEVMGasTypeForTransaction(\n    networkName,\n    sendWithPublicWallet,\n  );\n\n  if (gasDetails.evmGasType !== evmGasType) {\n    const transactionType = sendWithPublicWallet\n      ? 'self-signed'\n      : 'Broadcaster';\n    throw new Error(\n      `Invalid evmGasType for ${networkName} (${transactionType}): expected Type${evmGasType}, received Type${gasDetails.evmGasType} in gasDetails. Retrieve appropriate gas type with getEVMGasTypeForTransaction (@railgun-community/shared-models).`,\n    );\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  transaction.type = gasDetails.evmGasType;\n\n  switch (gasDetails.evmGasType) {\n    case EVMGasType.Type0: {\n      // eslint-disable-next-line no-param-reassign\n      transaction.gasPrice = gasDetails.gasPrice;\n      // eslint-disable-next-line no-param-reassign\n      delete transaction.accessList;\n      break;\n    }\n    case EVMGasType.Type1: {\n      // eslint-disable-next-line no-param-reassign\n      transaction.gasPrice = gasDetails.gasPrice;\n      break;\n    }\n    case EVMGasType.Type2: {\n      // eslint-disable-next-line no-param-reassign\n      transaction.maxFeePerGas = gasDetails.maxFeePerGas;\n      // eslint-disable-next-line no-param-reassign\n      transaction.maxPriorityFeePerGas = gasDetails.maxPriorityFeePerGas;\n      break;\n    }\n  }\n};\n"]}