{"version":3,"file":"tx-gas-broadcaster-fee-estimator.js","sourceRoot":"","sources":["../../../src/services/transactions/tx-gas-broadcaster-fee-estimator.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  TransactionStructV2,\n  TransactionStructV3,\n  convertTransactionStructToCommitmentSummary,\n} from '@railgun-community/engine';\nimport {\n  NetworkName,\n  TransactionGasDetails,\n  RailgunERC20Amount,\n  RailgunTransactionGasEstimateResponse,\n  FeeTokenDetails,\n  calculateMaximumGas,\n  RailgunERC20AmountRecipient,\n  CommitmentSummary,\n  TXIDVersion,\n} from '@railgun-community/shared-models';\nimport {\n  DUMMY_FROM_ADDRESS,\n  createDummyBroadcasterFeeERC20Amount,\n} from './tx-generator';\nimport { getGasEstimate, gasEstimateResponse } from './tx-gas-details';\nimport { balanceForERC20Token } from '../railgun/wallets/balance-update';\nimport { ContractTransaction } from 'ethers';\nimport { walletForID } from '../railgun/wallets/wallets';\n\nconst MAX_ITERATIONS_BROADCASTER_FEE_REESTIMATION = 5;\n\nexport const calculateBroadcasterFeeERC20Amount = (\n  feeTokenDetails: FeeTokenDetails,\n  gasDetails: TransactionGasDetails,\n): RailgunERC20Amount => {\n  const tokenFeePerUnitGas = BigInt(feeTokenDetails.feePerUnitGas);\n  const oneUnitGas = 10n ** 18n;\n  const maximumGas = calculateMaximumGas(gasDetails);\n  const tokenFee = (tokenFeePerUnitGas * maximumGas) / oneUnitGas;\n  return {\n    tokenAddress: feeTokenDetails.tokenAddress,\n    amount: tokenFee,\n  };\n};\n\nconst getBroadcasterFeeCommitment = (\n  transactionStructs: (TransactionStructV2 | TransactionStructV3)[],\n): CommitmentSummary => {\n  const transactionIndex = 0;\n  const broadcasterFeeCommitment = transactionStructs[transactionIndex];\n  const broadcasterFeeCommitmentIndex = 0;\n  return convertTransactionStructToCommitmentSummary(\n    broadcasterFeeCommitment,\n    broadcasterFeeCommitmentIndex,\n  );\n};\n\nexport const gasEstimateResponseDummyProofIterativeBroadcasterFee = async (\n  generateDummyTransactionStructsWithBroadcasterFee: (\n    broadcasterFeeERC20Amount: Optional<RailgunERC20Amount>,\n  ) => Promise<(TransactionStructV2 | TransactionStructV3)[]>,\n  generateTransaction: (\n    serializedTransactions: (TransactionStructV2 | TransactionStructV3)[],\n  ) => Promise<ContractTransaction>,\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  railgunWalletID: string,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  originalGasDetails: TransactionGasDetails,\n  feeTokenDetails: Optional<FeeTokenDetails>,\n  sendWithPublicWallet: boolean,\n  isCrossContractCall: boolean,\n): Promise<RailgunTransactionGasEstimateResponse> => {\n  const wallet = walletForID(railgunWalletID);\n\n  // Use dead address for private transaction gas estimate\n  const fromWalletAddress = DUMMY_FROM_ADDRESS;\n\n  const isGasEstimateWithDummyProof = true;\n\n  const dummyBroadcasterFee = feeTokenDetails\n    ? createDummyBroadcasterFeeERC20Amount(feeTokenDetails.tokenAddress)\n    : undefined;\n\n  let serializedTransactions =\n    await generateDummyTransactionStructsWithBroadcasterFee(\n      dummyBroadcasterFee,\n    );\n  let transaction = await generateTransaction(serializedTransactions);\n\n  let gasEstimate = await getGasEstimate(\n    txidVersion,\n    networkName,\n    transaction,\n    fromWalletAddress,\n    sendWithPublicWallet,\n    isCrossContractCall,\n  );\n\n  if (sendWithPublicWallet) {\n    return gasEstimateResponse(\n      gasEstimate,\n      undefined, // broadcasterFeeCommitment\n      isGasEstimateWithDummyProof,\n    );\n  }\n\n  if (!feeTokenDetails) {\n    throw new Error(\n      'Must have Broadcaster Fee details or sendWithPublicWallet field.',\n    );\n  }\n\n  // Find any erc20Amount in transfer that matches token of broadcaster fee, if exists.\n  const broadcasterFeeMatchingSendingERC20Amount = erc20AmountRecipients.find(\n    erc20AmountRecipient =>\n      erc20AmountRecipient.tokenAddress.toLowerCase() ===\n      feeTokenDetails.tokenAddress.toLowerCase(),\n  );\n\n  // Get private balance of matching token.\n  const balanceForBroadcasterFeeERC20 = await balanceForERC20Token(\n    txidVersion,\n    wallet,\n    networkName,\n    feeTokenDetails.tokenAddress,\n    true,\n  );\n\n  let broadcasterFeeCommitment = getBroadcasterFeeCommitment(\n    serializedTransactions,\n  );\n\n  // Iteratively calculate new broadcaster fee and estimate new gas amount.\n  // This change if the number of circuits changes because of the additional Broadcaster Fees.\n  for (let i = 0; i < MAX_ITERATIONS_BROADCASTER_FEE_REESTIMATION; i += 1) {\n    const updatedGasDetails: TransactionGasDetails = {\n      ...originalGasDetails,\n      gasEstimate,\n    };\n    const updatedBroadcasterFee: RailgunERC20Amount =\n      calculateBroadcasterFeeERC20Amount(feeTokenDetails, updatedGasDetails);\n\n    // If Broadcaster fee causes overflow with the token balance,\n    // then use the MAX amount for Broadcaster Fee, which is BALANCE - SENDING AMOUNT.\n    if (\n      balanceForBroadcasterFeeERC20 > 0n &&\n      broadcasterFeeMatchingSendingERC20Amount &&\n      // eslint-disable-next-line no-await-in-loop\n      (await broadcasterFeeWillOverflowBalance(\n        balanceForBroadcasterFeeERC20,\n        broadcasterFeeMatchingSendingERC20Amount,\n        updatedBroadcasterFee,\n      ))\n    ) {\n      updatedBroadcasterFee.amount =\n        balanceForBroadcasterFeeERC20 -\n        broadcasterFeeMatchingSendingERC20Amount.amount;\n    }\n\n    const newSerializedTransactions =\n      // eslint-disable-next-line no-await-in-loop\n      await generateDummyTransactionStructsWithBroadcasterFee(\n        updatedBroadcasterFee,\n      );\n\n    broadcasterFeeCommitment = getBroadcasterFeeCommitment(\n      newSerializedTransactions,\n    );\n\n    if (\n      compareCircuitSizesTransactionStructs(\n        newSerializedTransactions,\n        serializedTransactions,\n      )\n    ) {\n      // Same circuit sizes, no need to run further gas estimates.\n      return gasEstimateResponse(\n        gasEstimate,\n        broadcasterFeeCommitment,\n        isGasEstimateWithDummyProof,\n      );\n    }\n\n    serializedTransactions = newSerializedTransactions;\n\n    // eslint-disable-next-line no-await-in-loop\n    transaction = await generateTransaction(serializedTransactions);\n\n    // eslint-disable-next-line no-await-in-loop\n    const newGasEstimate = await getGasEstimate(\n      txidVersion,\n      networkName,\n      transaction,\n      fromWalletAddress,\n      sendWithPublicWallet,\n      isCrossContractCall,\n    );\n\n    if (newGasEstimate === gasEstimate) {\n      return gasEstimateResponse(\n        newGasEstimate,\n        broadcasterFeeCommitment,\n        isGasEstimateWithDummyProof,\n      );\n    }\n    gasEstimate = newGasEstimate;\n  }\n\n  return gasEstimateResponse(\n    gasEstimate,\n    broadcasterFeeCommitment,\n    isGasEstimateWithDummyProof,\n  );\n};\n\nconst compareCircuitSizesTransactionStructs = (\n  serializedA: (TransactionStructV2 | TransactionStructV3)[],\n  serializedB: (TransactionStructV2 | TransactionStructV3)[],\n) => {\n  if (serializedA.length !== serializedB.length) {\n    return false;\n  }\n  for (let i = 0; i < serializedA.length; i += 1) {\n    if (\n      serializedA[i].commitments.length !== serializedB[i].commitments.length\n    ) {\n      return false;\n    }\n    if (serializedA[i].nullifiers.length !== serializedB[i].nullifiers.length) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst broadcasterFeeWillOverflowBalance = async (\n  tokenBalance: bigint,\n  sendingERC20Amount: RailgunERC20Amount,\n  broadcasterFeeERC20Amount: RailgunERC20Amount,\n) => {\n  const sendingAmount = sendingERC20Amount.amount;\n  const broadcasterFeeAmount = broadcasterFeeERC20Amount.amount;\n\n  return sendingAmount + broadcasterFeeAmount > tokenBalance;\n};\n"]}