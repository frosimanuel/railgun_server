{"version":3,"file":"tx-shield.js","sourceRoot":"","sources":["../../../src/services/transactions/tx-shield.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RailgunPopulateTransactionResponse,\n  RailgunTransactionGasEstimateResponse,\n  NetworkName,\n  RailgunERC20AmountRecipient,\n  RailgunNFTAmountRecipient,\n  NFTTokenType,\n  TransactionGasDetails,\n  NETWORK_CONFIG,\n  TXIDVersion,\n} from '@railgun-community/shared-models';\nimport {\n  ShieldNote,\n  RailgunEngine,\n  ShieldRequestStruct,\n  ByteUtils,\n  ShieldNoteERC20,\n  ShieldNoteNFT,\n  ERC721_NOTE_VALUE,\n  RailgunVersionedSmartContracts,\n} from '@railgun-community/engine';\nimport {\n  gasEstimateResponse,\n  getGasEstimate,\n  setGasDetailsForTransaction,\n} from './tx-gas-details';\nimport { assertNotBlockedAddress } from '../../utils/blocked-address';\nimport { createNFTTokenDataFromRailgunNFTAmount } from './tx-cross-contract-calls';\nimport { reportAndSanitizeError } from '../../utils/error';\nimport { ContractTransaction } from 'ethers';\nimport { assertValidRailgunAddress } from '../railgun/wallets';\n\nexport const getShieldPrivateKeySignatureMessage = () => {\n  return ShieldNote.getShieldPrivateKeySignatureMessage();\n};\n\nconst generateERC20ShieldRequests = async (\n  erc20AmountRecipient: RailgunERC20AmountRecipient,\n  random: string,\n  shieldPrivateKey: string,\n): Promise<ShieldRequestStruct> => {\n  const railgunAddress = erc20AmountRecipient.recipientAddress;\n\n  assertValidRailgunAddress(railgunAddress);\n\n  const { masterPublicKey, viewingPublicKey } =\n    RailgunEngine.decodeAddress(railgunAddress);\n\n  const shield = new ShieldNoteERC20(\n    masterPublicKey,\n    random,\n    erc20AmountRecipient.amount,\n    erc20AmountRecipient.tokenAddress,\n  );\n  return shield.serialize(\n    ByteUtils.hexToBytes(shieldPrivateKey),\n    viewingPublicKey,\n  );\n};\n\nconst generateNFTShieldRequests = async (\n  nftAmountRecipient: RailgunNFTAmountRecipient,\n  random: string,\n  shieldPrivateKey: string,\n): Promise<ShieldRequestStruct> => {\n  const railgunAddress = nftAmountRecipient.recipientAddress;\n\n  assertValidRailgunAddress(railgunAddress);\n\n  const { masterPublicKey, viewingPublicKey } =\n    RailgunEngine.decodeAddress(railgunAddress);\n\n  const value =\n    nftAmountRecipient.nftTokenType === NFTTokenType.ERC721\n      ? ERC721_NOTE_VALUE\n      : nftAmountRecipient.amount;\n\n  const nftTokenData =\n    createNFTTokenDataFromRailgunNFTAmount(nftAmountRecipient);\n\n  const shield = new ShieldNoteNFT(\n    masterPublicKey,\n    random,\n    value,\n    nftTokenData,\n  );\n  return shield.serialize(\n    ByteUtils.hexToBytes(shieldPrivateKey),\n    viewingPublicKey,\n  );\n};\n\nexport const generateShieldTransaction = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  shieldPrivateKey: string,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n): Promise<ContractTransaction> => {\n  try {\n    const random = ByteUtils.randomHex(16);\n\n    const shieldInputs: ShieldRequestStruct[] = await Promise.all([\n      ...erc20AmountRecipients.map(erc20AmountRecipient =>\n        generateERC20ShieldRequests(\n          erc20AmountRecipient,\n          random,\n          shieldPrivateKey,\n        ),\n      ),\n      ...nftAmountRecipients.map(nftAmountRecipient =>\n        generateNFTShieldRequests(nftAmountRecipient, random, shieldPrivateKey),\n      ),\n    ]);\n\n    const chain = NETWORK_CONFIG[networkName].chain;\n    const transaction = await RailgunVersionedSmartContracts.generateShield(\n      txidVersion,\n      chain,\n      shieldInputs,\n    );\n    return transaction;\n  } catch (err) {\n    throw reportAndSanitizeError(generateShieldTransaction.name, err);\n  }\n};\n\nexport const populateShield = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  shieldPrivateKey: string,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  gasDetails?: TransactionGasDetails,\n): Promise<RailgunPopulateTransactionResponse> => {\n  try {\n    const transaction = await generateShieldTransaction(\n      txidVersion,\n      networkName,\n      shieldPrivateKey,\n      erc20AmountRecipients,\n      nftAmountRecipients,\n    );\n\n    if (gasDetails) {\n      const sendWithPublicWallet = true;\n      setGasDetailsForTransaction(\n        networkName,\n        transaction,\n        gasDetails,\n        sendWithPublicWallet,\n      );\n    }\n\n    return {\n      transaction,\n      preTransactionPOIsPerTxidLeafPerList: {},\n    };\n  } catch (err) {\n    throw reportAndSanitizeError(populateShield.name, err);\n  }\n};\n\nexport const gasEstimateForShield = async (\n  txidVersion: TXIDVersion,\n  networkName: NetworkName,\n  shieldPrivateKey: string,\n  erc20AmountRecipients: RailgunERC20AmountRecipient[],\n  nftAmountRecipients: RailgunNFTAmountRecipient[],\n  fromWalletAddress: string,\n): Promise<RailgunTransactionGasEstimateResponse> => {\n  try {\n    assertNotBlockedAddress(fromWalletAddress);\n\n    const transaction = await generateShieldTransaction(\n      txidVersion,\n      networkName,\n      shieldPrivateKey,\n      erc20AmountRecipients,\n      nftAmountRecipients,\n    );\n\n    const sendWithPublicWallet = true;\n    const isGasEstimateWithDummyProof = false;\n    return gasEstimateResponse(\n      await getGasEstimate(\n        txidVersion,\n        networkName,\n        transaction,\n        fromWalletAddress,\n        sendWithPublicWallet,\n        false, // isCrossContractCall\n      ),\n      undefined, // broadcasterFeeCommitment\n      isGasEstimateWithDummyProof,\n    );\n  } catch (err) {\n    throw reportAndSanitizeError(gasEstimateForShield.name, err);\n  }\n};\n"]}